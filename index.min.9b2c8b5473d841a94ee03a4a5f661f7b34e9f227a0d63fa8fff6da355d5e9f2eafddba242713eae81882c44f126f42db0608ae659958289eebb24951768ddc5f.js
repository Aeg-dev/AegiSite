var suggestions=document.getElementById('suggestions'),userinput=document.getElementById('userinput');document.addEventListener('keydown',inputFocus);function inputFocus(a){a.keyCode===191&&(a.preventDefault(),userinput.focus()),a.keyCode===27&&(userinput.blur(),suggestions.classList.add('d-none'))}document.addEventListener('click',function(a){var b=suggestions.contains(a.target);b||suggestions.classList.add('d-none')}),document.addEventListener('keydown',suggestionFocus);function suggestionFocus(b){const d=suggestions.querySelectorAll('a'),e=[...d],a=e.indexOf(document.activeElement);let c=0;b.keyCode===38?(b.preventDefault(),c=a>0?a-1:0,d[c].focus()):b.keyCode===40&&(b.preventDefault(),c=a+1<e.length?a+1:a,d[c].focus())}(function(){var b=new FlexSearch({preset:'score',cache:!0,doc:{id:'id',field:['title','description','content'],store:['href','title','description']}}),c=[{id:0,href:"/docs/3.2/en/main_page/",title:"Main Page",description:null,content:'\u003cp\u003eWelcome to the Aegisub manual. See our \u003ca href="/docs/3.2/en/about/"\u003eabout\u003c/a\u003e page for more\ninformation on the program, or browse the topics on the left bar.\u003c/p\u003e\n\u003cp\u003eDocumentation related to delopment of Aegisub and building Aegisub is located\nat \u003ca href="http://devel.aegisub.org"\u003ethe bug tracker\u003c/a\u003e.\u003c/p\u003e\n\u003ch2 id="starting-points"\u003eStarting points\u003c/h2\u003e\n\u003cp\u003e\u003ca href="/docs/3.2/en/overview/"\u003eQuick overview of Aegisub\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eCommon tasks:\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href="/docs/3.2/en/audio/"\u003eTiming a translated script to audio\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href="/docs/3.2/en/tutorials/#visualtypesetting"\u003eBasic typesetting of on-screen signs\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href="/docs/3.2/en/attaching_subtitles_to_video/"\u003ePutting your finished subtitles onto the video\u003c/a\u003e (for viewing or distribution)\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e^\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href="/docs/3.2/en/translation_assistant/"\u003eTranslating a subtitle file from one language to another\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href="/docs/3.2/en/fix_timing_tutorial/"\u003eCorrecting a subtitle that\u0026rsquo;s not properly synchronised to the video\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e^\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href="/docs/3.2/en/tutorials/#karaoketiming"\u003eTiming karaoke to a song\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href="/docs/3.2/en/automation/karaoke_templater/tutorial_1/"\u003eCreating fancy karaoke effects\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n'},{id:1,href:"/docs/3.2/en/about/",title:"What is Aegisub?",description:null,content:'\u003cp\u003eAegisub was originally created as a tool to make typesetting,\nparticularly in anime fansubs, a less painful experience. At the time\nof the start of the project, many other programs that supported the\nAdvanced Substation Alpha format lacked (and in many cases, still lack;\ndevelopment on several competing programs have since been dropped for\nvarious reasons completely unrelated to Aegisub) many vital functions,\nor were too buggy and/or unreliable to be really useful.\u003c/p\u003e\n\u003cp\u003eSince then, Aegisub has grown into a fully fledged, highly customizable\nsubtitle editor. It features a lot of convenient tools to help you with\ntiming, typesetting, editing and translating subtitles, as well as a\npowerful \u003ca href="/docs/3.2/en/automation/"\u003escripting environment\u003c/a\u003e called Automation\n(originally mostly intended for creating karaoke effects, Automation\ncan now be used much else, including creating macros and various other\nconvenient tools).\u003c/p\u003e\n'},{id:2,href:"/docs/3.2/en/highlights/",title:"Highlights",description:null,content:"\u003cp\u003eSome highlights of Aegisub:\u003c/p\u003e\n\u003cdl\u003e\n\u003cdt\u003eSimple and intuitive yet powerful interface for editing subtitles\u003c/dt\u003e\n\u003cdd\u003e\u003cul\u003e\n\u003cli\u003eWith help from such features as spell checking/thesaurus, a translation assistant, call tips for override tags, syntax highlighting and various macros, translating, editing and quality assuring subtitles is now easier than ever.\u003c/li\u003e\n\u003cli\u003eMade a mistake? Had a system crash? Don\u0026rsquo;t worry, Aegisub saves your .ass with features like multi-level undo/redo, auto saving, backups and emergency recovery saving in case of system or program crashes.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/dd\u003e\n\u003cdt\u003eSupport for many formats and character sets\u003c/dt\u003e\n\u003cdd\u003e\u003cul\u003e\n\u003cli\u003eAegisub doesn\u0026rsquo;t lock you into using any specific format; importing and exporting from and to several different formats (ranging from MPEG-4 Timed Text to MicroDVD) is supported.\u003c/li\u003e\n\u003cli\u003eMultiple language subtitles? Legacy programs without Unicode support? No problem, Aegisub has full support for both Unicode and most common legacy encodings; both reading and writing.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/dd\u003e\n\u003cdt\u003ePowerful video mode\u003c/dt\u003e\n\u003cdd\u003e\u003cul\u003e\n\u003cli\u003eNearly all video formats are supported out of the box, but if that isn\u0026rsquo;t enough, Aegisub can also use your system\u0026rsquo;s DirectShow environment to open any format you can play in Windows Media Player.\u003c/li\u003e\n\u003cli\u003eAutomatic live preview of subtitles updated as you type, showing you exactly what the subtitles will look like in the player.\u003c/li\u003e\n\u003cli\u003eFull support for variable framerate video and Matroska timecodes. Capable of reading timecodes directly from Matroska files for seamless VFR work.\u003c/li\u003e\n\u003cli\u003eProblems with anamorphic video? Overscan? Aegisub has the tools to handle it.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/dd\u003e\n\u003cdt\u003eVisual typesetting tools\u003c/dt\u003e\n\u003cdd\u003e\u003cul\u003e\n\u003cli\u003eTypesetting on easy mode! No need to manually edit override tags; drag, rotate or clip the subtitles directly on the video frame using your mouse.\u003c/li\u003e\n\u003cli\u003eWant to re-use typesetting on a video of different resolution or aspect ratio? Can\u0026rsquo;t figure out what color that sign is using? Aegisub has the tools to help you deal with it.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/dd\u003e\n\u003cdt\u003eIntuitive and customizable audio timing mode\u003c/dt\u003e\n\u003cdd\u003e\u003cul\u003e\n\u003cli\u003eTime dialogue or karaoke in any way you want with the heavily customizable audio interface; less painful than ever! Use features such as the spectrum analyzer mode or the automatic timing post-processor for even more efficient timing.\u003c/li\u003e\n\u003cli\u003eSupport for nearly every audio format in existence, and DirectShow support for if you manage to find one too obscure for libavcodec.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/dd\u003e\n\u003cdt\u003eFully scriptable through the Automation module\u003c/dt\u003e\n\u003cdd\u003e\u003cul\u003e\n\u003cli\u003eIs all the above not enough? Extend the program with your own macros or export filters using scripting in Lua.\u003c/li\u003e\n\u003cli\u003eComes with several ready-made scripts for quick and easy generation of your very own karaoke effects.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/dd\u003e\n\u003c/dl\u003e\n"},{id:3,href:"/docs/3.2/en/credits/",title:"Credits",description:null,content:'\u003cp\u003eAegisub was originally written by Rodrigo Braz Monteiro with significant contributions from Niels Martin Hansen.\nDevelopment was lead by Monteiro through 2008, Hansen through 2010, and by Thomas Goyne  from 2011 onward.\u003c/p\u003e\n\u003ch2 id="programming"\u003eProgramming\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003eMain Programmers:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eRodrigo Braz Monteiro\u003c/strong\u003e (ArchMage ZeratuL) - Lead developer, video system, audio system, subtitles I/O, tools\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eNiels Martin Hansen\u003c/strong\u003e (jfs) - Automation, Lua automation, audio system, tools\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eThomas Goyne (Plorkyeran)\u003c/strong\u003e - Lead developer for 3.0 onwards.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eStaff Contributors:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eKarl Blomster\u003c/strong\u003e (TheFluff) - General code, FFmpegSource video provider\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eFredrik Mellbin\u003c/strong\u003e (Myrsloik) - FFmpegSource and Avisynth-related code\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eAmar Takhar\u003c/strong\u003e (verm) - New unix build system\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eDavid Lamparter\u003c/strong\u003e (equinox) - Unix port\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eAlysson Souza e Silva\u003c/strong\u003e (demi_alucard) - General code\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eOther contributors:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eDan Donovan\u003c/strong\u003e (Dansolo) - Miscellaneous tools\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003ePatryk Pomykalski\u003c/strong\u003e (Pomyk) - Miscellaneous patching\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eai-chan\u003c/strong\u003e - ASSDraw3\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eEvgeniy Stepanov\u003c/strong\u003e (Azzy) - Some Linux patches, libass\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eMike Matsnev\u003c/strong\u003e (Haali) - Some DirectShow code and Matroska Parser library\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e2points\u003c/strong\u003e - Linux patches\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003ep-static\u003c/strong\u003e - Linux patches\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eDavid Conrad\u003c/strong\u003e (Yuvi) - Mac patches\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eDaniel Moscoviter\u003c/strong\u003e (Mosc) - General patches\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eHarukalover\u003c/strong\u003e - Usability, various patches\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eSAPikachu\u003c/strong\u003e - General patches\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003etophf\u003c/strong\u003e - General patches\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003enodame\u003c/strong\u003e - General patches\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id="installer"\u003eInstaller\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e2.x:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eNiels Martin Hansen\u003c/strong\u003e (jfs)\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eFredrik Mellbin\u003c/strong\u003e (Myrsloik)\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eRodrigo Braz Monteiro\u003c/strong\u003e (ArchMage ZeratuL)\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003ePrevious:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003emovax\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id="manual"\u003eManual\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e3.x:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eThomas Goyne (Plorkyeran)\u003c/strong\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e2.x:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eKarl Blomster\u003c/strong\u003e (TheFluff)\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eNiels Martin Hansen\u003c/strong\u003e (jfs)\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eRodrigo Braz Monteiro\u003c/strong\u003e (ArchMage ZeratuL)\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003ePrevious:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eMotoko-chan\u003c/li\u003e\n\u003cli\u003eKobi\u003c/li\u003e\n\u003cli\u003emovax\u003c/li\u003e\n\u003cli\u003eJcubed\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id="hosting"\u003eHosting\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003eCurrent:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eDeathWolf\u003c/strong\u003e: SVN repository for versions 2.1.2+\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eSigurd Tao Lyngse\u003c/strong\u003e (Bot1): Forums and Main Wiki\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eNiels Martin Hansen\u003c/strong\u003e (jfs): Bug Tracker\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eMarcello Bastéa-Forte\u003c/strong\u003e: Documentation Wiki\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eRodrigo Braz Monteiro\u003c/strong\u003e (ArchMage ZeratuL): Domain administration\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003ePrevious:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eDavid Lamparter\u003c/strong\u003e (equinox): SVN repository for versions 2.00 - 2.1.2\u003c/li\u003e\n\u003cli\u003eBerliOS: SVN repository for version 1.10\u003c/li\u003e\n\u003cli\u003eMentar: SVN repository up to version 1.09\u003c/li\u003e\n\u003cli\u003eBot1: Bug Tracker\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id="localization-files"\u003eLocalization files\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e2.00 translations:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eArchMage ZeratuL: Brazilian Portuguese\u003c/li\u003e\n\u003cli\u003eEreza: Catalan\u003c/li\u003e\n\u003cli\u003eYuri: Hungarian\u003c/li\u003e\n\u003cli\u003eHiroshi: Japanese\u003c/li\u003e\n\u003cli\u003eJeroi: Finnish\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e1.11 translations:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eKarasu: Traditional Chinese\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e1.10 translations:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eTechNiko: French\u003c/li\u003e\n\u003cli\u003eCrysral: French\u003c/li\u003e\n\u003cli\u003ethrash-sensei: Russian\u003c/li\u003e\n\u003cli\u003eequinox: German\u003c/li\u003e\n\u003cli\u003eNesukun: Spanish\u003c/li\u003e\n\u003cli\u003eEmBolo: Italian\u003c/li\u003e\n\u003cli\u003eMazinga: Italian\u003c/li\u003e\n\u003cli\u003eoblisk: Korean\u003c/li\u003e\n\u003cli\u003emulrich: Danish\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id="additional-thanks"\u003eAdditional thanks\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href="http://www.cccp-project.net"\u003eCombined Community Codec Pack\u003c/a\u003e staff\u003c/li\u003e\n\u003cli\u003eGabest for VSFilter\u003c/li\u003e\n\u003cli\u003esquid_80 for the x64 builds of Avisynth and CSRI-enabled VSFilter\u003c/li\u003e\n\u003cli\u003eFirebird for some of the toolbar icons\u003c/li\u003e\n\u003cli\u003eKayle for help with Win32 VfW interface\u003c/li\u003e\n\u003cli\u003eender for yawning a lot\u003c/li\u003e\n\u003cli\u003eAlpha testers: b0nk, Bot1, deathbygirl, DoGfOoD, grimlock, Jagobah, Jcubed, Kintaro, Kobi, kodachrome, maxx-, mASSIVe, Maya, Mentar, movax, msb, neo2sonic, nich, nwa, omgifos, SOzuken, TheFluff, thrash_sensei, Vincent, zegnat\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id="about"\u003eAbout\u003c/h2\u003e\n\u003cp\u003eAegisub includes portions from the following other projects:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eAvisynth 2.5 - Copyright (c) Ben Rudiak-Gould et al\u003c/li\u003e\n\u003cli\u003eFFMS2 - Copyright (c) Fredrik Mellbin\u003c/li\u003e\n\u003cli\u003eFFTW - Copyright (c) Matteo Frigo, Massachusetts Institute of Technology\u003c/li\u003e\n\u003cli\u003eFFmpeg - Copyright (c) Fabrice Bellard\u003c/li\u003e\n\u003cli\u003eFreetype - Copyright (c) David Turner, Robert Wilhelm, Werner Lemberg\u003c/li\u003e\n\u003cli\u003eGNU FriBidi - Copyright (c) Dov Grobgeld, Behdad Esfahbod\u003c/li\u003e\n\u003cli\u003eGNU iconv - Copyright (c) Bruno Haible\u003c/li\u003e\n\u003cli\u003eHunspell - Copyright (c) Kevin Hendricks\u003c/li\u003e\n\u003cli\u003eICU - Copyright (c) International Business Machines Corporation et al\u003c/li\u003e\n\u003cli\u003eLua - Copyright (c) Lua.org, PUC-Rio\u003c/li\u003e\n\u003cli\u003eMatroska Parser - Copyright (c) Mike Matsnev\u003c/li\u003e\n\u003cli\u003ePortAudio - Copyright (c) Ross Bencina, Phil Burk\u003c/li\u003e\n\u003cli\u003eScintilla - Copyright (c) Neil Hodgson\u003c/li\u003e\n\u003cli\u003eUniversalCharDet - Copyright (c) Netscape Communications Corp.\u003c/li\u003e\n\u003cli\u003ecsri - Copyright (c) David Lamparter\u003c/li\u003e\n\u003cli\u003efontconfig - Copyright (c) Keith Packard, Patrick Lam\u003c/li\u003e\n\u003cli\u003elibass - Copyright (c) Evgeniy Stepanov, Grigori Goronzy\u003c/li\u003e\n\u003cli\u003evsfilter - Copyright (c) Gabest\u003c/li\u003e\n\u003cli\u003ewxStyledTextCtrl - Copyright (c) Robin Dunn, Neil Hodgson\u003c/li\u003e\n\u003cli\u003ewxWidgets - Copyright (c) Julian Smart, Robert Roebling et al\u003c/li\u003e\n\u003cli\u003ezlib - Copyright (c) Jean-loup Gailly and Mark Adler\u003c/li\u003e\n\u003c/ul\u003e\n'},{id:4,href:"/docs/3.2/en/support/",title:"Support Aegisub",description:null,content:'\u003cp\u003eDo you want to support Aegisub? Well, it\u0026rsquo;s easy!\u003c/p\u003e\n\u003ch3 id="feedback"\u003eFeedback\u003c/h3\u003e\n\u003cp\u003eYou can give us feedback - comments, critiques, suggestions, etc. Bug\nreports and feature requests are always welcome. Check out our\n\u003ca href="http://forums.aegisub.org"\u003eforums\u003c/a\u003e and the \u003ca href="http://devel.aegisub.org/"\u003ebug\ntracker\u003c/a\u003e, or stop by for a chat in the \u003ca href="irc://irc.rizon.net/aegisub"\u003eIRC\nchannel\u003c/a\u003e.\u003c/p\u003e\n\u003ch3 id="spreading-the-word"\u003eSpreading the word\u003c/h3\u003e\n\u003cp\u003eLike Aegisub? Tell your friends about it! Spreading the word is a good\nway of helping Aegisub to be the best subtitle editor around.\u003c/p\u003e\n\u003ch3 id="donating"\u003eDonating\u003c/h3\u003e\n\u003cp\u003eFeeling generous? Consider giving us a donation! We do this in our\nspare time, you know.\u003c/p\u003e\n\u003ch3 id="programming"\u003eProgramming\u003c/h3\u003e\n\u003cblockquote\u003e\n\u003cp\u003e\u0026ldquo;Given enough eyes, all bugs are shallow.\u0026rdquo;\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003e\u003cem\u003e\u0026ndash; Linus Torvalds\u003c/em\u003e\u003c/p\u003e\n\u003cp\u003eFeel like really helping out, or do you just have some code you want to\ndonate? Some advice from readme.txt in the source tree:\u003c/p\u003e\n\u003cp\u003eFirst, some of the code is pretty readable, some is decent, and some is\npatched up crap. Good luck. ;)\u003c/p\u003e\n\u003cp\u003eBefore coding up a new feature you should probably hop on IRC and check\nwith a developer to verify that we agree it\u0026rsquo;s a feature that Aegisub\nshould have, or you run the risk of wasting some work. Unsolicited bug\nfixes are usually welcome, though.\u003c/p\u003e\n\u003cp\u003eSecond, if you want to code anything for Aegisub, you will need to\nagree to these terms:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eYou will release the patch to the public domain or give its\ncopyright to one of the developers. This is to stop a source file from\nbeing owned by too many people. (Exception: MAJOR changes might be\naccepted under BSD license under your name. Consult the developers)\u003c/li\u003e\n\u003cli\u003eMake SURE it compiles and works fine before submitting to developers.\u003c/li\u003e\n\u003cli\u003ePatches should normally be against git master, unless it\u0026rsquo;s for a bug\npresent in stable but not master.\u003c/li\u003e\n\u003cli\u003ePull requests should be rebased onto git master (or stable, if\napplicable), and you should have a topic branch per pull request.\nPlease don\u0026rsquo;t have any merge commits in your history.\u003c/li\u003e\n\u003cli\u003eAegisub doesn\u0026rsquo;t have a single cohesive coding style, but do try to\nfollow a style that\u0026rsquo;s already present somewhere in the program (and\npreferable that of the code you\u0026rsquo;re touching).\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eThird, this is all available under the BSD license. According to GNU\nitself, BSD is GPL-compatible, meaning that you can link GPL code to\nBSD code. Keep in mind, though, that if a source file has mixed BSD and\nGPL content, it becomes ruled by GPL.\u003c/p\u003e\n'},{id:5,href:"/docs/3.2/en/faq/",title:"FAQ",description:null,content:'\u003cp\u003eA small collection of Frequently Asked Questions about Aegisub - mostly\nstuff that didn\u0026rsquo;t fit anywhere else.\u003c/p\u003e\n\u003ch3 id="karaoke-effects"\u003eKaraoke effects?\u003c/h3\u003e\n\u003cp\u003eSee the \u003ca href="/docs/3.2/en/automation/karaoke_templater/tutorial_1/"\u003eKaraoke Templater tutorials\u003c/a\u003e.\u003c/p\u003e\n\u003ch3 id="can-i-create-dvd-subtitles-with-aegisub"\u003eCan I create DVD subtitles with Aegisub?\u003c/h3\u003e\n\u003cp\u003eNot directly, but there\u0026rsquo;s a nifty program called\n\u003ca href="http://sourceforge.net/projects/maestrosbt/"\u003eMaestroSBT\u003c/a\u003e that can\nconvert SSA to VOBSubs. It does have quite a bunch of restrictions on\nwhat tags and other things may be used, so reading its manual first is\nadvised. Also note that it does not accept ASS - only SSA. You can use\nAegisub\u0026rsquo;s File -\u0026gt; Export\u0026hellip; dialog to save real SSA files.\u003c/p\u003e\n\u003ch3 id="does-aegisub-allow-saving-to-srt"\u003eDoes Aegisub allow saving to SRT?\u003c/h3\u003e\n\u003cp\u003eYes, but only if it means that no information will be lost. In other\nwords, if you have any override tags that aren\u0026rsquo;t \\1c, \\b, or \\i,\nAegisub won\u0026rsquo;t allow saving directly to SRT. However, you can still\nexport to SRT by using the File -\u0026gt; Export\u0026hellip; dialog box. Just uncheck\nall the checkboxes (clean script info, VFR transform etc.).\u003c/p\u003e\n\u003ch3 id="ive-found-a-bug"\u003eI\u0026rsquo;ve found a bug!?\u003c/h3\u003e\n\u003cp\u003eReport it on the \u003ca href="http://devel.aegisub.org/"\u003ebug tracker\u003c/a\u003e. Please\ninclude as many details as possible in your report! Remember that if a\nbug is not on the bug tracker, it \u003cem\u003edoes not exist\u003c/em\u003e as far as we are\nconcerned.\u003c/p\u003e\n\u003ch3 id="why-doesnt-aegisub-have-ltfeature-xgt-ltprogram-ygt-has-it"\u003eWhy doesn\u0026rsquo;t Aegisub have \u0026lt;feature X\u0026gt;? \u0026lt;Program Y\u0026gt; has it!\u003c/h3\u003e\n\u003cp\u003eQuite possibly because we didn\u0026rsquo;t know you wanted it. Request it on the\n\u003ca href="http://devel.aegisub.org/"\u003ebug tracker\u003c/a\u003e and see what happens.\u003c/p\u003e\n\u003ch3 id="where-can-i-find-more-information-andor-get-help"\u003eWhere can I find more information and/or get help?\u003c/h3\u003e\n\u003cp\u003eFor Aegisub-related stuff, the \u003ca href="http://forums.aegisub.org"\u003eforums\u003c/a\u003e and\nthe \u003ca href="irc://irc.rizon.net/aegisub"\u003eIRC channel\u003c/a\u003e are good places to ask\nquestions. The Aegisub \u003ca href="http://devel.aegisub.org"\u003edevel wiki\u003c/a\u003e also\ncontains some more obscure information not included in the manual for\nvarious reasons, and so does the forums.  For general video-related\nquestions, \u003ca href="http://www.doom9.org"\u003eDoom9.org\u003c/a\u003e and \u003ca href="http://forum.doom9.org"\u003eits\nforums\u003c/a\u003e is generally the place to go.\u003c/p\u003e\n\u003ch3 id="are-there-any-vsfilter-bugs-i-should-know-about"\u003eAre there any VSFilter bugs I should know about?\u003c/h3\u003e\n\u003cp\u003eIn one word: \u003ca href="http://asa.diac24.net/VSFilter#BUGS"\u003eyes\u003c/a\u003e.\u003c/p\u003e\n'},{id:6,href:"/docs/3.2/en/tutorials/",title:"Tutorials",description:null,content:'\u003cp\u003eThe following tutorials are available for Aegisub:\u003c/p\u003e\n\u003ch2 id="video-tutorials-screencasts"\u003eVideo Tutorials (Screencasts)\u003c/h2\u003e\n\u003ch3 id="dialogue-timing"\u003eDialogue Timing\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003eDescription: A video describing how to time using Aegisub.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eBy: Karl Blomster\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eLink: \u003ca href="http://mod16.org/aegisub/timingtutorialimprovisation.mkv"\u003ehttp://mod16.org/aegisub/timingtutorialimprovisation.mkv\u003c/a\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eDescription: A video showing an experienced user timing at full speed in Aegisub.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eBy: Karl Blomster\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eLink: \u003ca href="http://mod16.org/aegisub/timing-fullspeed.mkv"\u003ehttp://mod16.org/aegisub/timing-fullspeed.mkv\u003c/a\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id="kanji-timer"\u003eKanji Timer\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003eDescription: A video tutorial demonstrating how the kanji timer can be used to synchronize kanji timing to romaji timing.\u003c/li\u003e\n\u003cli\u003eBy: Niels Martin Hansen\u003c/li\u003e\n\u003cli\u003eDetails: XviD MP3 AVI, 5 min 20 sec, 12 MB\u003c/li\u003e\n\u003cli\u003eLink: \u003ca href="http://jfs.itcamefromjapan.net/aegisub/demovids/kanji-timer.avi"\u003ehttp://jfs.itcamefromjapan.net/aegisub/demovids/kanji-timer.avi\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id="karaoke-timing"\u003eKaraoke Timing\u003c/h3\u003e\n\u003cp\u003e{::template name=\u0026ldquo;todo\u0026rdquo;}Actually do this{:/}\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eBy: Niels Martin Hansen\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id="visual-typesetting"\u003eVisual Typesetting\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003eDescription: A video tutorial demonstrating how to use Aegisub 2\u0026rsquo;s new Visual Typesetting features.\u003c/li\u003e\n\u003cli\u003eBy: Rodrigo Braz Monteiro\u003c/li\u003e\n\u003cli\u003eDetails: Matroska/XviD/Vorbis, 10 min 22 sec, 25 MB\u003c/li\u003e\n\u003cli\u003eSubtitles: English, Portuguese (Brazil) (by amz), French (by shawurai), German (by Sqall)\u003c/li\u003e\n\u003cli\u003eLink: \u003ca href="http://www.malakith.net/amz/blah/screencast/%5bAegisub%5d_Visual_Typesetting_Tutorial_%5b8B24834E%5d.mkv"\u003emalakith.net\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id="text-tutorials"\u003eText tutorials\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href="/docs/3.2/en/karaoke_timing_tutorial/"\u003eKaraoke timing\u003c/a\u003e (work in progress) — Enter the words for a song and add time-codes to the words\u003c/li\u003e\n\u003cli\u003e\u003ca href="/docs/3.2/en/automation/karaoke_templater/"\u003eKaraoke Templater\u003c/a\u003e (incomplete) — Easy way to add special effects to karaoke, ranging from the most basic effects to very advanced ones.\u003c/li\u003e\n\u003c/ul\u003e\n'},{id:7,href:"/docs/3.2/en/editing_subtitles/",title:"Editing Subtitles",description:null,content:'\u003cp\u003eEditing subtitles is what Aegisub is made for. This page will deal with basic\ntext editing of subtitle lines; for more information on the typography of\nsubtitles, see \u003ca href="/docs/3.2/en/typesetting/"\u003etypesetting\u003c/a\u003e. For information on the timing of\nsubtitle lines, see \u003ca href="/docs/3.2/en/audio/"\u003eworking with audio\u003c/a\u003e.\u003c/p\u003e\n\u003ch2 id="opening-subtitles"\u003eOpening subtitles\u003c/h2\u003e\n\u003cp\u003eIn the \u003cem\u003eFile\u003c/em\u003e menu, there are four menu choices that relate to opening or\ncreating subtitles:\u003c/p\u003e\n\u003cdl\u003e\n\u003cdt\u003eNew subtitles\u003c/dt\u003e\n\u003cdd\u003eCreate a new, blank script (i.e. close the current file).\u003c/dd\u003e\n\u003cdt\u003eOpen subtitles\u003c/dt\u003e\n\u003cdd\u003eOpen an existing subtitles file or import subtitles from a \u003ca href="http://www.matroska.org"\u003eMatroska\ncontainer file\u003c/a\u003e.\u003c/dd\u003e\n\u003cdt\u003eOpen subtitles with charset\u003c/dt\u003e\n\u003cdd\u003eOpens subtitles but lets you choose what character set Aegisub will\nuse to interpret the file. Usually not needed, but if you have a file\nin an unusual charset Aegisub will occasionally misdetect it.\u003c/dd\u003e\n\u003cdt\u003eOpen subtitles from video\u003c/dt\u003e\n\u003cdd\u003eOpen the subtitles muxed into the currently open video file. This\ncurrently only works with Matroska video files.\u003c/dd\u003e\n\u003cdt\u003eOpen \u003ca href="/docs/3.2/en/autosave/"\u003eAutosaved Subtitles\u003c/a\u003e\u003c/dt\u003e\n\u003cdd\u003eOpen a file created by Aegisub\u0026rsquo;s autosave. Useful if Aegisub crashes when you\nhad unsaved changes or just if you want to open an older version of a file.\n{: class=\u0026ldquo;horizontal-wide\u0026rdquo;}\u003c/dd\u003e\n\u003c/dl\u003e\n\u003cp\u003eWhen you open a subtitles file that is not detected as Unicode, Aegisub will\nattempt to guess what character set it is encoded with. If it is unsure, it\nwill ask you to choose from two or more likely alternatives. If the result\nlooks garbled or otherwise incorrect, try reopening it with another character\nset.\u003c/p\u003e\n\u003ch3 id="supported-formats"\u003eSupported formats\u003c/h3\u003e\n\u003cp\u003eAegisub supports reading the following subtitle formats:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eAdvanced Substation Alpha, also known as SSA v4+ (.ass)\u003c/li\u003e\n\u003cli\u003eSubstation Alpha v4 (.ssa)\u003c/li\u003e\n\u003cli\u003e\u003ca href="http://zuggy.wz.cz/"\u003eSubRip\u003c/a\u003e Text (.srt)\u003c/li\u003e\n\u003cli\u003eMPEG4 Timed Text (limited support at best; broken at worst), also known as\nISO/IEC 14496-17, MPEG-4 Part 17 or just TTXT (.ttxt)\u003c/li\u003e\n\u003cli\u003eMicroDVD (.sub)\u003c/li\u003e\n\u003cli\u003ePlain \u0026ldquo;dialog script\u0026rdquo; formatted text (see below)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id="importing-subtitles-from-mkv"\u003eImporting subtitles from MKV\u003c/h3\u003e\n\u003cp\u003eLoading subtitles directly from Matroska files can also be done. The following\nCodecIDs are supported:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eS_TEXT/UTF8 (SRT)\u003c/li\u003e\n\u003cli\u003eS_TEXT/ASS (ASS/SSA v4+)\u003c/li\u003e\n\u003cli\u003eS_TEXT/SSA (SSA v4)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id="importing-plain-text-scripts"\u003eImporting plain text scripts\u003c/h3\u003e\n\u003cp\u003eAegisub also supports importing \u0026ldquo;dialogue-formatted\u0026rdquo; plain text scripts. For example:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eActor 1: Well do I understand your speech, yet few strangers do so.\r\n         Why then do you not speak in the Common Tongue,\r\n         as is the custom in the West, if you wish to be answered?\r\n# TL check: The above seems to be a quote from the lord of the rings, look it up later\r\nActor 2: What are you babbling about?\r\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis will result in five subtitle lines, one being commented out. The first\nthree will have the actor field set to \u0026ldquo;Actor 1\u0026rdquo;, and the fifth will have it\nset to \u0026ldquo;Actor 2\u0026rdquo; (the comment line\u0026rsquo;s actor field will be blank).\u003c/p\u003e\n\u003cp\u003eWhen you open a file with the extension .txt, Aegisub will ask you about what\ncharacters it should use as the actor separator and comment starter,\nrespectively. In the example above, the actor separator is a colon\n(\u0026quot;\u003ccode\u003e:\u003c/code\u003e\u0026quot;) and the comment starter is a hash (\u0026quot;\u003ccode\u003e#\u003c/code\u003e\u0026quot;).\u003c/p\u003e\n\u003ch2 id="editing-subtitles"\u003eEditing subtitles\u003c/h2\u003e\n\u003cp\u003eEditing subtitles in Aegisub is done in two areas: the subtitle edit box (where\nyou type in or edit text) and the subtitles grid. Changes made in both the\nedit box and the grid normally modify all selected lines, and not just the\nline displayed in the edit box.\u003c/p\u003e\n\u003ch3 id="the-subtitles-edit-box"\u003eThe subtitles edit box\u003c/h3\u003e\n\u003cp\u003e\u003cimg src="/img/3.2/subs_edit_box.png" alt="subs_edit_box"\u003e\u003c/p\u003e\n\u003cp\u003eThe edit box is just a plain editing area with a number of associated controls.\nThey are:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eFlags the line as a comment. Comment lines will not be displayed on the\nvideo.\u003c/li\u003e\n\u003cli\u003eThe \u003ca href="/docs/3.2/en/styles/"\u003estyle\u003c/a\u003e used for this line.\u003c/li\u003e\n\u003cli\u003eThe actor speaking this line. Has no actual effect on subtitle display but\ncan be useful for editing purposes.\u003c/li\u003e\n\u003cli\u003eEffect for this line. There are a few predefined effects which can be\napplied via this field, but renderer support for them is spotty and using\n\u003ca href="/docs/3.2/en/ass_tags/"\u003eoverride tags\u003c/a\u003e is nearly always a better idea. This is commonly\nused as a metadata field for automation scripts.\u003c/li\u003e\n\u003cli\u003eThe number of characters on the longest line of this subtitle.\u003c/li\u003e\n\u003cli\u003eLayer for this line. If you override positioning with an \u003ca href="/docs/3.2/en/ass_tags/"\u003eoverride tag\u003c/a\u003e so that two or more lines are displayed on top of each\nother, this field controls which one is drawn where; higher layer numbers\nare drawn on top of lower ones.\u003c/li\u003e\n\u003cli\u003eStart time for the line.\u003c/li\u003e\n\u003cli\u003eEnd time for the line.\u003c/li\u003e\n\u003cli\u003eDuration for the line. If you modify this field, the end time will be\nmodified as a result.\u003c/li\u003e\n\u003cli\u003eLeft margin for this line. 0 means use the margin specified in the\nstyle.\u003c/li\u003e\n\u003cli\u003eRight margin for this line. 0 means use the margin specified in the\nstyle.\u003c/li\u003e\n\u003cli\u003eVertical margin for this line. 0 means use the margin specified in the\nstyle.\u003c/li\u003e\n\u003cli\u003eInserts a bold override tag (\u003ccode\u003e\\b1\u003c/code\u003e) at the cursor position. If the text\nis already bold, inserts a corresponding closing tag (\u003ccode\u003e\\b0\u003c/code\u003e).\u003c/li\u003e\n\u003cli\u003eInserts an italics override tag (\u003ccode\u003e\\i1\u003c/code\u003e) at the cursor position. If the\ntext is already italic, inserts a corresponding closing tag (\u003ccode\u003e\\i0\u003c/code\u003e).\u003c/li\u003e\n\u003cli\u003eInserts an underline override tag (\u003ccode\u003e\\u1\u003c/code\u003e) at the cursor position. If the\ntext is already italic, inserts a corresponding closing tag (\u003ccode\u003e\\u0\u003c/code\u003e).\u003c/li\u003e\n\u003cli\u003eInserts an strikeout override tag (\u003ccode\u003e\\s1\u003c/code\u003e) at the cursor position. If the\ntext is already italic, inserts a corresponding closing tag (\u003ccode\u003e\\s0\u003c/code\u003e).\u003c/li\u003e\n\u003cli\u003eBrings up a font selection window and inserts a font face name tag\n(\u003ccode\u003e\\fnFontName\u003c/code\u003e) with the given font name, as well as the chosen effect\ntags.\u003c/li\u003e\n\u003cli\u003eBrings up the \u003ca href="/docs/3.2/en/colour_picker/"\u003ecolor picker\u003c/a\u003e and lets you choose a\ncolor; then inserts a primary color override tag (\u003ccode\u003e\\c\u003c/code\u003e) with the chosen\ncolor at the cursor position.\u003c/li\u003e\n\u003cli\u003eBrings up the \u003ca href="/docs/3.2/en/colour_picker/"\u003ecolor picker\u003c/a\u003e and lets you choose a\ncolor; then inserts a secondary color override tag (\u003ccode\u003e\\2c\u003c/code\u003e) with the chosen\ncolor at the cursor position.\u003c/li\u003e\n\u003cli\u003eBrings up the \u003ca href="/docs/3.2/en/colour_picker/"\u003ecolor picker\u003c/a\u003e and lets you choose a\ncolor; then inserts an outline color override tag (\u003ccode\u003e\\3c\u003c/code\u003e) with the chosen\ncolor at the cursor position.\u003c/li\u003e\n\u003cli\u003eBrings up the \u003ca href="/docs/3.2/en/colour_picker/"\u003ecolor picker\u003c/a\u003e and lets you choose a\ncolor; then inserts a shadow color override tag (\u003ccode\u003e\\4c\u003c/code\u003e) with the chosen\ncolor at the cursor position.\u003c/li\u003e\n\u003cli\u003eMove to the next line, creating a new one at the end of the file if\nneeded. Note that unlike in previous versions of Aegisub, changes do\nnot need to be committed using this button.\u003c/li\u003e\n\u003cli\u003eChanges display between times and frames. Note that this does not change\nhow times are actually stored in the script.\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch4 id="show-original"\u003eShow Original\u003c/h4\u003e\n\u003cp\u003eChecking the Show Original box switches the edit box to the following mode:\u003c/p\u003e\n\u003cp\u003e\u003cimg src="/img/3.2/subs_edit_box_original.png" alt="subs_edit_box_original"\u003e\u003c/p\u003e\n\u003cp\u003eThe top half of the edit box is read-only, and show the text that the currently\nselected line had when it was first selected. This can be useful for\ntranslating subtitles into another language, or just for editing subtitles.\u003c/p\u003e\n\u003cdl\u003e\n\u003cdt\u003eRevert\u003c/dt\u003e\n\u003cdd\u003eReplace the text of the line with the text shown in the upper box. A simple\nway to undo all the changes you made to the line if you change your mind.\u003c/dd\u003e\n\u003cdt\u003eClear\u003c/dt\u003e\n\u003cdd\u003eClear the line.\u003c/dd\u003e\n\u003cdt\u003eClear Text\u003c/dt\u003e\n\u003cdd\u003eClear the text of the line, but leave all override tags in place. Can help\nwith translating typeset signs to another language.\u003c/dd\u003e\n\u003cdt\u003eInsert Original\u003c/dt\u003e\n\u003cdd\u003eInsert the original text of the line at the cursor position.\u003c/dd\u003e\n\u003c/dl\u003e\n\u003ch4 id="context-menu"\u003eContext menu\u003c/h4\u003e\n\u003cp\u003eIf you right-click anywhere in the edit box, you get the following menu:\n\u003cimg src="/img/3.2/Subs_Edit_Context.png" alt="Subs_Edit_Context"\u003e\u003c/p\u003e\n\u003cp\u003eSelect all, copy, cut and paste all do what you\u0026rsquo;d expect them to.\u003c/p\u003e\n\u003cdl\u003e\n\u003cdt\u003eSpell checker\u003c/dt\u003e\n\u003cdd\u003eIf you right-click on a word that has been detected as misspelled,\nthe spell checker will suggest some likely alternative. You can also\nset which language it will use for checking from this menu, or add\nwords that it doesn\u0026rsquo;t recognize but you know to be correctly spelled to\nthe dictionary. For more information on spell checking in Aegisub, see\nthe \u003ca href="/docs/3.2/en/spell_checker/"\u003eSpell Checker\u003c/a\u003e page.\u003c/dd\u003e\n\u003cdt\u003eThesaurus\u003c/dt\u003e\n\u003cdd\u003eSuggests alternative words similar to the highlighted word.\u003c/dd\u003e\n\u003cdt\u003eSplit line\u003c/dt\u003e\n\u003cdd\u003eSplits the line into two new lines at the cursor position. Preserve\ntimes keeps the old line\u0026rsquo;s timing for both lines. Estimate times tries\nto guess where the split is based on the length of the text on each\nside of the cursor. At video frame makes the first half of the line end\non the previous frame, and the second half start on the current frame.\n{: class=\u0026ldquo;dl-horizontal\u0026rdquo;}\u003c/dd\u003e\n\u003c/dl\u003e\n\u003ch3 id="the-subtitles-grid"\u003eThe subtitles grid\u003c/h3\u003e\n\u003cp\u003e\u003cimg src="/img/3.2/Subs_grid.png" alt="Subs_grid"\u003e\u003c/p\u003e\n\u003cp\u003eThe subtitles grid shows all lines (comments and otherwise) in the entire\nfile.\u003c/p\u003e\n\u003cp\u003eSome common controls:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eTo move lines up or down in the grid, select them, hold down the Alt key\nand press the up- or down-arrow keys.\u003c/li\u003e\n\u003cli\u003eTo select multiple lines, hold down either Ctrl or Shift and click.\nCtrl-click selects one more line per click; Shift-click selects all the\nlines between the first clicked and the last clicked.\u003c/li\u003e\n\u003cli\u003eTo change the active line shown in the edit box without changing the\nselection, hold down alt and click on the new line.\u003c/li\u003e\n\u003cli\u003eTo sort all lines in the grid, open the \u003cem\u003eSubtitle\u003c/em\u003e menu, and under \u003cem\u003eSort\nLines\u003c/em\u003e select the field to sort the lines on.\u003c/li\u003e\n\u003cli\u003eTo change the way \u003ca href="/docs/3.2/en/ass_tags/"\u003eoverride tags\u003c/a\u003e are displayed in the grid,\nclick the \u0026ldquo;cycle through tag hiding modes\u0026rdquo; button on the toolbar.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cimg src="/img/3.2/Subs_grid_tags.png" alt="Subs_grid_tags"\u003e\u003c/p\u003e\n\u003cp\u003eThe lines have different (configurable) colors representing different\nthings; see the \u003ca href="/docs/3.2/en/options/#General_-.3E_Subtitles_grid"\u003esubtitles grid section of the options page\u003c/a\u003e for details on what the colors\nmean.\u003c/p\u003e\n\u003cp\u003eBy default, the following columns are visible:\u003c/p\u003e\n\u003cdl\u003e\n\u003cdt\u003e\u003cstrong\u003e#\u003c/strong\u003e\u003c/dt\u003e\n\u003cdd\u003eThe line number.\u003c/dd\u003e\n\u003cdt\u003eStart\u003c/dt\u003e\n\u003cdd\u003eThe start time of the line.\u003c/dd\u003e\n\u003cdt\u003eEnd\u003c/dt\u003e\n\u003cdd\u003eThe end time of the line.\u003c/dd\u003e\n\u003cdt\u003eStyle\u003c/dt\u003e\n\u003cdd\u003eThe style used for this line.\u003c/dd\u003e\n\u003cdt\u003eText\u003c/dt\u003e\n\u003cdd\u003eThe text of the line (this is what will be displayed on the video).\n{: class=\u0026ldquo;horizontal-narrow\u0026rdquo;}\u003c/dd\u003e\n\u003c/dl\u003e\n\u003cp\u003eThe following columns will be displayed if any line in the script uses them:\u003c/p\u003e\n\u003cdl\u003e\n\u003cdt\u003eL\u003c/dt\u003e\n\u003cdd\u003eThe layer of the line (see above).\u003c/dd\u003e\n\u003cdt\u003eActor\u003c/dt\u003e\n\u003cdd\u003eThe actor speaking the line.\u003c/dd\u003e\n\u003cdt\u003eEffect\u003c/dt\u003e\n\u003cdd\u003eThe effect for this line.\u003c/dd\u003e\n\u003cdt\u003eLeft\u003c/dt\u003e\n\u003cdd\u003eThe left margin.\u003c/dd\u003e\n\u003cdt\u003eRight\u003c/dt\u003e\n\u003cdd\u003eThe right margin.\u003c/dd\u003e\n\u003cdt\u003eVert\u003c/dt\u003e\n\u003cdd\u003eThe vertical margin.\n{: class=\u0026ldquo;horizontal-narrow\u0026rdquo;}\u003c/dd\u003e\n\u003c/dl\u003e\n\u003cp\u003eYou can also right-click the top line of the grid (the one with the column\nnames) to manually select which columns you want to be visible.\u003c/p\u003e\n\u003cp\u003eRight-clicking any other line in the grid gives you the following menu\n(many of the options are also available in other menus):\u003c/p\u003e\n\u003cp\u003e\u003cimg src="/img/3.2/grid_context_menu.png" alt="grid_context_menu"\u003e\u003c/p\u003e\n\u003cdl\u003e\n\u003cdt\u003e\u003cstrong\u003eInsert (before/after)\u003c/strong\u003e\u003c/dt\u003e\n\u003cdd\u003eInserts a new empty line before or after the selected line. The new line\nwill be timed start at 0:00:00.00 and go to 0:00:05.00.\u003c/dd\u003e\n\u003cdt\u003e\u003cstrong\u003eInsert at video time (before/after)\u003c/strong\u003e\u003c/dt\u003e\n\u003cdd\u003eSame as the above, but the new line will be timed to start at the current\nvideo frame. Not enabled unless you have video loaded.\u003c/dd\u003e\n\u003cdt\u003e\u003cstrong\u003eDuplicate\u003c/strong\u003e\u003c/dt\u003e\n\u003cdd\u003eDuplicates the selected line(s).\u003c/dd\u003e\n\u003cdt\u003e\u003cstrong\u003eSplit lines before current frame\u003c/strong\u003e\u003c/dt\u003e\n\u003cdd\u003eDuplicate the selected line(s), set the end time of the original line\nto the frame before the current video frame, and set the start time of\nthe copy to the current video frame. Useful for frame-by-frame\ntypesetting and for splitting a line at a scene change to let it move\ndown if it collided with a no-longer-visible line. Only enabled if you\nhave video loaded.\u003c/dd\u003e\n\u003cdt\u003e\u003cstrong\u003eSplit lines after current frame\u003c/strong\u003e\u003c/dt\u003e\n\u003cdd\u003eAs above, but it splits off the portion of the line after the current\nframe rather than the potion before the current frame, for when doing\nframe-by-frame typesetting from the last to the first frame of a line.\u003c/dd\u003e\n\u003cdt\u003e\u003cstrong\u003eSplit (by karaoke)\u003c/strong\u003e\u003c/dt\u003e\n\u003cdd\u003eSplits the line into one new line per syllable, as delimited by karaoke\noverride tags (\u003ccode\u003e\\k\u003c/code\u003e and its relatives). The timing of the first line will\nstart at the original line\u0026rsquo;s start time and end at that time plus the\nlength of the first syllable; the following lines will start at the end of\nthe previous and last for the duration of the syllable.\u003c/dd\u003e\n\u003cdt\u003e\u003cstrong\u003eSwap\u003c/strong\u003e\u003c/dt\u003e\n\u003cdd\u003eSwaps the places (in the grid) of two selected lines.\u003c/dd\u003e\n\u003cdt\u003e\u003cstrong\u003eJoin (keep first)\u003c/strong\u003e\u003c/dt\u003e\n\u003cdd\u003eJoins two or more lines, discarding the text of all but the first. The\nnew line will be timed to start at the first line\u0026rsquo;s start time and end at\nthe last line\u0026rsquo;s end time. Only enabled if you have more than one line\nselected.\u003c/dd\u003e\n\u003cdt\u003e\u003cstrong\u003eJoin (concatenate)\u003c/strong\u003e\u003c/dt\u003e\n\u003cdd\u003eSame as above, but concatenates the text of all selected lines instead. A\nspace is inserted between the texts of each source line.\u003c/dd\u003e\n\u003cdt\u003e\u003cstrong\u003eJoin (as karaoke)\u003c/strong\u003e\u003c/dt\u003e\n\u003cdd\u003eDoes the inverse of \u003cem\u003eSplit (by karaoke)\u003c/em\u003e, i.e.  the same as \u003cem\u003eJoin\n(concatenate)\u003c/em\u003e but inserts \u003ccode\u003e\\k\u003c/code\u003e tags with the timing of each source line in\nthe joined line.\u003c/dd\u003e\n\u003cdt\u003e\u003cstrong\u003eMake times continuous (change start/change end)\u003c/strong\u003e\u003c/dt\u003e\n\u003cdd\u003eModifies the timing of the selected lines so that the end time of each\nline is the same as the start time of the next line. Change start/change\nend determines whether the function changes the end time or the start time\nof each line. Only  enabled when you have more than one line selected.\u003c/dd\u003e\n\u003cdt\u003e\u003cstrong\u003eRecombine lines\u003c/strong\u003e\u003c/dt\u003e\n\u003cdd\u003eGiven two or more lines with the same text being partially present in all\nof them, creates one line per text fragment instead. This is mostly useful\nfor correcting subs ripped from DVDs, which frequently look something like\nthis:\n\u003cp\u003e\u003cimg src="/img/3.2/Recombine_01.png" alt="Recombine_01"\u003e\u003c/p\u003e\n\u003cp\u003eAfter recombine lines, the result is:\u003c/p\u003e\n\u003cp\u003e\u003cimg src="/img/3.2/Recombine_02.png" alt="Recombine_02"\u003e\u003c/p\u003e\n\u003c/dd\u003e\n\u003cdt\u003e\u003cstrong\u003eCreate audio clip\u003c/strong\u003e\u003c/dt\u003e\n\u003cdd\u003eSaves a segment of the loaded audio corresponding to the timing of the\nselected lines (starting at the earliest start time and ending at the\nlatest end time) as an uncompressed WAV file. Only enabled if you have\naudio loaded.\u003c/dd\u003e\n\u003cdt\u003e\u003cstrong\u003eCut/Copy/Paste\u003c/strong\u003e\u003c/dt\u003e\n\u003cdd\u003eCuts/copies/pastes entire lines. Note that the lines are copied as plain\ntext and can be copied and pasted freely between text editors, chat\nprograms, web browsers, other instances of Aegisub etc.\u003c/dd\u003e\n\u003cdt\u003e\u003cstrong\u003ePaste Lines Over\u0026hellip;\u003c/strong\u003e\u003c/dt\u003e\n\u003cdd\u003eOpen the \u003ca href="/docs/3.2/en/paste_over/"\u003ePaste Over\u003c/a\u003e dialog.\u003c/dd\u003e\n\u003cdt\u003e\u003cstrong\u003eDelete\u003c/strong\u003e\u003c/dt\u003e\n\u003cdd\u003eDeletes the selected lines.\u003c/dd\u003e\n\u003c/dl\u003e\n'},{id:8,href:"/docs/3.2/en/exporting/",title:"Exporting Subtitles",description:null,content:'\u003cp\u003eIn addition to the normal \u0026ldquo;Save\u0026rdquo; and \u0026ldquo;Save as\u0026rdquo; functions, Aegisub also has an \u0026ldquo;Export\u0026rdquo; feature, which can transform the entire script through various export filters. This is used for a number of things ranging from framerate conversions over karaoke effect generation to just saving to other formats and/or character sets.\u003c/p\u003e\n\u003ch2 id="the-export-dialog"\u003eThe export dialog\u003c/h2\u003e\n\u003cp\u003e\u003cimg src="/img/3.2/Export.png" alt="Export"\u003e{: class=\u0026ldquo;center\u0026rdquo;}\u003c/p\u003e\n\u003cp\u003eThe upper half of the window contains the available filters. Ticking one or more of them will apply them in the order they are listed; use the move up/down buttons to change the order. The lower half contains a brief description of the selected filter.\u003c/p\u003e\n\u003cp\u003eSome filters have configuration parameters; those that do will extend the window to the right and put any settings controls there.\u003c/p\u003e\n\u003cp\u003eThe dropdown menu at the bottom controls what text encoding will be used for the exported file. May be useful for exporting to legacy programs that do not support Unicode.\u003c/p\u003e\n\u003cp\u003eWhen you click the \u0026ldquo;Export\u0026rdquo; button, do note that you can choose other formats than ASS to save to. Also note that this will almost always mean that a lot of formatting tags will be stripped.\u003c/p\u003e\n\u003ch2 id="filters"\u003eFilters\u003c/h2\u003e\n\u003cp\u003eThe following filters are available in the default installation:\u003c/p\u003e\n\u003ch3 id="limit-to-visible-lines"\u003eLimit to visible lines\u003c/h3\u003e\n\u003cp\u003eExports only the lines that are currently visible on the active video frame. Does nothing if you do not have video loaded. Script headers and styles etc. are also exported.\u003c/p\u003e\n\u003ch3 id="karaoke-template"\u003eKaraoke template\u003c/h3\u003e\n\u003cp\u003eFilters the script through the automation script \u0026ldquo;karaoke templater\u0026rdquo; to generate karaoke effects. See the \u003ca href="/docs/3.2/en/automation/karaoke_templater/"\u003ekaraoke templater\u003c/a\u003e and \u003ca href="/docs/3.2/en/automation/"\u003eautomation overview\u003c/a\u003e pages for further details.\u003c/p\u003e\n\u003ch3 id="transform-framerate"\u003eTransform framerate\u003c/h3\u003e\n\u003cp\u003eIn \u0026ldquo;constant\u0026rdquo; output mode, recalculates every single timestamp in the script (including ones contained in \u003ca href="/docs/3.2/en/ass_tags/"\u003eoverride tags\u003c/a\u003e) to work with a new framerate. Note that this means that the entire script will be \u0026ldquo;sped up\u0026rdquo; or \u0026ldquo;slowed down\u0026rdquo;. Can be used for NTSC-\u0026gt;PAL conversions or vice versa.\u003c/p\u003e\n\u003cp\u003eIn \u0026ldquo;variable\u0026rdquo; output mode, uses the framerate of the loaded video (or the specified one, if different from the video\u0026rsquo;s) and the loaded timecodes to recalculate every single timestamp in the script so that the exported subtitles can be hardsubbed on the loaded video and still sync up after timecodes are taken into account. Does nothing if you do not have timecodes loaded. See \u003ca href="/docs/3.2/en/video/#variableframeratevideo"\u003evariable framerate video\u003c/a\u003e for further details.\u003c/p\u003e\n\u003ch3 id="clean-tags"\u003eClean tags\u003c/h3\u003e\n\u003cp\u003eFilters the script through the \u0026ldquo;clean tags\u0026rdquo; automation script, which tries to clean up the override tag blocks by concatenating adjacent blocks and removing redundant tags (more specifically, the second instance of tags that can only be specified once per line).\u003c/p\u003e\n\u003ch3 id="clean-script-info"\u003eClean script info\u003c/h3\u003e\n\u003cp\u003eCleans the script headers by removing all lines that are not absolutely essential for proper display of the script. If you\u0026rsquo;re paranoid, you should consider using this for scripts that you plan on distributing in the original form, since Aegisub stores things like the path to the last opened video/audio etc. in the script headers.\u003c/p\u003e\n\u003ch3 id="fix-styles"\u003eFix styles\u003c/h3\u003e\n\u003cp\u003eGoes through all the lines of the script and checks what style they use; any lines that use a style that isn\u0026rsquo;t available in the current script is replaced with Default.\u003c/p\u003e\n'},{id:9,href:"/docs/3.2/en/attaching_subtitles_to_video/",title:"Applying Subtitles",description:null,content:'\u003cp\u003eIn digital encoding, there are two main ways of including subtitles in a video:\nsoftsubbing and hardsubbing. Both methods has unique advantages and\ndisadvantages, along with various arguments both for and against each method.\u003c/p\u003e\n\u003ch2 id="hardsubbing"\u003eHardsubbing\u003c/h2\u003e\n\u003cp\u003eHardsubbing is a method that \u0026ldquo;burns in\u0026rdquo; subtitles into the actual video portion\nof a movie. Digital hardsubs are much like subtitled VHS tapes; the subtitles\ncannot be turned off.\u003c/p\u003e\n\u003ch3 id="advantages-of-hardsubbing"\u003eAdvantages of Hardsubbing\u003c/h3\u003e\n\u003cp\u003eHardsubbing is usually much less demanding on the playback device. Since the\ntext is already part of the video, it will only take as much processing as the\nunsubtitled video would. You are also often able to make special effects that\nwould be difficult to replicate in a soft subtitle format, because of the large\namount of CPU usage required to renderer them. Even in softsubbed anime\nfansubs, the opening and closing karaoke are often hardsubbed because of the\nspecial effects used.\u003c/p\u003e\n\u003cp\u003eSome people argue that with hardsubs, scripts are harder to steal, since the\ntext is embedded in the image - thieves cannot simply extract subtitles as in a\nsoftsub. However, the presence of very good subtitle extractors designed for\nthe purpose of extracting this embedded text removes much of the argument that\nhardsubs prevent script stealing.\u003c/p\u003e\n\u003cp\u003eMany playback devices and computer platforms cannot display the special fonts\nand formattings that softsubs contain, but this problem is removed with\nhardsubs, where the style is preserved. Also, these stylings will show back\nexactly the same on any device, unlike softsubs which depend on the playback\ndevice to properly intrepret and display the stylings.\u003c/p\u003e\n\u003ch3 id="disadvantages-of-hardsubbing"\u003eDisadvantages of Hardsubbing\u003c/h3\u003e\n\u003cp\u003eDespite what some may call numerous advantages for hardsubbing, there are\nseveral distinct disadvantages that should be evaluated before making a\ndecision.\u003c/p\u003e\n\u003cp\u003eThe method of hardsubbing requires that the source video is re-encoded so the\nsubtitles can be written on the image. This, by the nature of lossy video\nencoding, causes a reduction in video quality.\u003c/p\u003e\n\u003cp\u003eSubtitles add a sharp contrast in a video image due to their nature. This will\ncause compression artifacts along the edges of the encoded subtitle, and\nblurring of the subtitle. This effect is especially evident at lower bitrates.\u003c/p\u003e\n\u003cp\u003eUnder typical circumstances, the inclusion of the subtitles will cause an\nincrease in the bitrate needed for the video to keep the same quality. This, of\ncourse, means an increased filesize, or lower quality at the same size. The\nincrease in bitrate necessary is typically around 3 to 10%.\u003c/p\u003e\n\u003cp\u003eChanging the subtitles requires a re-encode of the video source, which can add\na lot of time and extra work to the release process.\u003c/p\u003e\n\u003ch2 id="softsubbing"\u003eSoftsubbing\u003c/h2\u003e\n\u003cp\u003eSoftsubbing is a method that keeps subtitles seperate from the video and relies\non the playback device to combine the two when the video is being played. This\nmethod can be best compared to subtitles on most DVDs. The subtitling can be\nturned on or off as needed, and multiple languages can be supported with just\none combined media file. Unlike with a DVD though, digital softsubs are\nactually text (DVD subtitles are pictures) which adds many nice features at the\ncost of complexity.\u003c/p\u003e\n\u003ch3 id="advantages-of-softsubbing"\u003eAdvantages of Softsubbing\u003c/h3\u003e\n\u003cp\u003eSoftsubs are much clearer on display. Since they are not part of the video\nimage, video compression does not affect them, and with a good subtitle\nrenderer, they are sharp and crisp - a huge benefit to readability.\u003c/p\u003e\n\u003cp\u003eSoftsubs can be smaller. Since the subtitle is just a text file, it can take up\nless room because it isn\u0026rsquo;t hogging video bitrate. This allows for an encoder to\neither make a smaller file with the same video quality, or a same-sized file\nwith higher video quality.\u003c/p\u003e\n\u003cp\u003ePeople with vision problems have an opportunity to adjust how the subtitles look on-screen.\u003c/p\u003e\n\u003cp\u003eWithout a huge impact on size, multiple languages can be supported in one video file.\u003c/p\u003e\n\u003cp\u003eIf you find a subtitling mistake in a file, you can fix it without having to\nre-encode the video - saving a lot of time.\u003c/p\u003e\n\u003ch3 id="disadvantages-of-softsubbing"\u003eDisadvantages of Softsubbing\u003c/h3\u003e\n\u003cp\u003eSoftsubs add processing complexity to the video. The playback device has to\nrender and overlay the text before displaying the video, as a result, this\nmeans that low-powered devices will not be able to play the video.\u003c/p\u003e\n\u003cp\u003eSince the subtitles are bundled as straight text they are very easy to extract\nand use. This makes things easier on bootleggers or other script stealers. Note\nthat grabbing subtitles from a hardsub is very easy currently, so this argument\ndoesn\u0026rsquo;t hold much weight.\u003c/p\u003e\n\u003cp\u003eThe playback device is responsible for rendering the subtitles on screen. As a\nresult, they might not look the same as the subtitler intended. In some cases,\nthe playback device might not support the subtitle format, or might have bugs\nwith it.\u003c/p\u003e\n\u003cp\u003eThe AVI file format is not reliable for supporting softsubs, if you plan to use\nit. Please note that Matroska (MKV) is very well supported by computers, so\nthis isn\u0026rsquo;t a major negative.\u003c/p\u003e\n\u003cp\u003eSubtitles with effects added (usually for karaoke) take up a lot of processing\ntime, and may cause playback issues if the device cannot handle the processing\nrequirements. A solution for this is to hardsub the complex parts such as\nopening and ending karaoke, and softsub the normal dialog.\u003c/p\u003e\n\u003ch2 id="what-method-do-i-choose"\u003eWhat method do I choose?\u003c/h2\u003e\n\u003cp\u003eThe method you should choose depends greatly on your audience. Will they have\nrelatively new and powerful playback devices? Will they possibly be able to\ninstall something to play back softsubs if they don\u0026rsquo;t have it? Is your\ndestination a digital format (Matroska, DVD, etc.) or will you be printing to\ntape?\u003c/p\u003e\n\u003cp\u003eWhile every situation will be different, you can use some of the following\nsuggestions to guide you. These are based on making a digital format for\nplayback on a computer system.\u003c/p\u003e\n\u003cp\u003eIf you want your file playable on the largest range of computers, operating\nsystems, and small plastic toys,you will want to hardsub.\u003c/p\u003e\n\u003cp\u003eIf your audience will be running on a platform where your subtitle format is\nwell-supported, softsubs are a good idea.\u003c/p\u003e\n\u003cp\u003eIf you want to have multiple subtitle languages or if some of your viewers may\nnot want to have subtitles enabled at all, softsubs are your only option.\u003c/p\u003e\n\u003cp\u003eIf you want to speed up your release process, use softsubs. They are faster to\nfix if an error is found, and allow you to release as soon as the subtitles are\ndone, rather than waiting a few hours for the video to be encoded.\u003c/p\u003e\n\u003ch2 id="hardsubbing-with-avisynth"\u003eHardsubbing with Avisynth\u003c/h2\u003e\n\u003cp\u003eMany people use the Avisynth package to add filters to their video to clean up\ndefects, or otherwise manipulate the video image before encoding it. It is a\nvery flexible tool, and can be also used to add subtitles directly to the video\nstream, allowing an easy and scriptable method to hardsub a video.\u003c/p\u003e\n\u003cp\u003eIf you are unfamiliar with Avisynth, it is recommended that you look into it,\nas it has lots of nice features and a large community contributing video\nfilters, allowing easy video fixes for any source. This tutorial assumes you\nhave some basic knowledge of Avisynth.\u003c/p\u003e\n\u003cp\u003eTo allow adding subtitles to the video stream, you have two options: you can\nuse VSFilter (included with Aegisub, in the \u0026ldquo;csri\u0026rdquo; folder), or you can use\n\u003ca href="http://srsfckn.biz/assrender/"\u003eAssRender\u003c/a\u003e, which uses libass. The following\ninstructions assume that you are using VSFilter.\u003c/p\u003e\n\u003cp\u003eTo just add subtitles, you will want to make a simple AVS file containing the\nscript lines you need. Simply create a plain-text file in notepad (or your\nfavourite text editor) and save it with the .avs extension (beware that Windows\nmight be hiding your extension, and you might actually be making a .avs.txt\nfile). Here is an example:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eLoadPlugin(\u0026quot;c:\\program files\\aegisub\\csri\\vsfilter.dll\u0026quot;)\r\nAVISource(\u0026quot;c:\\projects\\project1\\video\\mycoolvideo.avi\u0026quot;)\r\nTextSub(\u0026quot;c:\\projects\\project1\\subs\\mainsubtitles.ass\u0026quot;)\r\nTextSub(\u0026quot;c:\\projects\\project1\\subs\\endkaraoke.ass\u0026quot;)\r\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe above script will take an AVI file (mycoolvideo.avi), and then draw the\ncontents of two subtitle files on the video. You can then encode this video in\nany program that supports AVS, such as \u003ca href="http://www.virtualdub.org"\u003eVirtualDub\u003c/a\u003e\nor x264. To do so, just open the .avs file in the program, and follow the\nnormal encoding procedure for it.\u003c/p\u003e\n\u003cp\u003eKeep in mind that, due to a bug in VSFilter, the path to the subtitle files\nMUST be absolute.\u003c/p\u003e\n\u003ch2 id="hardsubbing-with-virtualdub"\u003eHardsubbing with VirtualDub\u003c/h2\u003e\n\u003cp\u003eIf you\u0026rsquo;re already familiar with VirtualDub filters, and don\u0026rsquo;t intend to do any\nother video processing, you should note that it\u0026rsquo;s possible to use VSFilter as a\nVirtualDub filter as well. Just rename the .dll to .vdf and copy it to the\nVirtualDub plugins folder. The filter will then be available as \u0026ldquo;TextSub\u0026rdquo;.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eWarning\u003c/strong\u003e: VirtualDub comes with a TextSub of its own, that is called\n\u0026ldquo;TextSub 2.23\u0026rdquo;. This is a very old version that, amongst many other issues,\ncannot parse UTF-8 (the default Aegisub encoding) files properly. This will\nresult in any non-ASCII characters being rendered as gibberish. NEVER USE THIS\nFILTER.\u003c/p\u003e\n\u003ch2 id="softsubbing-1"\u003eSoftsubbing\u003c/h2\u003e\n\u003cp\u003eSoftsubbing a video can be done in several ways. On Windows using a DirectShow\nplayer, such as Media Player Classic, ZoomPlayer or even Windows Media Player,\nyou need VSFilter installed to view the subtitles. If you use MPlayer, you need\nlibass and FontConfig compiled to correctly view all the formatting.\u003c/p\u003e\n\u003ch3 id="variant-1-softsubs-inside-the-video-container"\u003eVariant 1: softsubs inside the video container\u003c/h3\u003e\n\u003cp\u003eMatroska Video (MKV) is currently the best container for this method (MP4, OGM\nand even AVI can technically contain softsubs, but none supports font\nattachments, and all of them has various other issues). Using a muxer that\nsupports attachments (i.e. \u003ca href="http://www.bunkus.org/videotools/mkvtoolnix/"\u003emkvmerge\nGUI\u003c/a\u003e), you simply add your\nsubtitle files to the Matroska file as separate tracks (just like you add audio\nand video tracks), and any fonts as attachments (make sure they have the MIME\ntype application/x-truetype-font). The fonts will then be installed temporarily\nby Haali Media Splitter (on Windows) or MPlayer (on *nix and MacOS X) during\nplayback.\u003c/p\u003e\n\u003ch3 id="variant-2-distributing-script-files"\u003eVariant 2: distributing script files\u003c/h3\u003e\n\u003cp\u003eThis method works best when you want to encode the video in an AVI wrapper. You\nsimply send the raw subtitle files along with the video. The viewer then needs\nto load them in a player that supports external subtitles. When using this\nmethod, you either need to make sure you use fonts that everyone can be\nexpected to have installed, or distribute a separate ZIP archive with the\nfonts. For obvious reasons, this method isn\u0026rsquo;t recommended.\u003c/p\u003e\n'},{id:10,href:"/docs/3.2/en/spell_checker/",title:"Spell Checker",description:null,content:'\u003cp\u003eTo help you with quality assurance of your subtitle scripts, Aegisub\nfeatures a complete spell checker. It uses the Hunspell library, which is\nbased on OpenOffice.org\u0026rsquo;s MySpell, which means it\u0026rsquo;s at least as good as one\nyou\u0026rsquo;d find in a sophisticated word processing program. It can be found in\nthe \u003cem\u003eSubtitles\u003c/em\u003e menu -\u0026gt; \u003cem\u003eSpell Checker\u003c/em\u003e. It also spell-checks as you type\nand can to some degree be controlled from the subtitle edit box\u0026rsquo;s\nright-click menu (see \u003ca href="/docs/3.2/en/editing_subtitles/"\u003eediting subtitles\u003c/a\u003e).\u003c/p\u003e\n\u003ch3 id="the-spell-checker-dialog"\u003eThe spell checker dialog\u003c/h3\u003e\n\u003cp\u003e\u003cimg src="/img/3.2/spell_checker.png" alt="spell_checker"\u003e{: class=\u0026ldquo;center\u0026rdquo;}\u003c/p\u003e\n\u003cp\u003eThe spell checker dialog will go through all misspelled words it can find in\nyour script. The area in the lower left of the box displays suggestions to\nreplace the misspelled word with; to the right there are a number of\nbuttons:\u003c/p\u003e\n\u003cdl\u003e\n\u003cdt\u003eSkip Comments\u003c/dt\u003e\n\u003cdd\u003eSkip over commented lines when looking for misspelled words. Useful\nwhen your comments are mostly things like karaoke scripts or the\noriginal script which you\u0026rsquo;re translating to a new language.\u003c/dd\u003e\n\u003cdt\u003eIgnore UPPERCASE words\u003c/dt\u003e\n\u003cdd\u003eSkip over words written in all caps. Useful if your subtitles have a sea of\nmade-up acronyms and you don\u0026rsquo;t feel like spending the time adding them all to\nthe dictionary.\u003c/dd\u003e\n\u003cdt\u003eReplace\u003c/dt\u003e\n\u003cdd\u003eReplaces the found misspelled word with the chosen replacement. Note\nthat the list box can be double-clicked to do this as well.\u003c/dd\u003e\n\u003cdt\u003eReplace All\u003c/dt\u003e\n\u003cdd\u003eReplaces \u003cem\u003eall instances\u003c/em\u003e of the found misspelled word \u003cem\u003ein the entire\nscript\u003c/em\u003e with the chosen replacement.\u003c/dd\u003e\n\u003cdt\u003eIgnore\u003c/dt\u003e\n\u003cdd\u003eIgnore \u003cem\u003ethis instance\u003c/em\u003e of the misspelled word, but continue to stop\non other places where this misspelling occurs.\u003c/dd\u003e\n\u003cdt\u003eIgnore All\u003c/dt\u003e\n\u003cdd\u003eIgnore \u003cem\u003eall instances\u003c/em\u003e of this word for this spell-checking session,\nbut continue to check for it in the future.\u003c/dd\u003e\n\u003cdt\u003eAdd to dictionary\u003c/dt\u003e\n\u003cdd\u003eAdd the found word to the dictionary so it will not be detected as\nmisspelled again.\u003c/dd\u003e\n\u003cdt\u003eRemove from dictionary\u003c/dt\u003e\n\u003cdd\u003eRemove the word currently in the \u003cstrong\u003eReplace with\u003c/strong\u003e field from the dictionary.\nCan only remove words which were added with the \u003cstrong\u003eAdd to dictionary\u003c/strong\u003e function\nand not words in the standard dictionary.\n{: class=\u0026ldquo;dl-horizontal\u0026rdquo;}\u003c/dd\u003e\n\u003c/dl\u003e\n\u003cp\u003eAt the bottom of the dialog box there is a dropdown box to choose the spell\nchecker language.\u003c/p\u003e\n\u003ch3 id="dictionaries"\u003eDictionaries\u003c/h3\u003e\n\u003cp\u003eThe Windows version of Aegisub comes with a US English dictionary.\nInstallers for many other languages are available \u003ca href="http://www.aegisub.org/downloads/#dictionaries"\u003eon our\nwebsite\u003c/a\u003e. If we don\u0026rsquo;t\nsupply a dictionary for your language, check \u003ca href="https://wiki.mozilla.org/L10n:Dictionaries"\u003eMozilla\u0026rsquo;s set of\ndictionaries\u003c/a\u003e, or simply\nGoogle for \u0026ldquo;hunspell \u003ci\u003e\u0026lt;language\u0026gt;\u003c/i\u003e dictionary\u0026rdquo;. We welcome\nsubmissions of additional dictionaries to package - it can sometimes be hard\nfor us to find dictionaries for languages which none of the developers speak.\u003c/p\u003e\n\u003cp\u003eThe OS X version of Aegisub includes all of the dictionaries we have.\u003c/p\u003e\n\u003cp\u003eOn Linux your distribution\u0026rsquo;s package manager should have hunspell\ndictionaries. You may need to set the \u003ca href="/docs/3.2/en/options/#interface"\u003edictionary path\u003c/a\u003e to the location where they are installed; one\ncommon location is \u003ccode\u003e/usr/share/hunspell\u003c/code\u003e.\u003c/p\u003e\n'},{id:11,href:"/docs/3.2/en/translation_assistant/",title:"Translation Assistant",description:null,content:'\u003cp\u003eThe translation assistant is a valuable tool for translating subtitles from one language to the other. It allows you to translate in the most efficient possible manner, by letting you type the translated text without having to worry about selecting the original, or forgetting what was written in it. It also parses ASS override tags, and will skip over them.\u003c/p\u003e\n\u003ch2 id="overview"\u003eOverview\u003c/h2\u003e\n\u003cp\u003e\u003cimg src="/img/3.2/Translation_Assistant.png" alt="Translation_Assistant"\u003e{: class=\u0026ldquo;center\u0026rdquo;}\u003c/p\u003e\n\u003cp\u003eThe assistant window is simple: it shows you the original raw line, and a box where you can type the translation. There is also a list of hotkeys specific to this window, and a checkbox to enable previewing, if you have the corresponding video set up. Having this option enabled will automatically jump to the current line when you change it.\u003c/p\u003e\n\u003ch2 id="how-to-use"\u003eHow to use\u003c/h2\u003e\n\u003cp\u003eUsing the assistant is very easy. First, start it by clicking its icon in the toolbar or going to Subtitles-\u0026gt;Translation Assistant. It will start at the currently selected line. The original line will have the text that you have to translate highlighted in blue. Simply type the translation to it, and hit enter. If there are override tags in the line, you may have to translate more than one block per line.\u003c/p\u003e\n\u003cp\u003eIn the above screenshot, supposing that you are translating to Portuguese, you would first type \u0026ldquo;Clima\u0026rdquo; (Portuguese for Weather) and hit enter. It would then highlight \u0026ldquo;_______\u0026rdquo;. Since I don\u0026rsquo;t want to translate that, I just hit Insert in the keyboard, and it will copy the text over. So I hit enter, and it will ask for the last bit, \u0026ldquo;Temperature\u0026rdquo;, so I enter \u0026ldquo;Temperatura\u0026rdquo; and hit enter again. Then it will jump to the next line, where I will repeat the process. If I make a mistake, I can use Page Up and Page Down keys to move to the next or previous block/line.\u003c/p\u003e\n'},{id:12,href:"/docs/3.2/en/paste_over/",title:"Paste Over",description:null,content:'\u003cp\u003eThe \u003cstrong\u003epaste over\u003c/strong\u003e tool is a \u0026ldquo;smart\u0026rdquo; variant of the good old Ctrl-c Ctrl-v\ncombo. It allows you to paste any given field(s) of one or more lines to the\ncorresponding fields of other lines, without affecting the other fields. It can\nbe found under the \u003cem\u003eEdit\u003c/em\u003e menu -\u0026gt; \u003cem\u003ePaste lines over\u003c/em\u003e, or by right-clicking on\nthe subtitles grid.\u003c/p\u003e\n\u003cp\u003eTo use it, first copy one or more lines with the familiar copy function\n(right-click -\u0026gt; copy, or Ctrl-c). Then select the line(s) you want to paste to,\nand click \u003cem\u003epaste lines over\u003c/em\u003e (or press Ctrl-Shift-v). You will then get a\ndialog box that looks like this:\u003c/p\u003e\n\u003cp\u003e\u003cimg src="/img/3.2/Paste_over.png" alt="Paste_over"\u003e{: class=\u0026ldquo;center\u0026rdquo;}\u003c/p\u003e\n\u003cp\u003eTick the fields you want to paste (the buttons below the checkboxes can be used\nto select all fields (in which case paste over is almost the same as normal\npasting except it replaces existing lines instead of inserting new ones), no\nfields (in which case it does nothing), just the text field, or both time\nfields) and press OK. The fields you selected will then be pasted. It\u0026rsquo;s as\nsimple as that.\u003c/p\u003e\n\u003cp\u003eDo note that the paste over function isn\u0026rsquo;t limited to using lines copied from\nAegisub itself; you are free to copy correctly formatted lines from any text\neditor, chat program, web browser etc. etc.\u003c/p\u003e\n'},{id:13,href:"/docs/3.2/en/select_lines/",title:"Select Lines",description:null,content:'\u003cp\u003eThe \u003cstrong\u003eselect lines\u003c/strong\u003e tool is useful for finding and selecting all lines in the\nscript that matches certain criteria. This can be useful from a number of\nthings ranging from deleting all comment lines to finding all lines said by a\ncertain actor. The tool can be found in the \u003cem\u003eSubtitles\u003c/em\u003e menu -\u0026gt; \u003cem\u003eSelect lines\u003c/em\u003e.\u003c/p\u003e\n\u003cp\u003e\u003cimg src="/img/3.2/Select_lines.png" alt="Select_lines"\u003e{: class=\u0026ldquo;center\u0026rdquo;}\u003c/p\u003e\n\u003ch3 id="match"\u003eMatch\u003c/h3\u003e\n\u003cp\u003eThese controls what criteria will be used for selecting the lines.\u003c/p\u003e\n\u003cdl\u003e\n\u003cdt\u003eMatch\u003c/dt\u003e\n\u003cdd\u003eSelect all lines that match the criteria.\u003c/dd\u003e\n\u003cdt\u003eDoesn\u0026rsquo;t match\u003c/dt\u003e\n\u003cdd\u003eSelect all lines that \u003cem\u003edon\u0026rsquo;t\u003c/em\u003e match the criteria.\u003c/dd\u003e\n\u003cdt\u003eMatch case\u003c/dt\u003e\n\u003cdd\u003eControls case sensitivity, i.e. if the tool should care about the difference\nbetween lower and upper case or not.\u003c/dd\u003e\n\u003cdt\u003eExact match\u003c/dt\u003e\n\u003cdd\u003eMatches the lines that matches the given string \u003cem\u003eexactly\u003c/em\u003e.\u003c/dd\u003e\n\u003cdt\u003eContains\u003c/dt\u003e\n\u003cdd\u003eMatches the lines that \u003cem\u003econtains\u003c/em\u003e the given string.\u003c/dd\u003e\n\u003cdt\u003eRegular Expression match\u003c/dt\u003e\n\u003cdd\u003eTreats the string as a \u003ca href="http://en.wikipedia.org/wiki/Regular_expression"\u003eregular\nexpression\u003c/a\u003e or \u0026ldquo;regex\u0026rdquo;, and\nmatches if said expression matches. For a regular expressions tutorial, try\nreading the \u003ca href="http://perldoc.perl.org/perlretut.html"\u003eperlretut manual page\u003c/a\u003e or\ngoogling. For a reference of the exact syntax supported by Aegisub, see the\n\u003ca href="http://www.wxwidgets.org/manuals/stable/wx_wxresyn.html"\u003ewxWidgets regular expressions reference\npage\u003c/a\u003e.\n{: class=\u0026ldquo;horizontal-wide\u0026rdquo;}\u003c/dd\u003e\n\u003c/dl\u003e\n\u003ch3 id="in-field"\u003eIn field\u003c/h3\u003e\n\u003cp\u003eThis option controls what field of each line will be used for the matching\nmentioned above. Possible alternatives are:\u003c/p\u003e\n\u003cdl\u003e\n\u003cdt\u003eText\u003c/dt\u003e\n\u003cdd\u003eThe body text of the line\u003c/dd\u003e\n\u003cdt\u003eStyle\u003c/dt\u003e\n\u003cdd\u003eThe line\u0026rsquo;s style name\u003c/dd\u003e\n\u003cdt\u003eActor\u003c/dt\u003e\n\u003cdd\u003eThe actor field\u003c/dd\u003e\n\u003cdt\u003eEffect\u003c/dt\u003e\n\u003cdd\u003eThe effect field\n{: class=\u0026ldquo;horizontal-narrow\u0026rdquo;}\u003c/dd\u003e\n\u003c/dl\u003e\n\u003ch3 id="match-dialoguescomments"\u003eMatch dialogues/comments\u003c/h3\u003e\n\u003cp\u003eHere you can choose if you want to select from comment lines, dialogue lines,\nor both.\u003c/p\u003e\n\u003ch3 id="action"\u003eAction\u003c/h3\u003e\n\u003cp\u003eDecides what the tool should do with the lines that matches the given criteria.\nYou can choose between:\u003c/p\u003e\n\u003cdl\u003e\n\u003cdt\u003eSet selection\u003c/dt\u003e\n\u003cdd\u003eYour current selection will be discarded and all lines in the script matching\nthe criteria will be selected instead.\u003c/dd\u003e\n\u003cdt\u003eAdd to selection\u003c/dt\u003e\n\u003cdd\u003eAdds all lines in the script that matches the criteria to your current\nselection.\u003c/dd\u003e\n\u003cdt\u003eSubtract from selection\u003c/dt\u003e\n\u003cdd\u003eDeselects all currently selected lines that match the criteria.\u003c/dd\u003e\n\u003cdt\u003eIntersect with selection\u003c/dt\u003e\n\u003cdd\u003eDoes the inverse of subtract from selection. That is to say, all lines in the\ncurrent selection that matches the criteria are kept selected, but everything\nelse is deselected.\n{: class=\u0026ldquo;horizontal-wide\u0026rdquo;}\u003c/dd\u003e\n\u003c/dl\u003e\n'},{id:14,href:"/docs/3.2/en/typesetting/",title:"Typesetting Introduction",description:null,content:'\u003cp\u003eWikipedia\u0026rsquo;s definition of\n\u003ca href="http://en.wikipedia.org/wiki/Typesetting"\u003etypesetting\u003c/a\u003e: \u0026ldquo;\u003cstrong\u003eTypesetting\u003c/strong\u003e\ninvolves the presentation of textual material in graphic form on paper or some\nother medium.\u0026rdquo; In a subtitling context, this means three things:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003ePresenting (a translation of) the spoken dialogue to the viewer in an easily\nreadable and visually pleasing form.\u003c/li\u003e\n\u003cli\u003eTranslating any foreign-language background texts (such as episode titles,\nscene information like time/place and other plot-important writings on things\nin the background) and presenting the translation to the viewer, preferably\nso that it appears that the translation was there all along (yet retaining\nreadability).\u003c/li\u003e\n\u003cli\u003eDesigning other texts (logotypes, karaoke, etc. etc.) that should be\ndisplayed on the video.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eParticularly in the fansub community, the word \u0026ldquo;typesetting\u0026rdquo; usually refers to\nthe second or third of these three.\u003c/p\u003e\n\u003cp\u003eThis page will attempt to give you an introduction to subtitle typesetting.\nUnfortunately good taste is hard to teach, but we will do our best.\u003c/p\u003e\n\u003ch2 id="dialogue-typesetting"\u003eDialogue typesetting\u003c/h2\u003e\n\u003cp\u003eThe main goal of dialogue typesetting is \u003cstrong\u003elegibility\u003c/strong\u003e; everything else is\njust icing on the cake. There\u0026rsquo;s no point in having subtitles if the viewer\ncan\u0026rsquo;t read them. Remember that subtitles frequently require quite fast reading,\nso ease of recognition is vital. Some guidelines for good legibility:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eUse a plain, uncluttered, no-nonsense typeface. Sans-serif fonts (or if you\ninsist on serifs, \u0026ldquo;slab serif\u0026rdquo; fonts) are generally preferable, especially at\nlow video resolutions, since the serifs tend get blurred out, which naturally\nlooks bad. Too thin fonts are also to be avoided. Small caps fonts are bad\nbecause the ascenders/descenders of  help recognition of words. Using tried\nand trusted faces such as Helvetica, Arial or Verdana is not a bad thing; if\nyou want something that looks less \u0026ldquo;boring\u0026rdquo; but still readable try a\nsans-serif font of the \u0026ldquo;humanist\u0026rdquo; variety, such as Calibri.\u003c/li\u003e\n\u003cli\u003eUse a well-defined but not too thick border. The color is important; the\nhigher the contrast against the main color the better. The white main\ncolor/black border combo is well tried and trusted. Shadow is optional; if\nyou use it consider setting it to half-transparent black; solid black tends\nto hurt legibility.\u003c/li\u003e\n\u003cli\u003eUse big friendly letters with comfortable margins; usually subtitles need to\nbe bigger than you think to be easily readable, particularly on a TV screen\n(since the viewing distance on a TV is usually 2-3 meters, compared to\n0.3-0.6m for a computer screen). If you plan on showing your subtitles on a\nTV you also need to take \u003ca href="http://en.wikipedia.org/wiki/Overscan"\u003eoverscan\u003c/a\u003e\ninto account; Aegisub has an overscan mask feature (see \u003ca href="/docs/3.2/en/video/"\u003eworking with video\u003c/a\u003e) that can help you with this. Even if the end result isn\u0026rsquo;t\ngoing to be viewed on a TV, subtitles which are in the overscan area are\nusually not very readable anyway. Also consider the aspect ratio of the\nvideo; 16:9 or wider aspect ratios give you the opportunity to have longer\nlines at the expense of vertical space.\u003c/li\u003e\n\u003cli\u003eMake sure that no more than two lines of text are visible at a time\n(exceptions can be made at times where there are a lot of people talking at\nthe same time). Sometimes you can compress the text horizontally a bit to\nsqueeze it in; at other times you just have to split the text block into two\ndifferent lines and display one after the other.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e{::template name=\u0026ldquo;todo\u0026rdquo;}examples{:/}\u003c/p\u003e\n\u003ch2 id="sign-typesetting"\u003e\u0026ldquo;Sign\u0026rdquo; typesetting\u003c/h2\u003e\n\u003cp\u003eSign typesetting (translating various background text) can usually be\naccomplished with ASS, but for more complex effects commercial programs like\nAdobe AfterEffects are sometimes used, since the holy grail of sign typesetting\nis to make the subtitle look like it\u0026rsquo;s a part of the image that was always\nthere. How to get there from here will not be discussed in detail on this page\n(see the \u003ca href="/docs/3.2/en/visual_typesetting/"\u003etypesetting tutorial\u003c/a\u003e), but here are some\npointers:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eIs the sign actually important to the plot? Trying to translate every single\nbit of text displayed on screen will rapidly make you go insane, and the end\nresult will often be unreadable anyway.\u003c/li\u003e\n\u003cli\u003eFrequently, the text of a plot-important sign (such as a letter) is actually\nread out loud in the dialogue; if this is the case you should consider\nskipping the sign typeset because having both text and dialogue may overload\nthe viewer with information. You should not typeset a sign just to show off\nthat you\u0026rsquo;re capable of doing so.\u003c/li\u003e\n\u003cli\u003eWill you be able to make the translation easily legible? For example, if you\nhave very little space available to squeeze it in on, consider putting a\ntranslation note as a normal \u0026ldquo;toptitle\u0026rdquo; instead.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e{::template name=\u0026ldquo;todo\u0026rdquo;}images{:/}\u003c/p\u003e\n\u003ch2 id="further-reading"\u003eFurther reading\u003c/h2\u003e\n\u003cp\u003eThe Wikipedia page on \u003ca href="http://en.wikipedia.org/wiki/Typography"\u003etypography\u003c/a\u003e has\na lot of useful links and explanation of various typesetting-related terms.\u003c/p\u003e\n'},{id:15,href:"/docs/3.2/en/video/",title:"Working with Video",description:null,content:'\u003cp\u003eAegisub isn\u0026rsquo;t a video (or media) player, but it still supports loading and\nworking with video in various ways. This page is a reference of how Aegisub\u0026rsquo;s\nloading and handling of video works; for a gentler introduction on how to just\nget things to display properly you may want to read the\n\u003ca href="/docs/3.2/en/visual_typesetting/"\u003eTypesetting_Tutorial\u003c/a\u003e or \u003ca href="/docs/3.2/en/visual_typesetting/"\u003eVisual_Typesetting\u003c/a\u003e pages.\u003c/p\u003e\n\u003ch2 id="opening-video"\u003eOpening video\u003c/h2\u003e\n\u003cp\u003eTo load a video file, go to the \u003cem\u003eVideo\u003c/em\u003e menu and press \u003cem\u003eOpen video file\u003c/em\u003e. What\nvideo files you can open depends on your \u003ca href="/docs/3.2/en/options/#video"\u003evideo provider\u003c/a\u003e. To\nuse a dummy (mockup, blank) video, press \u003cem\u003eUse dummy video\u003c/em\u003e.\u003c/p\u003e\n\u003ch3 id="supported-formats"\u003eSupported formats\u003c/h3\u003e\n\u003cp\u003eAegisub normally uses \u003ca href="http://code.google.com/p/ffmpegsource/"\u003eFFMS2\u003c/a\u003e to open\nvideo, which supports opening nearly all common A/V formats, and many uncommon\nones. For a full list of codecs supported, see \u003ca href="http://ffmpeg.org/"\u003eFFmpeg\u003c/a\u003e or\n\u003ca href="http://libav.org/"\u003eLibav\u003c/a\u003e documentation. Note that FFMS2 current has issues\nwith interlaced H.264.\u003c/p\u003e\n\u003cp\u003eOn Windows, \u003ca href="http://avisynth.org/mediawiki/Main_Page"\u003eAvisynth\u003c/a\u003e can be used\ninstead of FFMS2. When opening via \u003cem\u003eAvisynth\u003c/em\u003e, Aegisub will try several source\nfunctions to find the best choice:\u003c/p\u003e\n\u003cdl\u003e\n\u003cdt\u003eImport()\u003c/dt\u003e\n\u003cdd\u003eAvisynth builtin function. Used to load Avisynth scripts, never used\nfor anything else.\u003c/dd\u003e\n\u003cdt\u003eAviSource()\u003c/dt\u003e\n\u003cdd\u003eAvisynth builtin function. AviSource uses the system\u0026rsquo;s Video for\nWindows (VfW) decoder to open the video, which for some esoteric\nformats may be the best or only way to open a file. Only supports .avi\nfiles, for obvious reasons. If AviSource cannot open a file, DSS2 is\ntried, followed by DirectShowSource.\u003c/dd\u003e\n\u003cdt\u003eMPEG2Source()\u003c/dt\u003e\n\u003cdd\u003eOnly used to load .d2v files (DVD2AVI project files; otherwise known\nas indexed .VOB\u0026rsquo;s ripped from DVD\u0026rsquo;s). Tries to use neuron2\u0026rsquo;s\n\u003ca href="http://neuron2.net/dgmpgdec/dgmpgdec.html"\u003eDGDecode\u003c/a\u003e to open the file;\nif Aegisub can\u0026rsquo;t find or load that it\u0026rsquo;ll try the old mpeg2dec3.dll\ninstead; if that too fails, returns an error. This is the most\nreliable way to open DVD video in Aegisub.\u003c/dd\u003e\n\u003cdt\u003eDSS2()\u003c/dt\u003e\n\u003cdd\u003eTries to find, load and use Haali\u0026rsquo;s DirectShowSource2 plugin (comes\nwith the \u003ca href="http://haali.cs.msu.ru/mkv/"\u003eHaali Media Splitter\u003c/a\u003e package\nand with the \u003ca href="http://cccp-project.net"\u003eCCCP\u003c/a\u003e; the Avisynth plugin is\n\u003cem\u003eavss.dll\u003c/em\u003e, you need to manually put it somewhere where Aegisub or\nAvisynth can find it, see below). That will in turn try to use your\ncomputer\u0026rsquo;s DirectShow environment to open the file. Theoretically any\nfile renderable by DirectShow should be supported, but since you are at\nthe mercy of third-party splitters and decoders, your mileage may vary.\nAs a rule of thumb, if it\u0026rsquo;s playable in Windows Media Player, Aegisub\nshould be able to load it. Do note that DSS2 converts variable\nframerate files to constant.  Usually this is what you want and expect\nbut if you\u0026rsquo;re doing proper VFR subtitles, it isn\u0026rsquo;t.\u003c/dd\u003e\n\u003cdt\u003eDirectShowSource()\u003c/dt\u003e\n\u003cdd\u003eUses DirectShowSource() (which ships with Avisynth) to try to load\nthe file. Basically the same as DSS2, but far less reliable and it\ndoesn\u0026rsquo;t convert VFR to CFR. Warning: DSS is known to have problems with\nframe-accurate seeking. Do not use it if you can avoid it.\n{: .horizontal-wide}\u003c/dd\u003e\n\u003c/dl\u003e\n\u003cp\u003eNote that \u003ca href="/docs/3.2/en/video/#variableframeratevideo"\u003eVFR\u003c/a\u003e is not supported by the\nAvisynth provider. In some cases loading \u003ca href="/docs/3.2/en/video/#timecodes"\u003eexternal timecodes\u003c/a\u003e\nmay work, but in practice it will often result in a broken mess.\u003c/p\u003e\n\u003cp\u003eAegisub will look for Avisynth plugins in its\n\u003ca href="/docs/3.2/en/aegisub_path_specifiers/#?data"\u003e?data\u003c/a\u003e directory (generally the folder where\naegisub32.exe is, on Windows). You can also put them directly in your Avisynth\nplugins folder to get them autoloaded.\u003c/p\u003e\n\u003ch3 id="dummy-video"\u003eDummy video\u003c/h3\u003e\n\u003cp\u003eAegisub also supports providing a bogus video surface for you to render\nsubtitles on without having any actual video loaded. The dummy video dialog box\nlooks like this:\u003c/p\u003e\n\u003cp\u003e\u003cimg src="/img/3.2/Dummy_video.png" alt="Dummy_video"\u003e{: class=\u0026ldquo;center\u0026rdquo;}\u003c/p\u003e\n\u003cdl\u003e\n\u003cdt\u003eResolution\u003c/dt\u003e\n\u003cdd\u003eThe resolution of the dummy video in pixels. There are a few\npre-defined choices in the dropdown menu; you can also specify the size\nyourself. Note that since the dummy video is RGB there are no\nparticular restrictions with regards to odd widths/heights.\u003c/dd\u003e\n\u003cdt\u003eColour\u003c/dt\u003e\n\u003cdd\u003eThe colour of the video surface. The color is solid by default; tick\nthe box \u0026ldquo;checkerboard pattern\u0026rdquo; if you want some more variation.\u003c/dd\u003e\n\u003cdt\u003eFrame rate\u003c/dt\u003e\n\u003cdd\u003eDetermines how long each frame is displayed by setting the number of\nframes per second (fps). Note that it is in fact possible to load VFR\ntimecodes with dummy video.\u003c/dd\u003e\n\u003cdt\u003eDuration\u003c/dt\u003e\n\u003cdd\u003eThe duration of the video in frames. Below this number is shown the\nresulting duration in hours/minutes/seconds.\n{: .horizontal-narrow}\u003c/dd\u003e\n\u003c/dl\u003e\n\u003ch2 id="playing-video"\u003ePlaying video\u003c/h2\u003e\n\u003cp\u003eAegisub does support playing back video, but it has been widely debated if it\nis a misfeature or not.\u003c/p\u003e\n\u003ch3 id="before-you-press-the-play-button"\u003eBefore you press the \u0026ldquo;play\u0026rdquo; button\u003c/h3\u003e\n\u003cp\u003eThink it through. Do you really \u003cstrong\u003ewant\u003c/strong\u003e to play the video? (Hint: the answer\nis \u0026ldquo;no\u0026rdquo;, you don\u0026rsquo;t want to do that, at least not in Aegisub.) If you\u0026rsquo;re trying\nto check if a subtitle matches up to something in the video, wouldn\u0026rsquo;t it be\neasier to just step through the video frame-by-frame with the arrow keys? If\nyou\u0026rsquo;re proofwatching, it would be a better idea to watch it in a player your\nviewers might actually use.\u003c/p\u003e\n\u003cp\u003eTo conclude: in real world situations, you will never need to play the video\nfrom inside Aegisub. The mantra is: Aegisub isn\u0026rsquo;t a media player; if you want a\nmedia player use a media player. Nonetheless, Aegisub does make a reasonable\neffort to support reliable video playback and in practice it will usually work\nfine.\u003c/p\u003e\n\u003cp\u003eNote that audio has to be explicitly loaded for Aegisub to play it while\nplaying video. If you find this bothersome, there is an option to automatically\nopen audio whenever a video file is opened.\u003c/p\u003e\n\u003ch2 id="keyframes"\u003eKeyframes\u003c/h2\u003e\n\u003cp\u003eA brief, highly simplified explanation of what a keyframe is, for the people\nwho missed Video 101:\u003c/p\u003e\n\u003cp\u003eModern video codecs compress video by storing as little information as\npossible. Instead of storing all frames in full (like a large amount of JPG\npictures), they take occasionally take a keyframe, which is stored fully, and\nfor each frame after that until the next keyframe, they only store what changed\nin the picture since the last frame. Hence, to seek to a given frame the\ndecoder needs to find the previous keyframe and decode all frames between that\nframe and the sought one, which means seeking to keyframes is faster than to\nother frames. Keyframes are interesting mostly for scene timing reasons,\nbecause they usually appear at scenechanges. The first frame in a scene is\nalmost invariably a keyframe, but beware - far from every keyframe is a\nscenechange! Most encoders insert a keyframe at least once every 250-300\nframes, even if there hasn\u0026rsquo;t been a scenechange.\u003c/p\u003e\n\u003cp\u003eAegisub uses keyframe data at several places in the program. They are drawn as\nblack lines on the video seek bar, and (by default) also displayed in the audio\nwaveform/spectrum analyzer.\u003c/p\u003e\n\u003ch3 id="loading-and-saving-of-keyframe-data"\u003eLoading and saving of keyframe data\u003c/h3\u003e\n\u003cp\u003eWhen opening video through FFMS2, Aegisub supports reading keyframe data from\nmost file formats, while the Avisynth provider only supports reading keyframes\nfrom AVI. If you are using a video format which keyframes can\u0026rsquo;t be read from,\nyou can still load keyframe data separately. Aegisub currently supports reading\nfrom several formats: its own keyframe file format (see specification below),\nXviD first-pass files, DivX first-pass files, and x264 first-pass files.\u003c/p\u003e\n\u003cp\u003eEven if keyframes can be read from the file it is sometimes useful to override\nthem with external keyframes. Using XviD first-pass .stat files for audio\ntiming is fairly popular, as XviD\u0026rsquo;s keyframe choices correlate unusually well\nwith scene changes.\u003c/p\u003e\n\u003cp\u003eAegisub can also write the currently loaded keyframe data to a keyframes file,\nwhich can be useful to avoid passing video files around in certain situations\n(audio timing for example).\u003c/p\u003e\n\u003ch3 id="keyframe-file-specification"\u003eKeyframe file specification\u003c/h3\u003e\n\u003cp\u003eA keyframes file is a plain ASCII-encoded text file; both \\n and \\r\\n is\nunderstood to mean a linebreak. Syntax example:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e# keyframe format v1\r\nfps 0\r\n0\r\n30\r\n70\r\n82\r\n130\r\n131\r\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe first line is the format specification: the string\n\u003ccode\u003e# keyframe format v1\u003c/code\u003e. The second line contains the FPS of the video used to\ngenerate the keyframe data; however no programs (Aegisub included) actually\nsupport this and so it is typically just \u003ccode\u003e0\u003c/code\u003e. Finally, after the fps line\nfollows an arbitrary number of long integers (one per line), each representing\nthe frame number of a keyframe. The frame numbers are zero-indexed; i.e. the\nfirst frame of the video is frame number 0.\u003c/p\u003e\n\u003ch2 id="variable-framerate-video"\u003eVariable framerate video\u003c/h2\u003e\n\u003cp\u003eAegisub supports loading and working with variable framerate video. The how\u0026rsquo;s\nand why\u0026rsquo;s of VFR is far outside the scope of this manual (see for example \u003ca href="http://forums.animesuki.com/showthread.php?t=34738"\u003ethe\nVFR thread on AnimeSuki\u003c/a\u003e or\nthe \u003ca href="http://avisynth.org/mediawiki/VFR"\u003eAvisynth manual page\u003c/a\u003e for more\ninformation about VFR), but we will cover what you need to know about how\nAegisub handles it.\u003c/p\u003e\n\u003ch3 id="timecodes"\u003eTimecodes\u003c/h3\u003e\n\u003cp\u003eLoading of Matroska timecode files (v1 and v2) is supported and useful if you\nhave a VFRaC (Variable FrameRate assumed Constant; for example the frames of an\nVFR MKV stored in an AVI at a constant FPS, see the VFR thread linked above for\ndetails) video file but want the subs to sync to it. If you load a VFR file,\nAegisub will automatically read the timecodes from it directly.\u003c/p\u003e\n\u003ch3 id="vfr-and-hardsubbing"\u003eVFR and hardsubbing\u003c/h3\u003e\n\u003cp\u003eAs long as you\u0026rsquo;re not encoding with GDSMux, the encoding environment your\nsubtitling filter is working in (i.e. Avisynth, VirtualDub or mencoder) will\nassume that the world is CFR, and hence the input file is VFRaC. This is\nobviously a problem since it messes up subtitle synchronization. Aegisub\nprovides a way around this through the Framerate Transformation export filter,\nwhich takes the framerate of the VFRaC input file and the timecodes, and then\nchanges every time code and override tag in the script so it can be hardsubbed\non the VFRaC video and still sync up perfectly after timecodes are applied. To\nprepare a script for hardsubbing, make sure you have the timecodes loaded, then\ngo to the \u003cem\u003eFile\u003c/em\u003e menu and press \u003cem\u003eExport\u003c/em\u003e. Untick everything except the\n\u003cem\u003eTransform Framerate\u003c/em\u003e filter. Choose the \u003cem\u003eVariable\u003c/em\u003e output mode. It needs to\nknow the FPS of the video you\u0026rsquo;re going to hardsub the subtitles on; if you have\nvideo loaded Aegisub will assume that\u0026rsquo;s it and insert it in the box for you.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e if you have a Matroska or other VFR file loaded, remember that the\nFPS value Aegisub reports might not be the same as the one of the video you are\ngoing to hardsub the subtitles on.\u003c/p\u003e\n\u003ch2 id="anamorphic-video"\u003eAnamorphic video\u003c/h2\u003e\n\u003cp\u003e\u003cstrong\u003eOR: How to get your subtitles to not look stretched\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eThe following paragraphs assumes that you have a working knowledge of what\nanamorphic video is and how aspect ratios work. If you feel unsure, you may\nwant to consult a \u003ca href="http://www.hometheaterhifi.com/volume_6_4/feature-article-enhanced-widescreen-november-99.html"\u003egentle but fairly complete\nintroduction\u003c/a\u003e.\u003c/p\u003e\n\u003ch3 id="image-stretching-and-subtitle-rendering"\u003eImage stretching and subtitle rendering\u003c/h3\u003e\n\u003cp\u003eAn anamorphic image needs to be stretched to the proper aspect ratio before it\nis presented to the viewer. On a computer, this is usually done by the video\nrenderer, and thereby lies a problem. Most subtitle renderers (including\nVSFilter, the current \u0026ldquo;standard\u0026rdquo; renderer) do the subtitle drawing on the image\nbefore it is stretched, and since the renderer is not aware of any aspect ratio\nissues, the subtitles will be stretched along with the image when the video is\ndisplayed to the viewer, and therefore they will look stretched. Aegisub does\nits subtitle rendering this way as well (since that way it will be WYSIWYG with\nmost players); you can test how it looks by using the \u0026ldquo;Override aspect ratio\u0026rdquo;\nin the video menu.\u003c/p\u003e\n\u003ch3 id="compensating-for-the-stretching"\u003eCompensating for the stretching\u003c/h3\u003e\n\u003cp\u003eFortunately it\u0026rsquo;s easy to compensate for the stretching, since you know by how\nmuch the image will be stretched (since you know its original dimensions and\nthe display aspect ratio). You just calculate how many percent the image will\nbe stretched in either the X or the Y direction, and then set the ScaleX or\nScaleY parameter in the \u003ca href="/docs/3.2/en/styles/"\u003estyle\u003c/a\u003e (or use the \u003ctt\u003e\\fscx\u003c/tt\u003e or\n\u003ctt\u003e\\fscy\u003c/tt\u003e \u003ca href="/docs/3.2/en/ass_tags/"\u003eoverrides\u003c/a\u003e) to the same amount but in the other\ndirection.\u003c/p\u003e\n\u003cp\u003eExample: we have a 704x480 image that we know will be displayed as 16:9 (or\n1.7777\u0026hellip;:1). If we assume that the player will stretch the width but leave the\nheight untouched, this means that the new width will be:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e(16 / 9) * 480 = 853.333...\r\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003ewhich in percent is:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e853.333... / 704 = 1.212121...\r\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003ei.e. 121%. Hence, to compensate for this horizontal (X-direction) stretch we\nset ScaleY in all our styles to 121% to stretch the subtitles by the same\namount, and after rendering they now no longer look stretched.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eOR\u003c/strong\u003e we can do the stretching in the other direction, assuming that the\nplayer changes the height of the image instead. Assuming the same image:\n704 / (16 / 9) = 396\nwhich corresponds to:\n396 / 480 = 0.825\nor 82.5%, which means we can compensate for the vertical (Y) compression by\nsetting ScaleX to 82.5%.\u003c/p\u003e\n\u003ch3 id="caveats"\u003eCaveats\u003c/h3\u003e\n\u003cp\u003eBoth of the above methods give the subtitles the proper aspect ratio, but\ndepending on how the player does the stretching, you may get subtle variations\nin subtitle size. Aegisub (and indeed most video players and renderers) always\nchanges the image width and never the height, except if you pick the \u0026ldquo;custom\u0026rdquo;\naspect ratio and specify a resolution. Note that if you use the Matroska\ncontainer, you may specify the display resolution directly, but player support\nof this varies.\u003c/p\u003e\n\u003cp\u003eNote that some odd subtitle renderers (most notably Media Player Classic\u0026rsquo;s\nbuiltin renderer) are actually a part of the video renderer and will do the\nsubtitle rendering \u003cem\u003eafter\u003c/em\u003e anamorphic stretching, resulting in stretched\nsubtitles and much annoyance. With MPlayer\u0026rsquo;s libass renderer, you can actually\nspecify whether subtitles should be drawn before or after stretching by using\nthe -vf parameter to move the subtitle renderer in the filter chain.\u003c/p\u003e\n\u003ch3 id="further-reading"\u003eFurther reading\u003c/h3\u003e\n\u003cp\u003eFor more information about anamorphic video and aspect ratios in general (a\ndeeply obfuscated topic that appears simple at a glance) the following links\nmay be of interest:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href="http://lipas.uwasa.fi/~f76998/video/conversion/"\u003eA Quick Guide to Digital Video Resolution and Aspect Ratio\nConversions\u003c/a\u003e - Absolutely\nessential reading for anyone who wants to really understand the topic, but\nunfortunately far more than everything most people ever wanted to know about\nit.\n\u003ca href="http://www.widescreen.org/aspect_ratios.shtml"\u003eWidescreen.org: Aspect\nRatios\u003c/a\u003e - the history and\nreasons for some common aspect ratios\u003c/li\u003e\n\u003cli\u003e\u003ca href="http://en.wikipedia.org/wiki/Aspect_ratio_(image)"\u003eWikipedia: Aspect Ratio (image)\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href="http://en.wikipedia.org/wiki/Anamorphic_widescreen"\u003eWikipedia: Anamorphic Widescreen\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id="the-video-menu"\u003eThe video menu\u003c/h2\u003e\n\u003cp\u003eThe following options are available from the video menu:\u003c/p\u003e\n\u003ch3 id="sourcefile-related"\u003eSourcefile-related\u003c/h3\u003e\n\u003cdl\u003e\n\u003cdt\u003eOpen video\u003c/dt\u003e\n\u003cdd\u003eOpens video. Note that if you try to open another video with video\nalready loaded, the original video will be closed first.\u003c/dd\u003e\n\u003cdt\u003eClose video\u003c/dt\u003e\n\u003cdd\u003eUnloads the currently open video.\u003c/dd\u003e\n\u003cdt\u003eRecent\u003c/dt\u003e\n\u003cdd\u003eShows list of recently opened videos.\u003c/dd\u003e\n\u003cdt\u003eUse dummy video\u003c/dt\u003e\n\u003cdd\u003eOpens a dummy video (see above).\u003c/dd\u003e\n\u003cdt\u003eShow video details\u003c/dt\u003e\n\u003cdd\u003eShows some information about the currently open video. Details shown\nare filename, frames per second (for VFR files the average FPS is\ndisplayed), resolution and aspect ratio, length and decoder. Decoder\nbeing what filter/method Aegisub used to open the file.\n{: .horizontal-wide}\u003c/dd\u003e\n\u003c/dl\u003e\n\u003ch3 id="timecodes-related"\u003eTimecodes-related\u003c/h3\u003e\n\u003cdl\u003e\n\u003cdt\u003eOpen timecodes file\u003c/dt\u003e\n\u003cdd\u003eLoads a timecodes file and applies it to the video, changing the\nvideo/subtitle synchronization.\u003c/dd\u003e\n\u003cdt\u003eSave timecodes file\u003c/dt\u003e\n\u003cdd\u003eSaves the currently loaded timecodes as a new v2 timecodes file.\u003c/dd\u003e\n\u003cdt\u003eClose timecodes file\u003c/dt\u003e\n\u003cdd\u003eUnloads the currently loaded timecodes.\u003c/dd\u003e\n\u003cdt\u003eRecent\u003c/dt\u003e\n\u003cdd\u003eShows list of recently opened timecodes files.\n{: .horizontal-wide}\u003c/dd\u003e\n\u003c/dl\u003e\n\u003ch3 id="keyframes-related"\u003eKeyframes-related\u003c/h3\u003e\n\u003cdl\u003e\n\u003cdt\u003eOpen keyframes\u003c/dt\u003e\n\u003cdd\u003eLoads keyframe data from the given file. If you already have keyframe\ndata loaded, it will be replaced by the one read from the file.\u003c/dd\u003e\n\u003cdt\u003eSave keyframes\u003c/dt\u003e\n\u003cdd\u003eSaves the currently loaded keyframes data to a keyframes file.\u003c/dd\u003e\n\u003cdt\u003eClose keyframes\u003c/dt\u003e\n\u003cdd\u003eUnloads the currently loaded keyframe data, if any. Note that it is\nnot possible to unload keyframe data that was directly loaded from the\nvideo file; if you want to get rid of that for some reason, load a\nkeyframes file with only frame 0 being marked as a keyframe.\u003c/dd\u003e\n\u003cdt\u003eRecent\u003c/dt\u003e\n\u003cdd\u003eShows list of recently loaded keyframe files.\n{: .horizontal-wide}\u003c/dd\u003e\n\u003c/dl\u003e\n\u003ch3 id="display-related"\u003eDisplay-related\u003c/h3\u003e\n\u003cdl\u003e\n\u003cdt\u003eDetach video\u003c/dt\u003e\n\u003cdd\u003eDetaches the video display and related controls from the Aegisub main\nwindow and moves it into its own window. To reattach the video to the\nmain window, close the detached window. This feature can be\nparticularly useful on multi-monitor setups.\u003c/dd\u003e\n\u003cdt\u003eSet zoom\u003c/dt\u003e\n\u003cdd\u003eSets the video zoom level.\u003c/dd\u003e\n\u003cdt\u003eOverride aspect ratio\u003c/dt\u003e\n\u003cdd\u003eStretches the video to the specified aspect ratio by modifying the\nvideo width. Useful for anamorphic video (see above).\u003c/dd\u003e\n\u003cdt\u003eShow overscan mask\u003c/dt\u003e\n\u003cdd\u003eDraws a blue \u0026ldquo;mask\u0026rdquo; over the image, indicating the edges of the\naction safe (dark blue) and title safe (light blue) areas. Useful if\nyou plan on showing your subtitles on a TV without adjustable overscan\ncorrection. For more information, see the Wikipedia pages on\n\u003ca href="http://en.wikipedia.org/wiki/Overscan"\u003eoverscan\u003c/a\u003e, \u003ca href="http://en.wikipedia.org/wiki/Safe_area"\u003esafe\nareas\u003c/a\u003e and \u003ca href="http://en.wikipedia.org/wiki/Overscan_amounts"\u003eoverscan\namounts\u003c/a\u003e. Aegisub\nfollows the \u003ca href="http://www.bbc.co.uk/guidelines/dq/pdf/tv/tv_standards_london.pdf"\u003eBBC\nguidelines\u003c/a\u003e\non how big the safe areas should be.\n{: .horizontal-wide}\u003c/dd\u003e\n\u003c/dl\u003e\n\u003ch3 id="seeking-related"\u003eSeeking-related\u003c/h3\u003e\n\u003cdl\u003e\n\u003cdt\u003eJump to\u003c/dt\u003e\n\u003cdd\u003eSeeks the video to the given time or frame.\u003c/dd\u003e\n\u003cdt\u003eJump video to start\u003c/dt\u003e\n\u003cdd\u003eSeeks the video to the start time of the currently active line.\u003c/dd\u003e\n\u003cdt\u003eJump video to end\u003c/dt\u003e\n\u003cdd\u003eSeeks the video to the end time of the currently active line.\n{: .horizontal-wide}\u003c/dd\u003e\n\u003c/dl\u003e\n'},{id:16,href:"/docs/3.2/en/styles/",title:"Editing styles",description:null,content:'\u003cp\u003eA \u003cstrong\u003estyle\u003c/strong\u003e in the ASS format is a set of typographic formatting rules that is\napplied to dialogue lines. The style parameters can be overridden with\n\u003ca href="/docs/3.2/en/ass_tags/"\u003eoverride tags\u003c/a\u003e; the styles exist so that you won\u0026rsquo;t have to type out\nall the overrides for each line.\u003c/p\u003e\n\u003ch2 id="the-styles-manager"\u003eThe styles manager\u003c/h2\u003e\n\u003cp\u003eAegisub\u0026rsquo;s styles manager tool (accessed from the Subtitles menu) provides\nvarious means of organizing, saving and editing styles. It looks like this:\u003c/p\u003e\n\u003cp\u003e\u003cimg src="/img/3.2/Style_manager.png" alt="Style_manager"\u003e{: class=\u0026ldquo;center\u0026rdquo;}\u003c/p\u003e\n\u003cp\u003eAs you can see, the window is divided into two halves. The right half displays\nall styles that you currently have accessible in your currently loaded script;\nthe left represents a style storage. Style storages are used by Aegisub to let\nyou save styles and quickly import them into scripts. You can have as many\nstorages as you want; some people prefer to keep all their styles in one\nstorage, others sort their styles by font, by show or alphabetically. The drop\ndown menu at the top lets you choose what storage you want to view.\u003c/p\u003e\n\u003cp\u003eIn the bottom part of the window there\u0026rsquo;s two almost identical sets of buttons;\none set for the storage and one for the current script. They are:\u003c/p\u003e\n\u003cdl\u003e\n\u003cdt\u003eNew\u003c/dt\u003e\n\u003cdd\u003eCreate a new style, either in the storage or in the current script.\u003c/dd\u003e\n\u003cdt\u003eEdit\u003c/dt\u003e\n\u003cdd\u003eEdit the selected style using the style editor (see below).\u003c/dd\u003e\n\u003cdt\u003eCopy\u003c/dt\u003e\n\u003cdd\u003eCreate a copy of the selected style and bring up the style editor for it.\u003c/dd\u003e\n\u003cdt\u003eDelete\u003c/dt\u003e\n\u003cdd\u003eDelete the selected style(s).\u003c/dd\u003e\n\u003cdt\u003eCopy to script and Copy to storage\u003c/dt\u003e\n\u003cdd\u003eCopies the selected styles between the storage and the current script.\u003c/dd\u003e\n\u003cdt\u003eImport from script\u003c/dt\u003e\n\u003cdd\u003eImport one or more styles from another script to the current one.\u003c/dd\u003e\n\u003c/dl\u003e\n\u003cp\u003ePressing Ctrl-C in the styles manager will copy the selected style(s) to the\nclipboard as a text string. This also works the other way around; you can copy\none or more style lines from another program and press Ctrl-V (paste) in the\nstyles manager; this will insert them into the current script.\u003c/p\u003e\n\u003ch2 id="the-style-editor"\u003eThe style editor\u003c/h2\u003e\n\u003cp\u003ePressing the \u0026ldquo;Edit\u0026rdquo; button or double clicking a style name will bring up the\nstyle editor, which lets you tweak all the parameters available. \u003cstrong\u003eNote\u003c/strong\u003e: some\nparameters that are available as override tags (i.e. \u003ccode\u003e\\be\u003c/code\u003e) are \u003cem\u003enot\u003c/em\u003e available\nas style parameters; conversely, some parameters that are available in the\nstyles editor (i.e. the \u0026ldquo;opaque box\u0026rdquo; outline option) are \u003cem\u003enot\u003c/em\u003e available as a\nstyle override. This is an unfortunate and occasionally annoying format\nlimitation.\u003c/p\u003e\n\u003cp\u003eTo return to the style editor:\u003c/p\u003e\n\u003cp\u003e\u003cimg src="/img/3.2/Style_editor.png" alt="Style_editor"\u003e{: class=\u0026ldquo;center\u0026rdquo;}\u003c/p\u003e\n\u003cdl\u003e\n\u003cdt\u003eStyle name\u003c/dt\u003e\n\u003cdd\u003eThe name of the style. You can\u0026rsquo;t have two styles with the same name in the\nsame script.\u003c/dd\u003e\n\u003cdt\u003eFont\u003c/dt\u003e\n\u003cdd\u003eThis section controls the font settings. The drop down menu lets you choose\nthe typeface (any font installed on your system will show up in this list) and\nthe number to the right controls the size in points. The check boxes below set\nthe bold/italic/underline/strikeout parameters.\u003c/dd\u003e\n\u003cdt\u003eColors\u003c/dt\u003e\n\u003cdd\u003eThis controls the four text colors (primary, secondary, outline and shadow).\nThe meaning of each of them is as follows:\n\u003cp\u003ePrimary\n: The main \u0026ldquo;fill\u0026rdquo; color of the body of the text.\u003c/p\u003e\n\u003cp\u003eSecondary\n: Secondary fill color, used for karaoke effects (see \u003ccode\u003e\\k\u003c/code\u003e and its\nrelatives on the \u003ca href="/docs/3.2/en/ass_tags/#karaokeeffect"\u003eoverride tags page\u003c/a\u003e).\u003c/p\u003e\n\u003cp\u003eOutline\n: The border color of the text.\u003c/p\u003e\n\u003cp\u003eShadow\n: The color of the shadow, which is displayed under the main text and\noffset by the shadow width defined to the right.\n{: .horizontal-narrow }\u003c/p\u003e\n\u003cp\u003eThe four colored boxes show you the current color for each of the four text\ncolors; clicking on them opens the \u003ca href="/docs/3.2/en/colour_picker/"\u003ecolor picker\u003c/a\u003e.\u003c/p\u003e\n\u003c/dd\u003e\n\u003cdt\u003eMargins\u003c/dt\u003e\n\u003cdd\u003eControls how close to the borders of the video frame the text will be\npositioned (and hence also when automatic line breaking will kick in; but do\nnote that there is no option for text justification). Each value (left, right,\nvertical) is given in script resolution pixels (see \u003ca href="/docs/3.2/en/properties/"\u003escript properties\u003c/a\u003e). For alignments (\u003ccode\u003e\\an\u003c/code\u003e) 1-3, the vertical margin is\nrelative to the bottom of the video frame; for 4-6 it doesn\u0026rsquo;t have any meaning,\nand for 7-9 it is relative to the top of the video frame.\u003c/dd\u003e\n\u003cdt\u003eAlignment\u003c/dt\u003e\n\u003cdd\u003eControls the alignment of the text. The numbers correspond to the arguments\nto the \u003ccode\u003e\\an\u003c/code\u003e tag. Alignments 1, 4 and 7 are flush left; 3, 6 and 9 are flush\nright; 2, 5 and 8 are centered. 1, 2 and 3 are \u0026ldquo;subtitles\u0026rdquo; (i.e. drawn at the\nbottom of the frame); 4, 5 and 6 are \u0026ldquo;midtitles\u0026rdquo; (i.e.  entered vertically on\nthe frame); 7, 8 and 9 are \u0026ldquo;toptitles\u0026rdquo; (i.e. drawn at the top of the frame). Do\nnote that there is no such thing as a justified alignment; this is a format\nlimitation.\u003c/dd\u003e\n\u003cdt\u003eOutline\u003c/dt\u003e\n\u003cdd\u003eControls the outline (border) thickness (and style) and the shadow offset.\n\u003cul\u003e\n\u003cli\u003eFor the outline, the number is the thickness of the border in script pixels\nif ScaledBorderAndShadow is enabled (see \u003ca href="/docs/3.2/en/properties/"\u003escript properties\u003c/a\u003e);\nif it is disabled the thickness is given in video pixels instead. Setting\nit to 0 disables the outline.\u003c/li\u003e\n\u003cli\u003eThe shadow on the other hand is a copy of the main text, shifted down and\nto the right the specified distance. The distance is in script pixels if\nScaledBorderAndShadow is enabled, and video pixels otherwise. Setting it to\n0 disables shadow.\u003c/li\u003e\n\u003cli\u003eFinally, the check box marked \u0026ldquo;Opaque box\u0026rdquo; controls whether the outline\nshould be drawn as described above (which happens if it is unticked), or\nreplaced by an opaque background bounding box. Note that the rendering of\nOpaque box outlines is broken when the font scale is anything other than\n100%.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/dd\u003e\n\u003cdt\u003eMiscellaneous\u003c/dt\u003e\n\u003cdd\u003eThis section has various other parameters, namely:\n\u003cp\u003eScale X/Y\n: Controls text stretching in the horizontal (X) and vertical (Y) direction\nrespectively. The value is given in percent, so 100 means no stretching is\ndone. You should not use this for normal text sizing; use the point value\nin the Font area instead since that uses hinting information from the font.\u003c/p\u003e\n\u003cp\u003eRotation\n: Controls rotation of the text. The value is the angle of the rotation in\ndegrees (360 degrees to a full circle) and may be negative or larger than\n360 (setting it to 360, 720 etc. is the same as setting it to 0 except for\nwhen \u003ca href="/docs/3.2/en/ass_tags/#animatedtransform"\u003eanimated transforms\u003c/a\u003e are involved).\u003c/p\u003e\n\u003cp\u003eSpacing\n: Controls the horizontal spacing between letters. 0 means the font\ndefaults are used. May be negative for less spacing, or positive for more.\nThe value is the additional gap in pixels between each character; whether\nthese are script pixels or video pixels is not well defined.\u003c/p\u003e\n\u003cp\u003eEncoding\n: Controls which codepage is used to map codepoints to glyphs; it has\nnothing to do with the actual text encoding of the script. This is only\nmeaningful on Windows using VSFilter, where it is used to get some old\n(particularly Japanese) fonts without proper Unicode mappings to render\nproperly. On other systems and renderers, Freetype2 provides the proper\nmappings. If you didn\u0026rsquo;t understand a word of the above, pretend this\nsetting doesn\u0026rsquo;t exist, as it is rarely important.\u003c/p\u003e\n\u003cp\u003ePreview\n: Shows a preview of what the text will look like using the current style\nparameters. The text field lets you input some sample text to preview, and\nthe colored box controls the color of the background.\n{: .horizontal-narrow}\n{: .dl-horizontal}\u003c/p\u003e\n\u003c/dd\u003e\n\u003c/dl\u003e\n'},{id:17,href:"/docs/3.2/en/visual_typesetting/",title:"Visual Typesetting",description:null,content:'\u003cp\u003etemplate name=\u0026ldquo;todo\u0026rdquo; Screenshots need to be updated\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eA video tutorial for this feature is available at \u003ca href="/docs/3.2/en/tutorials/"\u003ethe tutorials section\u003c/a\u003e.\u003c/strong\u003e\u003c/p\u003e\n\u003ch2 id="overview"\u003eOverview\u003c/h2\u003e\n\u003cp\u003e\u003cimg src="/img/3.2/video_display.png" alt="video_display"\u003e{: class=\u0026ldquo;center\u0026rdquo;}\u003c/p\u003e\n\u003ch3 id="play"\u003ePlay\u003c/h3\u003e\n\u003cp\u003ePlay the video and, starting at the currently displayed frame. See\n\u003ca href="/docs/3.2/en/video/#playingvideo"\u003eVideo#playingvideo\u003c/a\u003e for comments on playing video in Aegisub.\u003c/p\u003e\n\u003ch3 id="play-line"\u003ePlay line\u003c/h3\u003e\n\u003cp\u003ePlay the video starting at the first frame of the currently active line,\nstopping at the end of the line.\u003c/p\u003e\n\u003ch3 id="video-autoseek"\u003eVideo autoseek\u003c/h3\u003e\n\u003cp\u003eToggles automatic seeking of the video to the first frame of a line whenever\na new line is selected.\u003c/p\u003e\n\u003ch3 id="frame-time-and-number"\u003eFrame time and number\u003c/h3\u003e\n\u003cp\u003eDisplays the current frame number and the start time of the frame. If the\ncurrently displayed frame is a keyframe, this box has a green background.\u003c/p\u003e\n\u003cp\u003eNote that it is normal for the \u0026ldquo;Set start of selected subtitles to\ncurrent video frame\u0026rdquo; (Ctrl-3) and \u0026ldquo;Set end of selected subtitles to current\nvideo frame\u0026rdquo; (Ctrl-4) to set the time to something different than what is\ndisplayed here, as setting times to exactly the frame\u0026rsquo;s time tends to result\nin rounding errors.\u003c/p\u003e\n\u003cp\u003e{::template name=\u0026ldquo;todo\u0026rdquo;}Is the main toolbar actually documented anywhere?{:/}\u003c/p\u003e\n\u003ch3 id="subs-relative-time"\u003eSubs relative time\u003c/h3\u003e\n\u003cp\u003eDisplays the time to the start and end time of the active subtitle line.\nThis is mostly useful for override tags which take relative times, such as\n\u003ca href="/docs/3.2/en/ass_tags/#animatedtransform"\u003e\\t\u003c/a\u003e and \u003ca href="/docs/3.2/en/ass_tags/#fade"\u003e\\fad\u003c/a\u003e.\u003c/p\u003e\n\u003ch3 id="zoom"\u003eZoom\u003c/h3\u003e\n\u003cp\u003eDisplays and allows changing the current video zoom.\u003c/p\u003e\n\u003ch3 id="video-position-slider"\u003eVideo position slider\u003c/h3\u003e\n\u003cp\u003eUsed to seek the video. Holding shift while dragging the thumb snaps to\nkeyframes. By default, left/right seek forward/backward one frame;\nalt-left/right seek forward/backward 10 frames; shift-left/right seek\nforward/backwards one keyframe. The slider can be focused without\naccidentally seeking by right-clicking it or pressing Ctrl-Space. If the\nslider already has focus, Ctrl-Space will return keyboard focus to the\ncontrol that last had it.\u003c/p\u003e\n\u003ch2 id="video-context-menu"\u003eVideo context menu\u003c/h2\u003e\n\u003cp\u003eYou can right click to bring a context menu with other options:\u003c/p\u003e\n\u003cp\u003e\u003cimg src="/img/3.2/Visual_menu.png" alt="Visual_menu"\u003e{: class=\u0026ldquo;center\u0026rdquo;}\u003c/p\u003e\n\u003cdl\u003e\n\u003cdt\u003eSave PNG snapshot\u003c/dt\u003e\n\u003cdd\u003eSaves a PNG snapshot of the current frame to the path specified in\nthe \u003ca href="/docs/3.2/en/options/"\u003eoptions\u003c/a\u003e. This snapshot will be in the real video size, and\nWON\u0026rsquo;T be affected by zooming or aspect ratio overriding.\u003c/dd\u003e\n\u003cdt\u003eCopy image to clipboard\u003c/dt\u003e\n\u003cdd\u003eSame as above, but copies the frame to the clipboard, instead of\nsaving as a PNG. You can then paste it in any image editing software.\u003c/dd\u003e\n\u003cdt\u003eSave PNG snapshot (no subtitles)\u003c/dt\u003e\n\u003cdd\u003eSame as the previous option, but subtitles won\u0026rsquo;t be visible in the\nimage.\u003c/dd\u003e\n\u003cdt\u003eCopy image to clipboard (no subtitles)\u003c/dt\u003e\n\u003cdd\u003eSame as above, but copying to clipboard.\u003c/dd\u003e\n\u003cdt\u003eCopy coordinates to clipboard\u003c/dt\u003e\n\u003cdd\u003eCopies the current mouse coordinates to clipboard, e.g. \u0026ldquo;230,152\u0026rdquo;\u003c/dd\u003e\n\u003c/dl\u003e\n\u003ch2 id="tool-descriptions"\u003eTool Descriptions\u003c/h2\u003e\n\u003cp\u003eThere are currently seven different visual typesetting tools: crosshair,\ndrag, rotate on z axis, rotate on xy axes, scale, rectangular clip and\nvector clip.\u003c/p\u003e\n\u003ch3 id="crosshair"\u003eCrosshair\u003c/h3\u003e\n\u003cp\u003eThis is the standard mode. Hovering the mouse over the video will show the\nscript coordinates under the cursor, as well as a crosshair indicating the\nexact point that you are looking at. Holding down shift will make it instead\nshow the distance from the bottom-right corner. Double clicking a point will\nposition the current line (using the \u003ca href="/docs/3.2/en/ass_tags/#setposition"\u003e\\pos tag\u003c/a\u003e) on\nthat position.  If alt is held down while double-clicking, all other selected\nlines will be shifted by the same distance as the active line, including lines\nnot visible on the current frame.\u003c/p\u003e\n\u003cp\u003e\u003cimg src="/img/3.2/Visual_crosshair.png" alt="Visual_crosshair"\u003e{: class=\u0026ldquo;center\u0026rdquo;}\u003c/p\u003e\n\u003ch3 id="drag"\u003eDrag\u003c/h3\u003e\n\u003cp\u003eThe drag tool has two modes. You can toggle between them by clicking the button\non the auxiliary visual typesetting bar.\u003c/p\u003e\n\u003cp\u003e\u003cimg src="/img/3.2/Visual_drag.png" alt="Visual_drag"\u003e{: class=\u0026ldquo;center\u0026rdquo;}\u003c/p\u003e\n\u003cp\u003eOn the positioning mode, you can simply click-and-drag subtitles across the\nvideo surface by dragging their anchor (the square). They will be positioned\nwhere you release them with the \u003ca href="/docs/3.2/en/ass_tags/#setposition"\u003e\\pos\u003c/a\u003e command.\u003c/p\u003e\n\u003cp\u003eOn the movement mode, there is another anchor, the end-of-movement anchor,\nwhich is represented by a circle. There will be an arrow pointing from the\nstart-of-movement to the end-of-movement anchor. In order to set the times\nwhere the movement will start or end, move the corresponding anchor on the time\nwhere you want the subtitle to be at that anchor. For example, if you want\nmovement to start at 5000 milliseconds after the start of the line, seek the\nvideo to 5000 milliseconds after the start of the line, and drag the start\nanchor there. The same goes for the end-of-movement anchor.\u003c/p\u003e\n\u003cp\u003eIf your line has an origin point specified, you will see a third anchor,\nrepresented by a triangle, connected to the square anchor by a dotted line. You\ncan also drag this to affect the origin position. This same anchor will be\nvisible in the two rotation tools.\u003c/p\u003e\n\u003cp\u003eIf shift is held down while dragging an anchor, the drag will be limited to\nonly altering the X or Y coordinate of the anchor (whichever would be changed\nmore).\u003c/p\u003e\n\u003cp\u003eMultiple anchors can be selected at once by holding down ctrl and clicking on\nthe anchors which you want to add or remove from the selection. All selected\nanchors are moved when one is dragged.\u003c/p\u003e\n\u003cp\u003eDouble-clicking on a spot with no anchors will move the active anchor to that\nposition, similarly to double-clicking in the crosshair tool. If alt is held\ndown, all other selected anchors are shifted relative to the active anchor.\u003c/p\u003e\n\u003ch3 id="rotate-on-z-axis"\u003eRotate on Z axis\u003c/h3\u003e\n\u003cp\u003eOn this mode, you will see a circle centered around the subtitle\u0026rsquo;s pivot\n(either it\u0026rsquo;s position, or the origin point, if defined). The circle is\nsurrounded by 6 arcs that help mark and measure angles.\u003c/p\u003e\n\u003cp\u003e\u003cimg src="/img/3.2/Visual_rotate_1.png" alt="Visual_rotate_1"\u003e{: class=\u0026ldquo;center\u0026rdquo;}\u003c/p\u003e\n\u003cp\u003eThere are two functionalities in this mode. You can either drag the origin\npoint (the triangle at the center of the circle) to move it (and insert a\n\u003ca href="/docs/3.2/en/ass_tags/#rotationorigin"\u003e\\org\u003c/a\u003e tag, if none exists), or you can click and\ndrag anywhere else to rotate the line.\u003c/p\u003e\n\u003cp\u003eYou will notice that there is a line connecting the center of the circle to the\nmouse cursor. When you click and drag, the subtitle line rotate following that\nline, that is, you must rotate the cursor around the center to rotate the line.\nJust release the mouse to finish positioning. You can also use the ctrl key to\nlimit the rotation to increments of 30 degrees.\u003c/p\u003e\n\u003cp\u003eIf the origin is far from the center, you will see a little helper line\nindicating where the center of the subtitles will be positioned as you rotate\nit.\u003c/p\u003e\n\u003cp\u003eIf multiple lines are selected, all selected lines are set to the new rotation\n(and not rotated relative to each other as in the drag and crosshair tools).\u003c/p\u003e\n\u003cp\u003e\u003cimg src="/img/3.2/Visual_rotate_2.png" alt="Visual_rotate_2"\u003e{: class=\u0026ldquo;center\u0026rdquo;}\u003c/p\u003e\n\u003ch3 id="rotate-on-xy-axes"\u003eRotate on XY axes\u003c/h3\u003e\n\u003cp\u003eThis mode is somewhat similar to the previous mode, although there are a few\nimportant differences. Since this rotates on the two screen axes, the rotation\nis three-dimensional, and therefore harder to visualize.\u003c/p\u003e\n\u003cp\u003eIn order to make this easier, there is a grid representing the plane in which\nthe subtitles lie, and you rotate that grid. There are also three arrows\npointing from the center, indicating the direction and orientation of the three\naxes.\u003c/p\u003e\n\u003cp\u003e\u003cimg src="/img/3.2/Visual_rotate_xy.png" alt="Visual_rotate_xy"\u003e{: class=\u0026ldquo;center\u0026rdquo;}\u003c/p\u003e\n\u003cp\u003eTo use this tool, simply hold the mouse button anywhere on the screen and move\nit. As you move it left and right, it will rotate the line on the Y axis, and\nas you move it up and down, it will rotate the line on the X axis.\u003c/p\u003e\n\u003cp\u003eIf you hold down the shift key while rotating, the rotation will be limited to\nonly one of the two axes - whichever has the greatest movement. If you hold\ndown the ctrl key, rotation will happen in steps of 30 degrees.\u003c/p\u003e\n\u003cp\u003eIf multiple lines are selected, all selected lines are set to the new rotation\n(and not rotated relative to each other as in the drag and crosshair tools).\u003c/p\u003e\n\u003cp\u003eAs with the Z rotation tool, you can also drag the origin anchor here.\u003c/p\u003e\n\u003ch3 id="scale"\u003eScale\u003c/h3\u003e\n\u003cp\u003eThis is the simplest tool, and allows you to scale subtitles on the X and Y\naxes. It will show one bar for each axis, showing not only the 100% size, but\nalso the current scale.\u003c/p\u003e\n\u003cp\u003e\u003cimg src="/img/3.2/Visual_scale.png" alt="Visual_scale"\u003e{: class=\u0026ldquo;center\u0026rdquo;}\u003c/p\u003e\n\u003cp\u003eTo use this tool, simply hold down the mouse button and drag the mouse up and\ndown (to scale on the Y axis) or left and right (to scale on the X axis). You\ncan hold down the shift key to limit scaling to the axis where the biggest\nchange happened, and ctrl to limit it to increments of 25%.\u003c/p\u003e\n\u003ch3 id="rectangular-clip"\u003eRectangular clip\u003c/h3\u003e\n\u003cp\u003eThe rectangular clip tool allows you to clip the subtitles so that nothing\nOUTSIDE an axis-aligned rectangle can be displayed (in essence, the\n\u003ccode\u003e\\clip(x1,y1,x2,y2)\u003c/code\u003e tag).\u003c/p\u003e\n\u003cp\u003e\u003cimg src="/img/3.2/Visual_clip.png" alt="Visual_clip"\u003e{: class=\u0026ldquo;center\u0026rdquo;}\u003c/p\u003e\n\u003cp\u003eThere are two ways to use this tool. You can either click and grab one of the\nfour vertices of the rectangle, to resize an already-existing clip, or you can\nclick-and-drag in empty space to create a new rectangle from scratch. The areas\nthat will be invisible will be darkened.\u003c/p\u003e\n\u003ch3 id="vectorial-clip"\u003eVectorial clip\u003c/h3\u003e\n\u003cp\u003eSimilarly to the last tool, the vectorial clip tool allows you to draw an area,\nso that nothing outside it will be rendered. The difference, however, is that\nthis area can have any arbitrary shape defined by a path of lines and bézier\ncurves.\u003c/p\u003e\n\u003cp\u003e\u003cimg src="/img/3.2/Visual_vector_clip.png" alt="Visual_vector_clip"\u003e{: class=\u0026ldquo;center\u0026rdquo;}\u003c/p\u003e\n\u003cp\u003eThis mode has 8 sub-tools:\u003c/p\u003e\n\u003cp\u003e\u003cimg src="/img/3.2/Visual_vector_toolbar.png" alt="Visual_vector_toolbar"\u003e{: class=\u0026ldquo;center\u0026rdquo;}\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eDrag - Allows you to drag a control point\u003c/li\u003e\n\u003cli\u003eInsert line - Allows you to insert a straight line from the last point to\nthe current mouse position by clicking the point.\u003c/li\u003e\n\u003cli\u003eInsert bézier bicubic curve - The same as above, but it instead inserts a\nbicubic curve. You can then use the two control points to adjust the shape\nof the curve.\u003c/li\u003e\n\u003cli\u003eConvert between line and curve - Click on a line segment or bicubic curve\nto convert it to the other type.\u003c/li\u003e\n\u003cli\u003eSplit curve - Click on a line segment or bicubic curve to split it in\ntwo, at the marked point.\u003c/li\u003e\n\u003cli\u003eRemove point - Click on a point to delete it.\u003c/li\u003e\n\u003cli\u003eFreehand shape - Click and drag with the mouse over the video and move\nthe mouse to draw a freehand shape composed of line segments. This shape\nwill automatically be closed, with the last point connecting to the first.\u003c/li\u003e\n\u003cli\u003eFreehand smooth shape - Same as above, but the shape will be smoothed\nwith bicubic curves.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eAs with the drag tool, multiple control points can be selected at one by\nctrl-clicking on the anchors to be added or removed from the selection. By\ndefault all control points are selected; to deselect them all click on a\nblank spot when in Drag mode. Multiple control points can be selected at once\nby clicking and dragging in move mode to perform a box selection.\u003c/p\u003e\n'},{id:18,href:"/docs/3.2/en/ass_tags/",title:"ASS Override Tags",description:null,content:'\u003cp\u003eThe following is a list of every tag supported by the Advanced Substation\nAlpha format. This is basically a detailed version of ass-quickref.txt. See\nthe \u003ca href="/docs/3.2/en/visual_typesetting/"\u003etutorial\u003c/a\u003e for an introduction to typesetting,\nusing some basic tags.\u003c/p\u003e\n\u003ch2 id="special-characters"\u003eSpecial characters\u003c/h2\u003e\n\u003cp\u003eThe following tags are written in the middle of the text, and not inside\noverride blocks (i.e. not between { and }).\u003c/p\u003e\n\u003cp\u003e{::template name=\u0026ldquo;tag_def_box\u0026rdquo; title=\u0026ldquo;Soft line break\u0026rdquo; id=\u0026quot;\\n\u0026quot;}\\n{:/}\nInsert a forced line break, but only when in wrapping mode 2. (See\n\u003ca href="/docs/3.2/en/ass_tags/#wrapstyle"\u003ethe \\q tag\u003c/a\u003e). Note that this is a lowercase n.\u003c/p\u003e\n\u003cp\u003eIn all other wrapping modes, this is replaced by a regular space. This is\nrarely (if ever) actually useful. If you\u0026rsquo;re not sure whether you want this or\n\\N, you probably want \\N.\u003c/p\u003e\n\u003cp\u003e{::template name=\u0026ldquo;tag_def_box\u0026rdquo; title=\u0026ldquo;Hard line break\u0026rdquo; id=\u0026quot;\\N\u0026quot;}\\N{:/}\nInsert a forced line break, regardless of wrapping mode. Note that this is an\nuppercase N.\u003c/p\u003e\n\u003cp\u003e{::template name=\u0026ldquo;tag_def_box\u0026rdquo; title=\u0026ldquo;Hard space\u0026rdquo; id=\u0026quot;\\h\u0026quot;}\\h{:/}\nInsert a non-breaking \u0026ldquo;hard\u0026rdquo; space. The line will never break automatically\nright before or after a hard space, and hard spaces are not folded when they\nappear at the start or end of a displayed line.\u003c/p\u003e\n\u003ch2 id="override-tags"\u003eOverride tags\u003c/h2\u003e\n\u003cp\u003eOverride tags must appear within override blocks, which begin with { and end\nwith }. Any unrecognized text within override blocks is silently ignored, so\nthey are also commonly used for inline comments. Mixing comments and override\ntags in the same override block is not recommended.\u003c/p\u003e\n\u003cp\u003eTags fall into two general categories: those which set a property of the line\nitself, and those which modifiy only the text following them. \u003ccode\u003e\\pos\u003c/code\u003e, \u003ccode\u003e\\move\u003c/code\u003e,\n\u003ccode\u003e\\clip\u003c/code\u003e, \u003ccode\u003e\\iclip\u003c/code\u003e, \u003ccode\u003e\\org\u003c/code\u003e, \u003ccode\u003e\\fade\u003c/code\u003e and \u003ccode\u003e\\fad\u003c/code\u003e are those in the first category;\nall others are in the second. Tags in the first category should appear at most\nonce in a line, and where in the line they appear is unimportant. In addition,\nsome of them are mutally exclusive: \u003ccode\u003e\\pos\u003c/code\u003e and \u003ccode\u003e\\move\u003c/code\u003e; \u003ccode\u003e\\clip\u003c/code\u003e and \u003ccode\u003e\\iclip\u003c/code\u003e;\n\u003ccode\u003e\\fad\u003c/code\u003e and \u003ccode\u003e\\fade\u003c/code\u003e. The result of inluding multiple instances of these tags or\nmutally exclusive tags will vary between renderers and is not recommended.\u003c/p\u003e\n\u003cp\u003eTags in the second category modify all text after the tag until the end of the\nline or until the property is re-overridden by another tag.\u003c/p\u003e\n\u003cp\u003eOverride tags always follow the same form: They start with a backslash\u003cbr\u003e\ncharacter, then a name, and after the name the parameter to the tag. If the\nparameter is omitted, the default value from the line\u0026rsquo;s style is used.\u003c/p\u003e\n\u003cp\u003eSome tags are \u0026ldquo;complex\u0026rdquo; and take more than one parameter. In these cases,\nparameters are put inside parentheses with commas between the parameters.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eNote on typography:\u003c/strong\u003e\nOn this page, everything written in \u003cem\u003eitalics\u003c/em\u003e with \u003ccode\u003e\u0026lt;\u003c/code\u003e angle brackets \u003ccode\u003e\u0026gt;\u003c/code\u003e\naround it is a parameter and you must enter a value instead of it. The angle\nbrackets are not part of the value you should enter. Use the examples as a\nguide to how the tags should be entered. In general, the same rules apply to\nall tags in how they look.\u003c/p\u003e\n\u003cp\u003e{::template name=\u0026ldquo;tag_def_box\u0026rdquo; title=\u0026ldquo;Italics\u0026rdquo; id=\u0026quot;\\i\u0026quot;}\\i1\u003cbr\u003e\\i0{:/}\nSwitch \u003cem\u003eitalics\u003c/em\u003e text on or off. Use \u003ccode\u003e\\i1\u003c/code\u003e to enable italics for the following\ntext and \u003ccode\u003e\\i0\u003c/code\u003e to disable italics again.\u003c/p\u003e\n\u003cp\u003e{::template name=\u0026ldquo;tag_def_box\u0026rdquo; title=\u0026ldquo;Bold\u0026rdquo; id=\u0026quot;\\b\u0026quot;}\n\\b1\n\\b0\n\\b\u003ci\u003e\u0026lt;weight\u0026gt;\u003c/i\u003e\n{:/}\nSwitch \u003cstrong\u003eboldface\u003c/strong\u003e text on or off. Use \u003ccode\u003e\\b1\u003c/code\u003e to enable boldface for the\nfollowing text and \u003ccode\u003e\\b0\u003c/code\u003e to disable boldface again.\u003c/p\u003e\n\u003cp\u003eThe \u003ccode\u003e\\b\u003ci\u003e\u0026lt;weight\u0026gt;\u003c/i\u003e\u003c/code\u003e form allows you to specify an\nexplicit weight to use. Note that most fonts only support one or two weights\nso you rarely need to use this. Font weights are multiples of 100, such that\n100 is the lowest, 400 is \u0026ldquo;normal\u0026rdquo;, 700 is \u0026ldquo;bold\u0026rdquo; and 900 is the heaviest.\u003c/p\u003e\n\u003cp\u003e{::template name=\u0026ldquo;examplebox\u0026rdquo;}\u003c/p\u003e\n\u003cpre\u003eI am {\\b1}not[\\b0} amused.\u003c/pre\u003e\r\n\u003cp\u003eThe word \u0026ldquo;not\u0026rdquo; is written in boldface.\n{:/}\u003c/p\u003e\n\u003cp\u003e{::template name=\u0026ldquo;examplebox\u0026rdquo;}\u003c/p\u003e\n\u003cpre\u003e{\\b100}How {\\b300}bold {\\b500}can {\\b700}you {\\b900}get?\u003c/pre\u003e\r\n\u003cp\u003eThe words are written with increasingly greater weight. Note that most fonts\ndo not have more than one or two different weights and you will only be able\nto see \u0026ldquo;not bold\u0026rdquo; and \u0026ldquo;bold\u0026rdquo; in that case.\n{:/}\u003c/p\u003e\n\u003cp\u003e{::template name=\u0026ldquo;tag_def_box\u0026rdquo; title=\u0026ldquo;Underline\u0026rdquo; id=\u0026quot;\\u\u0026quot;}\\u1\u003cbr\u003e\\u0{:/}\nSwitch \u003cu\u003eunderlined\u003c/u\u003e text on or off. Use \u003ccode\u003e\\u1\u003c/code\u003e to enable underlining for\nthe following text and \u003ccode\u003e\\u0\u003c/code\u003e to disable underlining again.\u003c/p\u003e\n\u003cp\u003e{::template name=\u0026ldquo;tag_def_box\u0026rdquo; title=\u0026ldquo;Strikeout\u0026rdquo; id=\u0026quot;\\s\u0026quot;}\\s1\u003cbr\u003e\\s0{:/}\nSwitch \u003cs\u003estriked out\u003c/s\u003e text on or off. Use \u003ccode\u003e\\s1\u003c/code\u003e to enable strikeout for\nthe following text and \u003ccode\u003e\\s0\u003c/code\u003e to disable strikeout again.\u003c/p\u003e\n\u003cp\u003e{::template name=\u0026ldquo;tag_def_box\u0026rdquo; title=\u0026ldquo;Border size\u0026rdquo; id=\u0026quot;\\bord\u0026quot;}\\bord\u003ci\u003e\u0026lt;size\u0026gt;\u003c/i\u003e{:/}\nChange the width of the border around the text. Set the size to 0 (zero) to\ndisable the border entirely.\u003c/p\u003e\n\u003cp\u003eIf \u0026ldquo;scale border and shadow\u0026rdquo; (see \u003ca href="/docs/3.2/en/properties/"\u003escript properties\u003c/a\u003e) is\nenabled, the value is given in script resolution pixels, otherwise it is given\nin video resolution pixels (which means the border thickness will vary\ndepending on the resolution of the video on which the subtitles are rendered.)\u003c/p\u003e\n\u003cp\u003eThe value is not limited to whole integer pixels and can have decimal places.\nBorder width cannot be negative.\u003c/p\u003e\n\u003cp\u003e{::template name=\u0026ldquo;examplebox\u0026rdquo;}\u003c/p\u003e\n\u003cpre\u003e\\bord0\u003c/pre\u003e\r\n\u003cp\u003eDisable border entirely.\n{:/}\n{::template name=\u0026ldquo;examplebox\u0026rdquo;}\u003c/p\u003e\n\u003cpre\u003ebord3.7\u003c/pre\u003e\r\n\u003cp\u003eSet the border width to 3.7 pixels\n{:/}\u003c/p\u003e\n\u003cp\u003e{::template name=\u0026ldquo;tag_def_box\u0026rdquo; title=\u0026ldquo;Border size (extended)\u0026rdquo; id=\u0026quot;\\xbord\u0026quot;}\n\\xbord\u003ci\u003e\u0026lt;size\u0026gt;\u003c/i\u003e\n\\ybord\u003ci\u003e\u0026lt;size\u0026gt;\u003c/i\u003e\n{:/}\nUse the \u003ccode\u003e\\xbord\u003c/code\u003e \u003ccode\u003e\\ybord\u003c/code\u003e tags to set the border size in X and Y direction\nseparately. This can be useful for correcting the border size for anamorphic\nrendering of subtitles.\u003c/p\u003e\n\u003cp\u003eNote that if you use \u003ccode\u003e\\bord\u003c/code\u003e after \u003ccode\u003e\\xbord\u003c/code\u003e or \u003ccode\u003e\\ybord\u003c/code\u003e on a line, it will\noverride both of them.\u003c/p\u003e\n\u003cp\u003eYou can set the border width to 0 (zero) in one of the directions to entirely\ndisable border in that direction.\u003c/p\u003e\n\u003cp\u003e{::template name=\u0026ldquo;tag_def_box\u0026rdquo; title=\u0026ldquo;Shadow distance\u0026rdquo; id=\u0026quot;\\shad\u0026quot;}\\shad\u003ci\u003e\u0026lt;depth\u0026gt;\u003c/i\u003e{:/}\nSet the distance from the text to position the shadow. Set the depth to 0\n(zero) to disable shadow entirely. Works similar to \u003ca href="/docs/3.2/en/ass_tags/#bordersize"\u003e\\bord\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eThe shadow distance can not be negative with this tag.\u003c/p\u003e\n\u003cp\u003e{::template name=\u0026ldquo;tag_def_box\u0026rdquo; title=\u0026ldquo;Shadow distance (extended)\u0026rdquo; id=\u0026quot;\\xshad\u0026quot;}\n\\xshad\u003ci\u003e\u0026lt;depth\u0026gt;\u003c/i\u003e\n\\yshad\u003ci\u003e\u0026lt;depth\u0026gt;\u003c/i\u003e\n{:/}\nSet the distance from the text to position the shadow at, with X and Y\nposition set separately. Shadow is only disabled if both X and Y distance is\n0.\u003c/p\u003e\n\u003cp\u003eNote that unlike \\shad, you can set the distance negative with these tags to\nposition the shadow to the top or left of the text.\u003c/p\u003e\n\u003cp\u003e{::template name=\u0026ldquo;tag_def_box\u0026rdquo; title=\u0026ldquo;Blur edges\u0026rdquo; id=\u0026quot;\\be\u0026quot;}\n\\be0\n\\be1\n\\be\u003ci\u003e\u0026lt;strength\u0026gt;\u003c/i\u003e\n{:/}\nEnable or disable a subtle softening-effect for the edges of the text. The\neffect isn\u0026rsquo;t always very visible, but it can in some cases make the text look\nbetter. It is usually more visible at smaller text sizes.\u003c/p\u003e\n\u003cp\u003eBe aware that this tag blurs the \u003cem\u003eedges\u003c/em\u003e of the text, not everything. This\nmeans that if the text has a border (set with \u003ca href="/docs/3.2/en/ass_tags/#borderwidth"\u003e\\bord\u003c/a\u003e) the\nborder will be blurred, but if there is no border, the main text will be\nblurred instead.\u003c/p\u003e\n\u003cp\u003eIn the extended version, \u003cem\u003estrength\u003c/em\u003e is the number of times to apply the\nregular effect. Note that at high values the effect de-generates into\nnothingness, and generally isn\u0026rsquo;t very useful. For strong blurs, \u003ccode\u003e\\blur\u003c/code\u003e is\ngenerally more useful as a result. The \u003cem\u003estrength\u003c/em\u003e must be an integer number.\u003c/p\u003e\n\u003cp\u003e{::template name=\u0026ldquo;tag_def_box\u0026rdquo; title=\u0026ldquo;Blur edges (Gaussian kernel)\u0026rdquo; id=\u0026quot;\\blur\u0026quot;}\\blur\u003ci\u003e\u0026lt;strength\u0026gt;\u003c/i\u003e{:/}\nIn general, this has the same function as the \u003ca href="/docs/3.2/en/ass_tags/#bluredges"\u003e\u003ccode\u003e\\be\u003c/code\u003e\u003c/a\u003e tag, but\nuses a more advanced algorithm that looks better at high strengths. Unlike\n\u003ccode\u003e\\be\u003c/code\u003e, the \u003cem\u003estrength\u003c/em\u003e can be non-integer here. Set \u003cem\u003estrength\u003c/em\u003e to 0 (zero) to\ndisable the effect. Be careful, setting \u003cem\u003estrength\u003c/em\u003e too high can take a lot of\nCPU time to render.\u003c/p\u003e\n\u003cp\u003eBe aware that this tag blurs the \u003cem\u003eedges\u003c/em\u003e of the text, not everything. This\nmeans that if the text has a border (set with \u003ca href="/docs/3.2/en/ass_tags/#borderwidth"\u003e\u003ccode\u003e\\bord\u003c/code\u003e\u003c/a\u003e) the\nborder will be blurred, but if there is no border, the main text will be\nblurred instead.\u003c/p\u003e\n\u003cp\u003e{::template name=\u0026ldquo;tag_def_box\u0026rdquo; title=\u0026ldquo;Font name\u0026rdquo; id=\u0026quot;\\fn\u0026quot;}\\fn\u003ci\u003e\u0026lt;name\u0026gt;\u003c/i\u003e{:/}\nSet the font face to use for the following text. There should be no space\nbetween \u003ccode\u003e\\fn\u003c/code\u003e and the font name, and you should not put parentheses or similar\naround the font name either.\u003c/p\u003e\n\u003cp\u003e{::template name=\u0026ldquo;examplebox\u0026rdquo;}\u003c/p\u003e\n\u003cpre\u003e\\fnArial\u003c/pre\u003e\r\n\u003cp\u003eThe text following this tag will be in Arial font.\n{:/}\n{::template name=\u0026ldquo;examplebox\u0026rdquo;}\u003c/p\u003e\n\u003cpre\u003e\\fnTimes New Roman\u003c/pre\u003e\r\n\u003cp\u003eThe text following this tag will be in Times New Roman font.\n{:/}\u003c/p\u003e\n\u003cp\u003e{::template name=\u0026ldquo;tag_def_box\u0026rdquo; title=\u0026ldquo;Font size\u0026rdquo; id=\u0026quot;\\fs\u0026quot;}\\fs\u003ci\u003e\u0026lt;size\u0026gt;\u003c/i\u003e{:/}\nSet the size of the font. The size specified is the height in script pixels,\nso at font size 40 one line of text is 40 pixels tall. (Technical note: it\u0026rsquo;s\nreally typographic (desktop publishing) points, not script pixels, but since\nthe rendering is always done at 72 DPI (as per the de facto standard), one\npoint ends up being exactly equal to one script resolution pixel.)\u003c/p\u003e\n\u003cp\u003eYou can only specify integer font sizes.\u003c/p\u003e\n\u003cp\u003e{::template name=\u0026ldquo;examplebox\u0026rdquo;}\u003c/p\u003e\n\u003cpre\u003e\\fs10\u003c/pre\u003e\r\n\u003cp\u003eThe following text will use a size 10 font.\n{:/}\u003c/p\u003e\n\u003cp\u003e{::template name=\u0026ldquo;tag_def_box\u0026rdquo; title=\u0026ldquo;Font scale\u0026rdquo; id=\u0026quot;\\fscx\u0026quot;}\n\\fscx\u003ci\u003e\u0026lt;scale\u0026gt;\u003c/i\u003e\n\\fscy\u003ci\u003e\u0026lt;scale\u0026gt;\u003c/i\u003e\n{:/}\nAdjust the size of the text in X (\u003ccode\u003e\\fscx\u003c/code\u003e or Y (\u003ccode\u003e\\fscy\u003c/code\u003e) direction. The\n\u003cem\u003escale\u003c/em\u003e given is in percent, so 100 means \u0026ldquo;original size\u0026rdquo;.\u003c/p\u003e\n\u003cp\u003eThis is not the same as setting the font size, as setting the size is subject\nto \u003ca href="http://en.wikipedia.org/wiki/Font_hinting"\u003efont hinting\u003c/a\u003e while scaling the\ntext modifies the text shape after hinting. As a result, this should always be\nused with \u003ccode\u003e\\t\u003c/code\u003e rather than \u003ccode\u003e\\fs\u003c/code\u003e, as animating changing font hinting is very\nrarely desirable.\u003c/p\u003e\n\u003cp\u003eThese tags also affect \u003ca href="/docs/3.2/en/ass_tags/#drawing-commands"\u003evector drawings\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eYou can use font scaling to correct for anamorphic rendering and to specify\ntext size more precisely than with \u003ca href="/docs/3.2/en/ass_tags/#fontsize"\u003e\\fs\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eNote that older versions of VSFitler will truncate non-integer scales.\u003c/p\u003e\n\u003cp\u003e{::template name=\u0026ldquo;examplebox\u0026rdquo;}\u003c/p\u003e\n\u003cpre\u003e\\fscx150\u003c/pre\u003e\r\n\u003cp\u003eMake the text 50% wider than normal.\n{:/}\n{::template name=\u0026ldquo;examplebox\u0026rdquo;}\u003c/p\u003e\n\u003cpre\u003e\\fscy50\u003c/pre\u003e\r\n\u003cp\u003eMake the text half height.\n{:/}\n{::template name=\u0026ldquo;examplebox\u0026rdquo;}\u003c/p\u003e\n\u003cpre\u003e\\fscx200\\fscy200\u003c/pre\u003e\r\n\u003cp\u003eMake the text double size.\n{:/}\u003c/p\u003e\n\u003cp\u003e{::template name=\u0026ldquo;tag_def_box\u0026rdquo; title=\u0026ldquo;Letter spacing\u0026rdquo; id=\u0026quot;\\fsp\u0026quot;}\\fsp\u003ci\u003e\u0026lt;spacing\u0026gt;\u003c/i\u003e{:/}\nChanges the spacing between the individual letters in the text. You can use\nthis to spread the text more out visually. The \u003cem\u003espacing\u003c/em\u003e is given in script\nresolution pixels.\u003c/p\u003e\n\u003cp\u003eSpacing can be negative and can have decimals.\u003c/p\u003e\n\u003cp\u003e{::template name=\u0026ldquo;tag_def_box\u0026rdquo; title=\u0026ldquo;Text rotation\u0026rdquo; id=\u0026quot;\\frx\u0026quot;}\n\\frx\u003ci\u003e\u0026lt;amount\u0026gt;\u003c/i\u003e\n\\fry\u003ci\u003e\u0026lt;amount\u0026gt;\u003c/i\u003e\n\\frz\u003ci\u003e\u0026lt;amount\u0026gt;\u003c/i\u003e\n\\fr\u003ci\u003e\u0026lt;amount\u0026gt;\u003c/i\u003e\n{:/}\nRotates the text along the X, Y or Z axis. The \u003ccode\u003e\\fr\u003c/code\u003e tag is a shortcut for \u003ccode\u003e\\frz\u003c/code\u003e.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eThe \u003cstrong\u003eX axis\u003c/strong\u003e runs horizontally on the screen. Rotating on it (with\npositive values) causes an effect where the top of the text moves farther\n\u0026ldquo;into\u0026rdquo; the screen while the bottom moves \u0026ldquo;out\u0026rdquo; of the screen.\u003c/li\u003e\n\u003cli\u003eThe \u003cstrong\u003eY axis\u003c/strong\u003e runs vertically on the screen. Rotating on it (with positive\nvalues) causes the text to rotate so that the left moves \u0026ldquo;outside\u0026rdquo; the\nscreen, when the right moves \u0026ldquo;into\u0026rdquo; the screen.\u003c/li\u003e\n\u003cli\u003eThe \u003cstrong\u003eZ axis\u003c/strong\u003e runs perpendicular to the screen. Rotating on it (with\npositive values) causes the text to rotate in 2D, counterclockwise (as\nstandard for degrees).\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThe rotation \u003cem\u003eamount\u003c/em\u003e is given in mathematical degrees, such that 360 degrees\nis a full rotation, and rotating any multiple of 360 is the same as not\nrotating. It is legal to specify negative rotation amounts, as well as amounts\nlarger than 360 degrees.\u003c/p\u003e\n\u003cp\u003eThe rotation is performed around the subtitle line origin point, this is\ndescribed with the \u003ca href="/docs/3.2/en/ass_tags/#rotationorigin"\u003e\\org\u003c/a\u003e tag.\u003c/p\u003e\n\u003cp\u003eThese tags also affect \u003ca href="/docs/3.2/en/ass_tags/#vectordrawings"\u003evector drawings\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003e{::template name=\u0026ldquo;examplebox\u0026rdquo;}\u003c/p\u003e\n\u003cpre\u003e\\frx45\u003c/pre\u003e\r\n\u003cp\u003eRotate the text 45 degrees on the X axis.\n{:/}\n{::template name=\u0026ldquo;examplebox\u0026rdquo;}\u003c/p\u003e\n\u003cpre\u003e\\fry-45\u003c/pre\u003e\r\n\u003cp\u003eRotate the text 45 degrees in opposite direction on the Y axis.\n{:/}\n{::template name=\u0026ldquo;examplebox\u0026rdquo;}\u003c/p\u003e\n\u003cpre\u003e\\frz180\u003c/pre\u003e\r\n\u003cp\u003eRotate the text 180 degrees on the Z axis, making it upside-down.\n{:/}\n{::template name=\u0026ldquo;examplebox\u0026rdquo;}\nThe following two rotations produce the same result:\u003c/p\u003e\n\u003cpre\u003e\\frz-30\r\n\\frz330\u003c/pre\u003e\r\n\u003cp\u003eThis is because 330 degrees is 30 degrees less than a full rotation of 360 degrees.\n{:/}\n{::template name=\u0026ldquo;examplebox\u0026rdquo;}\u003c/p\u003e\n\u003cpre\u003e\\t(\\frz3600)\u003c/pre\u003e\r\n\u003cp\u003ePerform an animation where the text performs 10 full revolutions on the Z axis. Also see the \u003ca href="/docs/3.2/en/ass_tags/#animatedtransform"\u003e\\t\u003c/a\u003e tag.\n{:/}\n{::template name=\u0026ldquo;examplebox\u0026rdquo;}\nThe following screenshots illustrate the effect of rotating on the different axes:\u003c/p\u003e\n\u003cp\u003e\u003cimg src="/img/3.2/Fr_sample01.jpg" alt="Fr_sample01"\u003e\u003c/p\u003e\n\u003cp\u003e\u003cimg src="/img/3.2/Fr_sample02.jpg" alt="Fr_sample02"\u003e\u003c/p\u003e\n\u003cp\u003e\u003cimg src="/img/3.2/Fr_sample03.jpg" alt="Fr_sample03"\u003e\n{:/}\u003c/p\u003e\n\u003cp\u003e{::template name=\u0026ldquo;tag_def_box\u0026rdquo; title=\u0026ldquo;Text shearing\u0026rdquo; id=\u0026quot;\\fax\u0026quot;}\n\\fax\u003ci\u003e\u0026lt;factor\u0026gt;\u003c/i\u003e\n\\fay\u003ci\u003e\u0026lt;factor\u0026gt;\u003c/i\u003e\n{:/}\nPerform a shearing (perspective distortion) transformation of the text. A\n\u003cem\u003efactor\u003c/em\u003e of 0 (zero) means no distortion.\u003c/p\u003e\n\u003cp\u003eUsually \u003cem\u003efactor\u003c/em\u003e will be a small number; values outside the range -2 to 2 are\nunlikely to have desireable results.\u003c/p\u003e\n\u003cp\u003eShearing is performed after rotation, on the rotated coordinates. The\ncoordinate system used for shearing is not affected by the \u003ca href="/docs/3.2/en/ass_tags/#rotationorigin"\u003erotation origin\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003e{::template name=\u0026ldquo;examplebox\u0026rdquo;}\n\u003cimg src="/img/3.2/shearing.png" alt="shearing"\u003e\n{:/}\u003c/p\u003e\n\u003cp\u003e{::template name=\u0026ldquo;tag_def_box\u0026rdquo; title=\u0026ldquo;Font encoding\u0026rdquo; id=\u0026quot;\\fe\u0026quot;}\\fe\u003ci\u003e\u0026lt;id\u0026gt;\u003c/i\u003e{:/}\nSet the Windows font encoding used to select the font mapping table used to\ntranslate Unicode codepoints to glyph indices in the font. For some fonts\nwithout a Unicode mapping table this might be required to get text in certain\nlanguages to work. For fonts that do have a Unicode mapping table, it might be\nused to pick regional variations, such as picking the correct glyph for a Han\nideogram that is different in Simplified Chinese, Traditional Chinese,\nJapanese and Korean.\u003c/p\u003e\n\u003cp\u003eSome common font encoding IDs are:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e0 - ANSI, Windows CP-1252 for Western-European languages.\u003c/li\u003e\n\u003cli\u003e1 - Default, depends on the configuration of the user\u0026rsquo;s system, but also\nallows the font sub-system to dynamically pick a different mapping table in\nsome circumstances.\u003c/li\u003e\n\u003cli\u003e2 - Symbol, codepoints in the 0-255 range are translated to per-font defined\nsymbol glyphs, this is used for fonts such as Wingdings.\u003c/li\u003e\n\u003cli\u003e128 - Shift-JIS, used for Japanese.\u003c/li\u003e\n\u003cli\u003e129 and 130, respectively Hangeul and Johab, two encoding schemes for Korean.\u003c/li\u003e\n\u003cli\u003e134 - GB2312, used for Simplified Chinese.\u003c/li\u003e\n\u003cli\u003e136 - BIG5, used for Traditional Chinese.\u003c/li\u003e\n\u003cli\u003e162 - Turkish.\u003c/li\u003e\n\u003cli\u003e163 - Vietnamese.\u003c/li\u003e\n\u003cli\u003e177 - Hebrew.\u003c/li\u003e\n\u003cli\u003e178 - Arabic.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e{::template name=\u0026ldquo;todo\u0026rdquo;}Is that really correct?{:/}\u003c/p\u003e\n\u003cp\u003eA more complete list can be seen the \u003ca href="/docs/3.2/en/styles/#thestyleeditor"\u003estyle editor\u003c/a\u003e\ndialog box.\u003c/p\u003e\n\u003cp\u003eIn ASS files stored in non-Unicode encodings, this tag also affects what\ncodepage the text following it should be interpreted in. Aegisub doesn\u0026rsquo;t\nsupport this use and some renderers might not support it either. It is\nrecommended you do not rely on this and instead always store your files in a\nUnicode encoding. (Aegisub stores files in Unicode UTF-8 by default.)\u003c/p\u003e\n\u003cp\u003e{::template name=\u0026ldquo;tag_def_box\u0026rdquo; title=\u0026ldquo;Set color\u0026rdquo; id=\u0026quot;\\c\u0026quot;}\n\\c\u0026amp;H\u003ci\u003e\u0026lt;bb\u0026gt;\u0026lt;gg\u0026gt;\u0026lt;rr\u0026gt;\u003c/i\u003e\u0026amp;\n\\1c\u0026amp;H\u003ci\u003e\u0026lt;bb\u0026gt;\u0026lt;gg\u0026gt;\u0026lt;rr\u0026gt;\u003c/i\u003e\u0026amp;\n\\2c\u0026amp;H\u003ci\u003e\u0026lt;bb\u0026gt;\u0026lt;gg\u0026gt;\u0026lt;rr\u0026gt;\u003c/i\u003e\u0026amp;\n\\3c\u0026amp;H\u003ci\u003e\u0026lt;bb\u0026gt;\u0026lt;gg\u0026gt;\u0026lt;rr\u0026gt;\u003c/i\u003e\u0026amp;\n\\4c\u0026amp;H\u003ci\u003e\u0026lt;bb\u0026gt;\u0026lt;gg\u0026gt;\u0026lt;rr\u0026gt;\u003c/i\u003e\u0026amp;\n{:/}\nSet the color of the following text. The \u003ccode\u003e\\c\u003c/code\u003e tag is an abbreviation of \u003ccode\u003e\\1c\u003c/code\u003e.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003e\\1c\u003c/code\u003e sets the primary fill color.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e\\2c\u003c/code\u003e sets the secondary fill color. This is only used for pre-highlight in\nstandard karaoke.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e\\3c\u003c/code\u003e sets the border color.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e\\4c\u003c/code\u003e sets the shadow color.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThe color codes are given in\n\u003ca href="http://en.wikipedia.org/wiki/Hexadecimal"\u003ehexadecimal\u003c/a\u003e in Blue Green Red\norder. Note that this is the opposite order of HTML color codes. Color codes\nmust always start with \u003ccode\u003e\u0026amp;H\u003c/code\u003e and end with \u003ccode\u003e\u0026amp;\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eThe Pick Color toolbar buttons \u003cimg src="/img/3.2/pick-color-toolbar-buttons.png" alt="pick-color-toolbar-buttons"\u003e can\nassist in picking colors and entering the color codes.\u003c/p\u003e\n\u003cp\u003e{::template name=\u0026ldquo;tag_def_box\u0026rdquo; title=\u0026ldquo;Set alpha\u0026rdquo; id=\u0026quot;\\alpha\u0026quot;}\n\\alpha\u0026amp;H\u003ci\u003e\u0026lt;aa\u0026gt;\u003c/i\u003e\n\\1a\u0026amp;H\u003ci\u003e\u0026lt;aa\u0026gt;\u003c/i\u003e\n\\2a\u0026amp;H\u003ci\u003e\u0026lt;aa\u0026gt;\u003c/i\u003e\n\\3a\u0026amp;H\u003ci\u003e\u0026lt;aa\u0026gt;\u003c/i\u003e\n\\4a\u0026amp;H\u003ci\u003e\u0026lt;aa\u0026gt;\u003c/i\u003e\n{:/}\nSet the alpha (transparency) of the text.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003e\\alpha\u003c/code\u003e sets the alpha of all components at once.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e\\1a\u003c/code\u003e sets the primary fill alpha.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e\\2a\u003c/code\u003e sets the secondary fill alpha. This is only used for pre-highlight in\nstandard karaoke.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e\\3a\u003c/code\u003e sets the border alpha.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e\\4a\u003c/code\u003e sets the shadow alpha.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eAn alpha of 00 (zero) means opaque/fully visible, and an alpha of FF (ie. 255\nin decimal) is fully transparent/invisible.\u003c/p\u003e\n\u003cp\u003e{::template name=\u0026ldquo;examplebox\u0026rdquo;}\u003c/p\u003e\n\u003cpre\u003e\\alpha\u0026H80\u0026\u003c/pre\u003e\r\n\u003cp\u003eSet the alpha of all components to hexadecimal 80, decimal 128, making the\ntext 50% transparent in general.\n{:/}\n{::template name=\u0026ldquo;examplebox\u0026rdquo;}\u003c/p\u003e\n\u003cpre\u003e\\1a\u0026HFF\u0026\u003c/pre\u003e\r\n\u003cp\u003eSet the primary fill alpha to hexadecimal FF, decimal 255, making it invisible\nand effectively leaving only the border and shadow.\n{:/}\u003c/p\u003e\n\u003cp\u003e{::template name=\u0026ldquo;tag_def_box\u0026rdquo; title=\u0026ldquo;Line alignment\u0026rdquo; id=\u0026quot;\\an\u0026quot;}\\an\u003ci\u003e\u0026lt;pos\u0026gt;\u003c/i\u003e{:/}\nSpecify the alignment of the line. The alignment specifies the position of the\nline when no \u003ca href="/docs/3.2/en/ass_tags/#setposition"\u003eposition override\u003c/a\u003e or\n\u003ca href="/docs/3.2/en/ass_tags/#movement"\u003emovement\u003c/a\u003e is in effect, and otherwise specifies the\nanchor point of positioning and rotation.\u003c/p\u003e\n\u003cp\u003eThe \u003ccode\u003e\\an\u003c/code\u003e tag uses \u0026ldquo;numpad\u0026rdquo; values for the \u003cem\u003epos\u003c/em\u003e, ie. the alignment values\ncorrespond to the positions of the digits on the numeric keypad on a regular\nkeyboard:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eBottom left\u003c/li\u003e\n\u003cli\u003eBottom center\u003c/li\u003e\n\u003cli\u003eBottom right\u003c/li\u003e\n\u003cli\u003eMiddle left\u003c/li\u003e\n\u003cli\u003eMiddle center\u003c/li\u003e\n\u003cli\u003eMiddle right\u003c/li\u003e\n\u003cli\u003eTop left\u003c/li\u003e\n\u003cli\u003eTop center\u003c/li\u003e\n\u003cli\u003eTop right\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e{::template name=\u0026ldquo;tag_def_box\u0026rdquo; title=\u0026ldquo;Line alignment (legacy)\u0026rdquo; id=\u0026quot;\\a\u0026quot;}\\a\u003ci\u003e\u0026lt;pos\u0026gt;\u003c/i\u003e{:/}\nSpecify the alignment of the line using legacy alignment codes from SubStation\nAlpha. This tag is supported but considered deprecated; you should usually use\n\u003ccode\u003e\\an\u003c/code\u003e in new scripts instead, as it is more intuitive.\u003c/p\u003e\n\u003cp\u003eThe exception is that \u003ccode\u003e\\a6\u003c/code\u003e should be used for lazy sign translating, because\nif you\u0026rsquo;re going to be lazy you should do it right and save the extra character.\u003c/p\u003e\n\u003cp\u003eCalculate \u003cem\u003epos\u003c/em\u003e as follows: Use 1 for left-alignment, 2 for center alignment\nand 3 for right-alignment. If you want sub-titles you\u0026rsquo;re done. To get\ntop-titles, add 4 to the number, to get mid-titles add 8 to the number:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e1: Bottom left\u003c/li\u003e\n\u003cli\u003e2: Bottom center\u003c/li\u003e\n\u003cli\u003e3: Bottom right\u003c/li\u003e\n\u003cli\u003e5: Top left\u003c/li\u003e\n\u003cli\u003e6: Top center\u003c/li\u003e\n\u003cli\u003e7: Top right\u003c/li\u003e\n\u003cli\u003e9: Middle left\u003c/li\u003e\n\u003cli\u003e10: Middle center\u003c/li\u003e\n\u003cli\u003e11: Middle right\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e{::template name=\u0026ldquo;tag_def_box\u0026rdquo; title=\u0026ldquo;Karaoke effect\u0026rdquo; id=\u0026quot;\\k\u0026quot;}\n\\k\u003ci\u003e\u0026lt;duration\u0026gt;\u003c/i\u003e\n\\K\u003ci\u003e\u0026lt;duration\u0026gt;\u003c/i\u003e\n\\kf\u003ci\u003e\u0026lt;duration\u0026gt;\u003c/i\u003e\n\\ko\u003ci\u003e\u0026lt;duration\u0026gt;\u003c/i\u003e\n{:/}\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e\u003cem\u003ePlease note that these tags alone only create some very specific effects\nand all other effects are created with a combination of multiple different\ntags.\u003c/em\u003e\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eThe \u003ccode\u003e\\k\u003c/code\u003e family of tags mark up subtitles for karaoke effects by specifying\nthe duration of each syllable. You place a \u003ccode\u003e\\k\u003c/code\u003e tag before each syllable in\nthe line.\u003c/p\u003e\n\u003cp\u003eThe \u003cem\u003eduration\u003c/em\u003e is given in centiseconds, ie. a \u003cem\u003eduration\u003c/em\u003e of 100 is equivalent\nto 1 second. You generally don\u0026rsquo;t enter \u003ccode\u003e\\k\u003c/code\u003e tags manually but rather use\nkaraoke timing tools such as \u003ca href="/docs/3.2/en/tutorials/#karaoketiming"\u003eAegisub\u0026rsquo;s karaoke mode\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eThe different \u003ccode\u003e\\k\u003c/code\u003e tags create various effects:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003e\\k\u003c/code\u003e: Before highlight, the syllable is filled with the secondary color and\nalpha. When the syllable starts, the fill is instantly changed to use\nprimary color and alpha.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e\\K\u003c/code\u003e and \u003ccode\u003e\\kf\u003c/code\u003e: These two are identical. Note that \u003ccode\u003e\\K\u003c/code\u003e is an uppercase K\nand is different from lowercase \u003ccode\u003e\\k\u003c/code\u003e. The syllable fill starts out secondary\ncolor, when the syllable starts, the fill changes from secondary to primary\nwith a sweep from left to right, so the sweep ends when the syllable time is\nover.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e\\ko\u003c/code\u003e: Similar to \u003ccode\u003e\\k\u003c/code\u003e, except that before highlight, the border/outline of\nthe syllable is removed, and appears instantly when the syllable starts.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cem\u003eNote: There is an additional karaoke tag, \u003ccode\u003e\\kt\u003c/code\u003e, which is very different from\nthe other ones. It is rarely useful and Aegisub does not support that tag, so\nit is not documented.\u003c/em\u003e\u003c/p\u003e\n\u003cp\u003e{::template name=\u0026ldquo;tag_def_box\u0026rdquo; title=\u0026ldquo;Wrap style\u0026rdquo; id=\u0026quot;\\q\u0026quot;}\\q\u003ci\u003e\u0026lt;style\u0026gt;\u003c/i\u003e{:/}\nDetermine how line breaking is applied to the subtitle line. The following\n_style_s are available:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e0: Smart wrapping, make each line approximately equally long, but top line\nwider when equal width is impossible. Only \u003ccode\u003e\\N\u003c/code\u003e forces line breaks.\u003c/li\u003e\n\u003cli\u003e1: End-of-line wrapping, fill as much text in a line as possible, then break\nto next line. Only \u003ccode\u003e\\N\u003c/code\u003e forces line breaks.\u003c/li\u003e\n\u003cli\u003e2: No word wrapping, wide lines will extend beyound the edges of the screen.\nBoth \u003ccode\u003e\\n\u003c/code\u003e and \u003ccode\u003e\\N\u003c/code\u003e force line breaks.\u003c/li\u003e\n\u003cli\u003e3: Smart wrapping, similar to style 0, but bottom lines are made wider.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e{::template name=\u0026ldquo;tag_def_box\u0026rdquo; title=\u0026ldquo;Reset style\u0026rdquo; id=\u0026quot;\\r\u0026quot;}\\r\u003cbr\u003e\\r\u003ci\u003e\u0026lt;style\u0026gt;\u003c/i\u003e{:/}\nReset the style. This cancels all style overrides in effect, including\n\u003ca href="/docs/3.2/en/ass_tags/#animatedtransform"\u003eanimations\u003c/a\u003e, for all following text.\u003c/p\u003e\n\u003cp\u003eThe first form that does not specify a \u003cem\u003estyle\u003c/em\u003e will reset to the style defined\nfor the entire line, while the second form, that specifies the name of a\n\u003cem\u003estyle\u003c/em\u003e, will reset the style to that specific style.\u003c/p\u003e\n\u003cp\u003e{::template name=\u0026ldquo;examplebox\u0026rdquo;}\u003c/p\u003e\n\u003cpre\u003e-Hey\\N{\\rAlternate}-Huh?\\N{\\r}-Who are you?\u003c/pre\u003e\r\n\u003cp\u003eAssuming the current line style is \u0026ldquo;Default\u0026rdquo;, this has first \u0026ldquo;Hey\u0026rdquo; in the\nDefault style, then follows on next line \u0026ldquo;Huh?\u0026rdquo; in the style \u0026ldquo;Alternate\u0026rdquo;, and\non the third line the style is reset to \u0026ldquo;Default\u0026rdquo; for the \u0026ldquo;Who are you?\u0026rdquo;\ntext.\n{:/}\u003c/p\u003e\n\u003cp\u003e{::template name=\u0026ldquo;tag_def_box\u0026rdquo; title=\u0026ldquo;Set position\u0026rdquo; id=\u0026quot;\\pos\u0026quot;}\\pos(\u003ci\u003e\u0026lt;X\u0026gt;\u003c/i\u003e,\u003ci\u003e\u0026lt;Y\u0026gt;\u003c/i\u003e){:/}\nSet the position of the line. The \u003cem\u003eX\u003c/em\u003e and \u003cem\u003eY\u003c/em\u003e coordinates must be integers and\nare given in the script resolution coordinate system. The meaning of \u003cem\u003eX\u003c/em\u003e and\n\u003cem\u003eY\u003c/em\u003e changes slightly depending on \u003ca href="/docs/3.2/en/ass_tags/#linealignment"\u003ealignment\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eThe alignment of the subtitle line is used as anchor point for the position.\nI.e. when you have a line with alignment top-left, the top-left corner of the\nsubtitle is placed at the coordinates given to \u003ccode\u003e\\pos\u003c/code\u003e, and for bottom-center\nalignment, the bottom center of the subtitle is placed at the coordinates\ngiven.\u003c/p\u003e\n\u003cp\u003e{::template name=\u0026ldquo;examplebox\u0026rdquo;}\nThe following screenshots illustrate the way alignment affects positioning.\nThe green cross marks the point (320,240) on the video.\u003c/p\u003e\n\u003cp\u003e\u003cimg src="/img/3.2/Pos_sample01.jpg" alt="Pos_sample01"\u003e\n\u003cimg src="/img/3.2/Pos_sample02.jpg" alt="Pos_sample02"\u003e\n\u003cimg src="/img/3.2/Pos_sample03.jpg" alt="Pos_sample03"\u003e\n{:/}\u003c/p\u003e\n\u003cp\u003e{::template name=\u0026ldquo;tag_def_box\u0026rdquo; title=\u0026ldquo;Movement\u0026rdquo; id=\u0026quot;\\move\u0026quot;}\n\\move(\u003ci\u003e\u0026lt;x1\u003c/i\u003e\u0026gt;,\u003ci\u003e\u0026lt;y1\u003c/i\u003e\u0026gt;,\u003ci\u003e\u0026lt;x2\u003c/i\u003e\u0026gt;,\u003ci\u003e\u0026lt;y2\u003c/i\u003e\u0026gt;)\n\\move(\u003ci\u003e\u0026lt;x1\u003c/i\u003e\u0026gt;,\u003ci\u003e\u0026lt;y1\u003c/i\u003e\u0026gt;,\u003ci\u003e\u0026lt;x2\u003c/i\u003e\u0026gt;,\u003ci\u003e\u0026lt;y2\u003c/i\u003e\u0026gt;,\u003ci\u003e\u0026lt;t1\u003c/i\u003e\u0026gt;,\u003ci\u003e\u0026lt;t2\u003c/i\u003e\u0026gt;)\n{:/}\nThe \u003ccode\u003e\\move\u003c/code\u003e tag works similar to \u003ca href="/docs/3.2/en/ass_tags/#setposition"\u003e\u003ccode\u003e\\pos\u003c/code\u003e\u003c/a\u003e in that it\npositions the subtitle line, the difference is that \u003ccode\u003e\\move\u003c/code\u003e makes the subtitle\nmove.\u003c/p\u003e\n\u003cp\u003eThe two versions of \u003ccode\u003e\\move\u003c/code\u003e differ in that one makes the movement occur over\nthe entire duration of the subtitle, while on the other you specify the time\nover which the movement occurs.\u003c/p\u003e\n\u003cp\u003eThe coordinates \u003cem\u003ex1\u003c/em\u003e, \u003cem\u003ey1\u003c/em\u003e, \u003cem\u003ex2\u003c/em\u003e and \u003cem\u003ey2\u003c/em\u003e are given in the script resolution\ncoordinate system, like \u003ccode\u003e\\pos\u003c/code\u003e. The subtitle starts out at point (\u003cem\u003ex1\u003c/em\u003e,\u003cem\u003ey1\u003c/em\u003e)\nand moves with constant speed so it ends up at (\u003cem\u003ex2\u003c/em\u003e,\u003cem\u003ey2\u003c/em\u003e).\n\u003ca href="/docs/3.2/en/ass_tags/#linealignment"\u003eAlignment\u003c/a\u003e influences movement coordinates the same\nway as it influences \u003ccode\u003e\\pos\u003c/code\u003e coordinates.\u003c/p\u003e\n\u003cp\u003eIn the second version, the times \u003cem\u003et1\u003c/em\u003e and \u003cem\u003et2\u003c/em\u003e are given in milliseconds, ie.\none thousandth of a second, and are relative to the start time of the\nsubtitle. For example, a \u003cem\u003et1\u003c/em\u003e value of 1500 means that the movement begins 1.5\nseconds (one and a half second) after the line has appeared on screen. When\nyou specify times for the movement, the position of the subtitle is as\nfollows:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eBefore \u003cem\u003et1\u003c/em\u003e, the subtitle is stationary at point (\u003cem\u003ex1\u003c/em\u003e,\u003cem\u003ey1\u003c/em\u003e).\u003c/li\u003e\n\u003cli\u003eBetween \u003cem\u003et1\u003c/em\u003e and \u003cem\u003et2\u003c/em\u003e, the subtitle moves with constant speed from (\u003cem\u003ex1\u003c/em\u003e,\u003cem\u003ey1\u003c/em\u003e) to (\u003cem\u003ex2\u003c/em\u003e,\u003cem\u003ey2\u003c/em\u003e).\u003c/li\u003e\n\u003cli\u003eAfter \u003cem\u003et2\u003c/em\u003e the subtitle is stationary at point (\u003cem\u003ex2\u003c/em\u003e,\u003cem\u003ey2\u003c/em\u003e).\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eNote that it is legal to have \u003cem\u003et1\u003c/em\u003e and \u003cem\u003et2\u003c/em\u003e specify times greater than the\nduration of the line, but it might not be very useful to do so. Specifying\nboth \u003cem\u003et1\u003c/em\u003e and \u003cem\u003et2\u003c/em\u003e as 0 (zero) is the same as using the first version of\n\u003ccode\u003e\\move\u003c/code\u003e, ie. the movement will occur from the start time of the line to the\nend time of the line.\u003c/p\u003e\n\u003cp\u003eThere are some things \u003cstrong\u003e\u003ccode\u003e\\move\u003c/code\u003e can not do\u003c/strong\u003e:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eNon-constant-speed movement is not possible. The movement can not, for\nexample, start out slow and end fast.\u003c/li\u003e\n\u003cli\u003eThere can only be one positioning or movement tag in a line. Putting both a\n\u003ccode\u003e\\pos\u003c/code\u003e and a \u003ccode\u003e\\move\u003c/code\u003e tag in a line will not work. It will also not work to\nput two or more \u003ccode\u003e\\move\u003c/code\u003e tags in a single line.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eIf you need to do do any of those two you will need to split the movement into\nsegments that are done on separate subtitle lines. (How to do this is outside\nthe scope of this page.)\u003c/p\u003e\n\u003cp\u003e{::template name=\u0026ldquo;examplebox\u0026rdquo;}\u003c/p\u003e\n\u003cpre\u003e\\move(100,150,300,350)\u003c/pre\u003e\r\n\u003cp\u003eWhen the line appears on screen, the subtitle is at (100,150). While the\nsubtitle is displayed, it moves at constant speed such that it will arrive at\npoint (300,350) at the same time it disappears.\n{:/}\n{::template name=\u0026ldquo;examplebox\u0026rdquo;}\u003c/p\u003e\n\u003cpre\u003e\\move(100,150,300,350,500,1500)\u003c/pre\u003e\r\n\u003cp\u003eThe line appears at (100,150). After the line has been displayed for half a\nsecond (500 milliseconds) it begins moving towards (300,350) such that it will\narrive at the point a second and a half (1500 milliseconds) after the line\nfirst appeared on screen.\n{:/}\u003c/p\u003e\n\u003cp\u003e{::template name=\u0026ldquo;tag_def_box\u0026rdquo; title=\u0026ldquo;Rotation origin\u0026rdquo; id=\u0026quot;\\org\u0026quot;}\\org(\u003ci\u003e\u0026lt;X\u0026gt;\u003c/i\u003e,\u003ci\u003e\u0026lt;Y\u0026gt;\u003c/i\u003e){:/}\nSet the origin point used for \u003ca href="/docs/3.2/en/ass_tags/#textrotation"\u003erotation\u003c/a\u003e. This\naffects all rotations of the line. The \u003cem\u003eX\u003c/em\u003e and \u003cem\u003eY\u003c/em\u003e coordinates are given in\ninteger script resolution pixels.\u003c/p\u003e\n\u003cp\u003eWhen there is no \u003ccode\u003e\\org\u003c/code\u003e tag in a line, the rotation origin is implicitly the\nsame as the \u003ca href="/docs/3.2/en/ass_tags/#setposition"\u003eposition anchor point\u003c/a\u003e. This means that\nthe rotation origin will move if the line moves and there is no origin set\nwith \u003ccode\u003e\\org\u003c/code\u003e. Note that you can \u003cem\u003enot\u003c/em\u003e animate the \u003ccode\u003e\\org\u003c/code\u003e tag, you are limited\nto a fixed origin if you use it.\u003c/p\u003e\n\u003cp\u003eIf the rotation origin is placed on the vanishing point in a 3D scene, 3D\nrotations of subtitle line will produce the correct perspective to match the\nscene.\u003c/p\u003e\n\u003cp\u003eIt\u0026rsquo;s perfectly possible (and occasionally useful) to place the origin point\nfar outside the actual image; if it is sufficiently far away, doing\nappropriately calculated small rotations will seem to move the text along a\nstraight (or almost straight) line through the image. This is somewhat hard to\ncontrol, but can be used to work around format limitations with \\move, such as\nthe inability to do accelerated moves or several moves per line.\u003c/p\u003e\n\u003cp\u003eThere can be at most one \u003ccode\u003e\\org\u003c/code\u003e tag in a single line, if you put more than one\nin a single line, only the first is used.\u003c/p\u003e\n\u003cp\u003e{::template name=\u0026ldquo;examplebox\u0026rdquo;}\u003c/p\u003e\n\u003cpre\u003e\\org(320,240)\u003c/pre\u003e\r\n\u003cp\u003eFix the rotation origin at point (320,240).\n{:/}\n{::template name=\u0026ldquo;examplebox\u0026rdquo;}\u003c/p\u003e\n\u003cpre\u003e\\org(10000,0)\u003c/pre\u003e\r\n\u003cp\u003ePlacing the rotation origin at a far away point allows you to use slight\n\u003ccode\u003e\\frz\u003c/code\u003e rotations to produce \u0026ldquo;jumping\u0026rdquo; effects; the text will move up or down\nwithout seeming to rotate.\n{:/}\u003c/p\u003e\n\u003cp\u003e{::template name=\u0026ldquo;tag_def_box\u0026rdquo; title=\u0026ldquo;Fade\u0026rdquo; id=\u0026quot;\\fad\u0026quot;}\\fad(\u003ci\u003e\u0026lt;fadein\u0026gt;\u003c/i\u003e,\u003ci\u003e\u0026lt;fadeout\u0026gt;\u003c/i\u003e){:/}\nProduce a fade-in and fade-out effect. The \u003cem\u003efadein\u003c/em\u003e and \u003cem\u003efadeout\u003c/em\u003e times are\ngiven in milliseconds, ie. 1000 means one second. You can specify \u003cem\u003efadein\u003c/em\u003e or\n\u003cem\u003efadeout\u003c/em\u003e as 0 (zero) to not have any fade effect on that end.\u003c/p\u003e\n\u003cp\u003eAdding a fade effect does not extend the duration of the line, rather the\nstart or end of the line\u0026rsquo;s display time is used for the fade effect. For this\nreason, you should be careful that \u003cem\u003efadein\u003c/em\u003e+\u003cem\u003efadeout\u003c/em\u003e is not greater than the\nduration of the line. For example, for a line displayed for 4 seconds, the sum\nof \u003cem\u003efadein\u003c/em\u003e+\u003cem\u003efadeout\u003c/em\u003e should not be greater than 4000.\u003c/p\u003e\n\u003cp\u003e{::template name=\u0026ldquo;examplebox\u0026rdquo;}\u003c/p\u003e\n\u003cpre\u003e\\fad(1200,250)\u003c/pre\u003e\r\n\u003cp\u003eFade in the line in the first 1.2 seconds it is to be displayed, and fade it\nout for the last one quarter second it is displayed.\n{:/}\u003c/p\u003e\n\u003cp\u003e{::template name=\u0026ldquo;tag_def_box\u0026rdquo; title=\u0026ldquo;Fade (complex)\u0026rdquo; id=\u0026quot;\\fade\u0026quot;}\\fade(\u003ci\u003e\u0026lt;a1\u003c/i\u003e\u0026gt;,\u003ci\u003e\u0026lt;a2\u003c/i\u003e\u0026gt;,\u003ci\u003e\u0026lt;a3\u003c/i\u003e\u0026gt;,\u003ci\u003e\u0026lt;t1\u003c/i\u003e\u0026gt;,\u003ci\u003e\u0026lt;t2\u003c/i\u003e\u0026gt;,\u003ci\u003e\u0026lt;t3\u003c/i\u003e\u0026gt;,\u003ci\u003e\u0026lt;t4\u003c/i\u003e\u0026gt;){:/}\nPerform a five-part fade using three alpha values \u003cem\u003ea1\u003c/em\u003e, \u003cem\u003ea2\u003c/em\u003e and \u003cem\u003ea3\u003c/em\u003e and four\ntimes \u003cem\u003et1\u003c/em\u003e, \u003cem\u003et2\u003c/em\u003e, \u003cem\u003et3\u003c/em\u003e and \u003cem\u003et4\u003c/em\u003e.\u003c/p\u003e\n\u003cp\u003eThe alpha values are given in \u003cem\u003edecimal\u003c/em\u003e and are between 0 and 255, with 0\nbeing fully visible and 255 being invisible. The time values are given in\nmilliseconds after the start of the line. All seven parameters are required.\n(For most common fade effects the \u003ccode\u003e[\\fad](/docs/3.2/en/ass_tags/#fade)\u003c/code\u003e tag works fine.)\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eBefore \u003cem\u003et1\u003c/em\u003e, the line has alpha \u003cem\u003ea1\u003c/em\u003e.\u003c/li\u003e\n\u003cli\u003eBetween \u003cem\u003et1\u003c/em\u003e and \u003cem\u003et2\u003c/em\u003e the line fades from alpha \u003cem\u003ea1\u003c/em\u003e to alpha \u003cem\u003ea2\u003c/em\u003e.\u003c/li\u003e\n\u003cli\u003eBetween \u003cem\u003et2\u003c/em\u003e and \u003cem\u003et3\u003c/em\u003e the line has alpha \u003cem\u003ea2\u003c/em\u003e constantly.\u003c/li\u003e\n\u003cli\u003eBetween \u003cem\u003et3\u003c/em\u003e and \u003cem\u003et4\u003c/em\u003e the line fades from alpha \u003cem\u003ea2\u003c/em\u003e to alpha \u003cem\u003ea3\u003c/em\u003e.\u003c/li\u003e\n\u003cli\u003eAfter \u003cem\u003et4\u003c/em\u003e the line has alpha \u003cem\u003ea3\u003c/em\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e{::template name=\u0026ldquo;examplebox\u0026rdquo;}\u003c/p\u003e\n\u003cpre\u003e\\fade(255,32,224,0,500,2000,2200)\u003c/pre\u003e\r\n\u003cp\u003eStarts invisible, fades to almost totally opaque, then fades to almost totally\ninvisible. First fade starts when the line starts and lasts 500 milliseconds.\nSecond fade starts 1500 milliseconds later, and lasts 200 milliseconds.\n{:/}\u003c/p\u003e\n\u003cp\u003e{::template name=\u0026ldquo;tag_def_box\u0026rdquo; title=\u0026ldquo;Animated transform\u0026rdquo; id=\u0026quot;\\t\u0026quot;}\n\\t(\u003ci\u003e\u0026lt;style modifiers\u0026gt;\u003c/i\u003e)\n\\t(\u003ci\u003e\u0026lt;accel\u0026gt;\u003c/i\u003e,\u003ci\u003e\u0026lt;style modifiers\u0026gt;\u003c/i\u003e)\n\\t(\u003ci\u003e\u0026lt;t1\u003c/i\u003e\u0026gt;,\u003ci\u003e\u0026lt;t2\u003c/i\u003e\u0026gt;,\u003ci\u003e\u0026lt;style modifiers\u0026gt;\u003c/i\u003e)\n\\t(\u003ci\u003e\u0026lt;t1\u003c/i\u003e\u0026gt;,\u003ci\u003e\u0026lt;t2\u003c/i\u003e\u0026gt;,\u003ci\u003e\u0026lt;accel\u0026gt;\u003c/i\u003e,\u003ci\u003e\u0026lt;style modifiers\u0026gt;\u003c/i\u003e)\n{:/}\nPerform a gradual, animated transformation from one style to another. The\n\u003cem\u003estyle modifiers\u003c/em\u003e are other override tags as specified in this reference. Only\na limited set of the override tags are animateable with \u003ccode\u003e\\t\u003c/code\u003e:\u003c/p\u003e\n\u003cp\u003e|\u0026mdash;\u0026mdash;\u0026ndash;|\u0026mdash;\u0026mdash;\u0026mdash;-|\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;|\u003c/p\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003eFont\u003c/th\u003e\n\u003cth\u003eGeometry\u003c/th\u003e\n\u003cth\u003eOther effects\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003e\\fs\u003c/td\u003e\n\u003ctd\u003e\\fscx\u003c/td\u003e\n\u003ctd\u003e\\bord\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\\fsp\u003c/td\u003e\n\u003ctd\u003e\\fscy\u003c/td\u003e\n\u003ctd\u003e\\xbord\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\\c\u003c/td\u003e\n\u003ctd\u003e\\frx\u003c/td\u003e\n\u003ctd\u003e\\ybord\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\\1c\u003c/td\u003e\n\u003ctd\u003e\\fry\u003c/td\u003e\n\u003ctd\u003e\\shad\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\\2c\u003c/td\u003e\n\u003ctd\u003e\\frz\u003c/td\u003e\n\u003ctd\u003e\\xshad\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\\3c\u003c/td\u003e\n\u003ctd\u003e\\fr\u003c/td\u003e\n\u003ctd\u003e\\yshad\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\\4c\u003c/td\u003e\n\u003ctd\u003e\\fax\u003c/td\u003e\n\u003ctd\u003e\\clip\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\\alpha\u003c/td\u003e\n\u003ctd\u003e\\fay\u003c/td\u003e\n\u003ctd\u003e\\iclip\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\\1a\u003c/td\u003e\n\u003ctd\u003e\u003c/td\u003e\n\u003ctd\u003e\\be\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\\2a\u003c/td\u003e\n\u003ctd\u003e\u003c/td\u003e\n\u003ctd\u003e\\blur\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\\3a\u003c/td\u003e\n\u003ctd\u003e\u003c/td\u003e\n\u003ctd\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\\4a\u003c/td\u003e\n\u003ctd\u003e\u003c/td\u003e\n\u003ctd\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u0026mdash;\u0026mdash;\u0026ndash;\u003c/td\u003e\n\u003ctd\u003e\u0026mdash;\u0026mdash;\u0026mdash;-\u003c/td\u003e\n\u003ctd\u003e\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\u003cp\u003e\u003cem\u003eNote: For \u003ccode\u003e\\clip\u003c/code\u003e and \u003ccode\u003e\\iclip\u003c/code\u003e, only the rectangle versions can be animated. The\nvector drawing versions cannot be animated.\u003c/em\u003e\u003c/p\u003e\n\u003cp\u003e\u003cem\u003eNote: Mixing \u003ccode\u003e\\clip\u003c/code\u003e and \u003ccode\u003e\\iclip\u003c/code\u003e in \u003ccode\u003e\\t\u003c/code\u003e tags has undesireable results.\u003c/em\u003e\u003c/p\u003e\n\u003cp\u003eThe \u003cem\u003et1\u003c/em\u003e and \u003cem\u003et2\u003c/em\u003e parameters specify the time interval to perform the\ntransformation over. In the versions without \u003cem\u003et1\u003c/em\u003e and \u003cem\u003et2\u003c/em\u003e the transformation\nis performed over the entire duration of the line. The times are given in\nmilliseconds and are relative to the start time of the line. (For the rest of\nthe description of \u003ccode\u003e\\t\u003c/code\u003e, \u003cem\u003et1\u003c/em\u003e and \u003cem\u003et2\u003c/em\u003e are assumed to be specified, or\nimplicitly be respectively 0 and the duration of the line.)\u003c/p\u003e\n\u003cp\u003eThe \u003cem\u003eaccel\u003c/em\u003e parameter can be used to make the animation non-linear and instead\nfollow an exponential curve. An \u003cem\u003eaccel\u003c/em\u003e parameter of 1 (one) causes the\nanimation speed to be linear. A value bewteen 0 and 1 causes the animation to\nstart fast and end slow. A value greater than 1 causes the animation to start\nslow and end fast. (For the mathematically inclined, the function is \u003cem\u003ey\u003c/em\u003e = \u003cem\u003ex\u003c/em\u003e\nwith \u003cem\u003ex\u003c/em\u003e ∈ [0;1] = (\u003cem\u003et\u003c/em\u003e-\u003cem\u003et1\u003c/em\u003e)/(\u003cem\u003et2\u003c/em\u003e-\u003cem\u003et1\u003c/em\u003e), \u003cem\u003et\u003c/em\u003e being the current time.)\u003c/p\u003e\n\u003cp\u003eBefore \u003cem\u003et1\u003c/em\u003e, the style is as all tags before the \u003ccode\u003e\\t\u003c/code\u003e tag specify. After \u003cem\u003et2\u003c/em\u003e\nthe style is as all tags before the \u003ccode\u003e\\t\u003c/code\u003e tag, and further overridden by the\ngiven \u003cem\u003estyle overrides\u003c/em\u003e. Between \u003cem\u003et1\u003c/em\u003e and \u003cem\u003et2\u003c/em\u003e the style is gradually animated\nbetween those two points, following the acceleration function described above.\u003c/p\u003e\n\u003cp\u003e{::template name=\u0026ldquo;examplebox\u0026rdquo;}\u003c/p\u003e\n\u003cpre\u003e{\\1c\u0026HFF0000\u0026\\t(\\1c\u0026H0000FF\u0026)}Hello!\u003c/pre\u003e\r\n\u003cp\u003eThe text starts out blue, but fades towards red so it is completely red when the line ends.\n{:/}\n{::template name=\u0026ldquo;examplebox\u0026rdquo;}\u003c/p\u003e\n\u003cpre\u003e{\\an5\\t(0,5000,\\frz3600)}Wheee\u003c/pre\u003e\r\n\u003cp\u003eMakes the text rotate 10 times, counterclockwise, lasting for 5 seconds.\n{:/}\n{::template name=\u0026ldquo;examplebox\u0026rdquo;}\u003c/p\u003e\n\u003cpre\u003e{\\an5\\t(0,5000,0.5,\\frz3600)}Wheee\u003c/pre\u003e\r\n\u003cp\u003eSame as above, but it will start fast and slow down, still doing the 10 rotations in 5 seconds.\n{:/}\n{::template name=\u0026ldquo;examplebox\u0026rdquo;}\u003c/p\u003e\n\u003cpre\u003e{\\an5\\fscx0\\fscy0\\t(0,500,\\fscx100\\fscy100)}Boo!\u003c/pre\u003e\r\n\u003cp\u003eText starts at zero size, i.e. invisible, then grows to 100% size in both X and Y direction.\n{:/}\u003c/p\u003e\n\u003cp\u003e{::template name=\u0026ldquo;tag_def_box\u0026rdquo; title=\u0026ldquo;Clip (rectangle)\u0026rdquo; id=\u0026quot;\\clip\u0026quot;}\n\\clip(\u003ci\u003e\u0026lt;x1\u003c/i\u003e\u0026gt;,\u003ci\u003e\u0026lt;y1\u003c/i\u003e\u0026gt;,\u003ci\u003e\u0026lt;x2\u003c/i\u003e\u0026gt;,\u003ci\u003e\u0026lt;y2\u003c/i\u003e\u0026gt;)\n\\iclip(\u003ci\u003e\u0026lt;x1\u003c/i\u003e\u0026gt;,\u003ci\u003e\u0026lt;y1\u003c/i\u003e\u0026gt;,\u003ci\u003e\u0026lt;x2\u003c/i\u003e\u0026gt;,\u003ci\u003e\u0026lt;y2\u003c/i\u003e\u0026gt;)\n{:/}\nDefine a rectangle to clip the line, only the part of the line that is inside\nthe rectangle is visible. The \u003ccode\u003e\\iclip\u003c/code\u003e tag has the opposite effect, it defines\na rectangle where the line is not shown.\u003c/p\u003e\n\u003cp\u003eThe \u003cem\u003ex1\u003c/em\u003e, \u003cem\u003ey1\u003c/em\u003e, \u003cem\u003ex2\u003c/em\u003e and \u003cem\u003ey2\u003c/em\u003e coordinates are given in script resolution\npixels and are relative to the top-left corner of the video. The coordinates\nmust be integers, there is no possibility to use non-integer coordinates.\n(Increasing the script resolution will not increase the precision, the\nclipping always happens on video pixel boundaries.)\u003c/p\u003e\n\u003cp\u003e{::template name=\u0026ldquo;examplebox\u0026rdquo;}\u003c/p\u003e\n\u003cpre\u003e\\clip(0,0,320,240)\u003c/pre\u003e\r\n\u003cp\u003eAssuming 640x480 script resolution, only the part of the line within the top\nleft quadrant is visible.\n{:/}\n{::template name=\u0026ldquo;examplebox\u0026rdquo;}\u003c/p\u003e\n\u003cpre\u003e\\iclip(0,0,320,240)\u003c/pre\u003e\r\n\u003cp\u003eSimilar to above, but instead the part of the line within the top left\nquadrant is hidden.\n{:/}\n{::template name=\u0026ldquo;examplebox\u0026rdquo;}\nExample of \u003ccode\u003e\\clip(0,0,704,245)\u003c/code\u003e on a 704x480 video:\n\u003cimg src="/img/3.2/Clip_sample01.jpg" alt="Clip_sample01"\u003e\n{:/}\u003c/p\u003e\n\u003cp\u003e{::template name=\u0026ldquo;tag_def_box\u0026rdquo; title=\u0026ldquo;Clip (vector drawing)\u0026rdquo; id=\u0026quot;\u0026quot;}\n\\clip(\u003ci\u003e\u0026lt;drawing commands\u0026gt;\u003c/i\u003e)\n\\clip(\u003ci\u003e\u0026lt;scale\u0026gt;\u003c/i\u003e,\u003ci\u003e\u0026lt;drawing commands\u0026gt;\u003c/i\u003e)\n\\iclip(\u003ci\u003e\u0026lt;drawing commands\u0026gt;\u003c/i\u003e)\n\\iclip(\u003ci\u003e\u0026lt;scale\u0026gt;\u003c/i\u003e,\u003ci\u003e\u0026lt;drawing commands\u0026gt;\u003c/i\u003e)\n{:/}\nUse the shape defined by a vector drawing to selectively display (\u003ccode\u003e\\clip\u003c/code\u003e) or\nhide (\u003ccode\u003e\\iclip\u003c/code\u003e) parts of the line.\u003c/p\u003e\n\u003cp\u003eThe \u003cem\u003edrawing commands\u003c/em\u003e are drawing commands as those used with the \u003ccode\u003e\\p\u003c/code\u003e tag,\nthe coordinates are given in script resolution pixels and are relative to the\ntop left corner of the video.\u003c/p\u003e\n\u003cp\u003eIf the \u003cem\u003escale\u003c/em\u003e is not specified it is assumed to be 1 (one), meaning that\ncoordinates correspond directly to pixels. The \u003cem\u003escale\u003c/em\u003e works the same way as\nthe \u003cem\u003escale\u003c/em\u003e for \u003ccode\u003e\\p\u003c/code\u003e drawings.\u003c/p\u003e\n\u003cp\u003eUnlike the rectangular clip, the vector drawing clip can \u003cem\u003enot\u003c/em\u003e be animated\nwith \u003ccode\u003e\\t\u003c/code\u003e. If you need to animate a vector drawing clip, you must create\nmultiple similar subtitle lines with each their own \u0026ldquo;frame\u0026rdquo; of the clipping\nanimation.\u003c/p\u003e\n\u003cp\u003e{::template name=\u0026ldquo;examplebox\u0026rdquo;}\u003c/p\u003e\n\u003cpre\u003e\\clip(1,m 50 0 b 100 0 100 100 50 100 b 0 100 0 0 50 0)\u003c/pre\u003e\r\n\u003cp\u003eOnly show the portion of the line within the defined pseudo-circle.\n{:/}\u003c/p\u003e\n\u003ch2 id="drawing-tags"\u003eDrawing tags\u003c/h2\u003e\n\u003cp\u003eAdvanced Substation Alpha also supports some advanced drawing tags that allow\nyou to draw with vectorial graphics. Certain familiarity with vectors and\nsplines will make the understanding of this much simpler.\u003c/p\u003e\n\u003ch3 id="p01---toggle-drawing-mode"\u003e\\p\u0026lt;0/1/..\u0026gt; - Toggle drawing mode\u003c/h3\u003e\n\u003cp\u003eSetting this tag to 1 or above enables drawing mode. Text after this override\nblock will then be interpreted as drawing instructions, and not as actually\nvisible text. Setting this to zero disables drawing mode, restoring normal\nbehavior. When turning on, the value might be any integer larger than zero,\nand will be interpreted as the scale, in 2^(value-1) mode. This is done to\nallow sub-pixel accuracy.\ne.g.:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\\p1\r\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e(Enables drawing with normal coordinates)\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\\p0\r\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e(Disables drawing)\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\\p2\r\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e(Enables drawing, and resolution is doubled. So drawing to 200,200 will\nactually draw to 100,100)\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\\p4\r\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e(Enables drawing, and resolution is 8x larger (2^(4-1)). So drawing to 400,400\nwill actually draw to 50,50)\u003c/p\u003e\n\u003ch3 id="pboy---baseline-offset"\u003e\\pbo\u003cy\u003e - Baseline offset\u003c/h3\u003e\n\u003cp\u003eDefines baseline offset for drawing. This is basically an Y offset to all\ncoordinates.\ne.g.:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\\pbo-50\r\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e(Draws everything 50 pixels above specified)\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\\pbo100\r\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e(Draws everything 100 pixels below specified)\u003c/p\u003e\n\u003ch2 id="drawing-commands"\u003eDrawing commands\u003c/h2\u003e\n\u003cp\u003eThese commands should appear either in a \\clip tag (vectorial overload) or\nbetween \\p# and \\p0, outside override blocks.  For example (taken straight\nfrom the ASS specs):\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003eSquare:\u003c/p\u003e\n\u003cp\u003e{\\p1}m 0 0 l 100 0 100 100 0 100{\\p0}\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eRounded square:\u003c/p\u003e\n\u003cp\u003e{\\p1}m 0 0 s 100 0 100 100 0 100 c{\\p0}\u003c/p\u003e\n\u003cp\u003e(c equals to \u0026ldquo;p 0 0 100 0 100 100\u0026rdquo; in this case)\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eCircle (almost):\u003c/p\u003e\n\u003cp\u003e{\\p1}m 50 0 b 100 0 100 100 50 100 b 0 100 0 0 50 0{\\p0}\u003c/p\u003e\n\u003cp\u003e(note that the 2nd \u0026lsquo;b\u0026rsquo; is optional here)\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eDrawing commands use the primary color for fill and outline color for borders.\nThey also display shadow. The idea of drawing vectors is that there is an\ninvisible \u0026ldquo;cursor\u0026rdquo; (think of it as the mouse pointer in a drawing program, or\nas a pen moving through the image) on the video frame, and you tell it to move\nto other positions. As it moves, it draws on the area behind it, and when you\nclose the line formed, it fills it with the primary color.\u003c/p\u003e\n\u003ch3 id="m-ltxgt-ltygt---move"\u003em \u0026lt;x\u0026gt; \u0026lt;y\u0026gt; - Move\u003c/h3\u003e\n\u003cp\u003eMoves the cursor to x,y. If you have an unclosed shape, it will automatically\nbe closed, as the program assumes that you are now drawing a new, independent\nshape. All drawing routines must start with this command.\u003c/p\u003e\n\u003ch3 id="n-ltxgt-ltygt---move-no-closing"\u003en \u0026lt;x\u0026gt; \u0026lt;y\u0026gt; - Move (no closing)\u003c/h3\u003e\n\u003cp\u003eMoves the cursor to x,y, without closing the current shape.\u003c/p\u003e\n\u003ch3 id="l-ltxgt-ltygt---line"\u003el \u0026lt;x\u0026gt; \u0026lt;y\u0026gt; - Line\u003c/h3\u003e\n\u003cp\u003eDraws a line from the current cursor position to x,y, and moves the cursor\nthere afterwards.\u003c/p\u003e\n\u003ch3 id="b-ltx1gt-lty1gt-ltx2gt-lty2gt-ltx3gt-lty3gt---cubic-bézier-curve"\u003eb \u0026lt;x1\u0026gt; \u0026lt;y1\u0026gt; \u0026lt;x2\u0026gt; \u0026lt;y2\u0026gt; \u0026lt;x3\u0026gt; \u0026lt;y3\u0026gt; - Cubic Bézier curve\u003c/h3\u003e\n\u003cp\u003eDraws a cubic (3rd degree) Bézier curve from the cursor position to (x3,y3),\nusing (x1,y1) and (x2,y2) as the control points. Check the \u003ca href="http://en.wikipedia.org/wiki/B%C3%A9zier_curve"\u003earticle on\nWikipedia\u003c/a\u003e for more\ninformation about Bézier curves. In this picture taken from that article, P0\nis the cursor position, P1 is x1,y1, P2 is x2,y2 and P3 is x3,y3:\n\u003cimg src="/img/3.2/Bezier.png" alt="Bezier"\u003e\nNote that the curve begins at P0, heads towards P1, then arrives at P3 coming\nfrom P2\u0026rsquo;s direction.\u003c/p\u003e\n\u003ch3 id="s-ltx1gt-lty1gt-ltx2gt-lty2gt-ltx3gt-lty3gt--ltxngt-ltyngt---cubic-b-spline"\u003es \u0026lt;x1\u0026gt; \u0026lt;y1\u0026gt; \u0026lt;x2\u0026gt; \u0026lt;y2\u0026gt; \u0026lt;x3\u0026gt; \u0026lt;y3\u0026gt; .. \u0026lt;xN\u0026gt; \u0026lt;yN\u0026gt; - Cubic b-spline\u003c/h3\u003e\n\u003cp\u003eDraws a cubic (3rd degree) uniform b-spline to point N. This must contain at\nleast 3 coordinates (and is, in that case, the same as b). This basically lets\nyou chain several cubic Bézier curves together. Check this other article on\nWikipedia for more information.\u003c/p\u003e\n\u003ch3 id="p-ltxgt-ltygt---extend-b-spline"\u003ep \u0026lt;x\u0026gt; \u0026lt;y\u0026gt; - Extend b-spline\u003c/h3\u003e\n\u003cp\u003eExtends the b-spline to x,y. This is essentially the same as adding another\npair of coordinates at the end of s.\u003c/p\u003e\n\u003ch3 id="c---close-b-spline"\u003ec - Close b-spline\u003c/h3\u003e\n\u003cp\u003eCloses the b-spline.\u003c/p\u003e\n\u003cp\u003e\u003cem\u003eNote: The \u003ca href="/docs/3.2/en/visual_typesetting/#vectorial-clip"\u003evector clip visual typesetting tool\u003c/a\u003e only supports the m, l and b\ncommands, and may corrupt drawings which use the other commands.\u003c/em\u003e\u003c/p\u003e\n'},{id:19,href:"/docs/3.2/en/colour_picker/",title:"Colour Picker",description:null,content:'\u003cp\u003eAegisub introduces a more advanced color picker than the default Windows one. It allows you to enter color values using various color spaces, in both HTML and ASS hex, pick colors from a mini-screenshot and use three different color spectrums for graphically picking colors.\u003c/p\u003e\n\u003ch2 id="overview"\u003eOverview\u003c/h2\u003e\n\u003cp\u003e\u003cimg src="/img/3.2/Colour_picker.png" alt="Colour_picker"\u003e{: class=\u0026ldquo;center\u0026rdquo;}\u003c/p\u003e\n\u003cp\u003eThe color picker has the following components:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eColor spectrum\u003c/li\u003e\n\u003cli\u003eParametric settings for four color-spaces\u003c/li\u003e\n\u003cli\u003eHEX input for ASS and HTML formats\u003c/li\u003e\n\u003cli\u003ePick-from-screen control, for taking a mini-screenshot and picking a color from it\u003c/li\u003e\n\u003cli\u003eList of 32 last picked colors\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThe last used mode of the color spectrum is remembered.\u003c/p\u003e\n\u003ch2 id="using-the-pick-from-screen-function"\u003eUsing the pick-from-screen function\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003eThe pick-from-screen control is located to the left of the last-used colors, in the lower part of the window.\u003c/li\u003e\n\u003cli\u003eTo start using it, click on the \u0026ldquo;pick color\u0026rdquo; symbol.\u003c/li\u003e\n\u003cli\u003eAs you drag over the screen, you\u0026rsquo;ll notice that the square box beside the pick color button turns into a magnification of the area the cursor is hovering over.\u003c/li\u003e\n\u003cli\u003eWhen you\u0026rsquo;ve found the area you want to grab a color from, click the left mouse button to fixate the magnification.\u003c/li\u003e\n\u003cli\u003eNow click on the pixel you want to grab a color from in the magnification.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eOn OS X, you have to drag the pick control to the desired spot due to clicking on it and then clicking on the spot to pick from due to technical limitations.\u003c/p\u003e\n\u003ch2 id="descriptions-of-the-color-spaces"\u003eDescriptions of the color spaces\u003c/h2\u003e\n\u003cp\u003eHere\u0026rsquo;s a short round-up of the three available color spaces:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cem\u003eRGB\u003c/em\u003e - Red, Green and Blue, the three component colors a computer monitor uses to display images. In RGB mode, you specify the intensity of each of those three components.\u003c/li\u003e\n\u003cli\u003e\u003cem\u003eHSL\u003c/em\u003e - Hue, Saturation and Luminance. Hue is the actual \u0026ldquo;color of the color\u0026rdquo;, that is, red, green, blue or a mix of those. Saturation is the \u0026ldquo;greyness\u0026rdquo; of the color, the lower the saturation, the closer to a shade of grey, the color becomes. Luminance is the lightness, max luminance means pure white, while zero luminance means pure black.\u003c/li\u003e\n\u003cli\u003e\u003cem\u003eHSV\u003c/em\u003e - Hue, Saturation and Value. Hue and Saturation mean the same as in HSL. Value, however, is different from the luminance in HSL. Value is the \u0026ldquo;non-blackness\u0026rdquo; of the color, the smaller the value, the closer the color is to pure black.\u003c/li\u003e\n\u003c/ul\u003e\n'},{id:20,href:"/docs/3.2/en/styling_assistant/",title:"Styling Assistant",description:null,content:'\u003cp\u003eThe Styling assistant is a powerful tool for subtitles that have multiple\nstyles, such as cases when several actors have their own style, or for some\nother reason you have many different styles for dialog lines.\u003c/p\u003e\n\u003ch2 id="overview"\u003eOverview\u003c/h2\u003e\n\u003cp\u003e\u003cimg src="/img/3.2/styling_assistant.png" alt="styling_assistant"\u003e{: class=\u0026ldquo;center\u0026rdquo;}\u003c/p\u003e\n\u003cp\u003eAs seen from the image above, the assistant is composed of the following:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eCurrent line field\u003c/li\u003e\n\u003cli\u003eStyles available field\u003c/li\u003e\n\u003cli\u003eSet style window\u003c/li\u003e\n\u003cli\u003eKeys field\u003c/li\u003e\n\u003cli\u003eSeek video to line start time checkbox\u003c/li\u003e\n\u003cli\u003ePlay audio button\u003c/li\u003e\n\u003cli\u003ePlay video button\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThe Current line field displays the line in the subtitles for which the\nstyle will be set. The text in it cannot be edited.\u003c/p\u003e\n\u003cp\u003eStyles available field displays the styles available in the script. The\nstyles have to be imported through the Styles Manager or created with its\nhelp. The styles can then be set for the selected line in the subtitles by\nclicking on the desired style.\u003c/p\u003e\n\u003cp\u003eThe set style window is the main aspect of the Styling Assistant. Through\nit, styles can be applied to the line in the subtitles easily and without\nmuch work. It support autocomplete, so it helps to select the desired\nstyle after some characters are written in the window.\u003c/p\u003e\n\u003cp\u003eThe Keys fields displays the keyboard shortcuts that are used for work with\nthe assistant.\u003c/p\u003e\n\u003cp\u003eIf the Seek video to line start time checkbox is checked and video is\nloaded, the video will seek to the beginning of each line which is\ndisplayed for styling.\u003c/p\u003e\n\u003cp\u003eThe play audio and video buttons play the audio or video for the current\nline, to aid in determining what character is saying the line.\u003c/p\u003e\n\u003ch2 id="the-autocomplete-function"\u003eThe autocomplete function\u003c/h2\u003e\n\u003cp\u003e\u003cimg src="/img/3.2/Styling_autocomplete.png" alt="Styling_autocomplete"\u003e{: class=\u0026ldquo;center\u0026rdquo;}\u003c/p\u003e\n\u003cp\u003eThis window displays how the autocomplete function works. The characters\nthat were typed are on the white background and the rest of the name is\ndisplayed as being selected. The selected part is what autocomplete sets as\nthe style that matches with the typed characters.\u003c/p\u003e\n\u003cp\u003e\u003cimg src="/img/3.2/Styling_invalid.png" alt="Styling_invalid"\u003e{: class=\u0026ldquo;center\u0026rdquo;}\u003c/p\u003e\n\u003cp\u003eThis image shows the response to a name that doesn\u0026rsquo;t exist. The background\nof the window is colored red to show that no style on the list of selected\nstyles matches the entered text.\u003c/p\u003e\n\u003ch2 id="how-to-use"\u003eHow to use\u003c/h2\u003e\n\u003cp\u003eUsage is simple. Select the first line you want to style and open the\nassistant. Then you look at text, video and/or audio to determine who is\nspeaking it and type first few letters of style name, after which\nautocomplete should kick in. Hit enter to go to next line and proceed until\nyou\u0026rsquo;re finished. The other way is to double click on a style in the Styles\navailable list and the style will be applied to the selected line.\u003c/p\u003e\n'},{id:21,href:"/docs/3.2/en/resolution_resampler/",title:"Resolution Resampler",description:null,content:'\u003cp\u003eThe Resolution Resampler is a built-in tool designed to change the \u003ca href="/docs/3.2/en/script_resolution/"\u003eresolution of the script\u003c/a\u003e while transforming all affected tags so it\nends up looking the same. It can also offset all margins (and absolute\npositions) by a specific value. Uses include merging two scripts with different\nresolutions, converting a script for a 4:3 video to its 16:9 equivalent, and\nconverting between 1:1 and anamorphic pixel formats.\u003c/p\u003e\n\u003ch2 id="overview"\u003eOverview\u003c/h2\u003e\n\u003cp\u003e\u003cimg src="/img/3.2/resolution_resampler.png" alt="resolution_resampler"\u003e{: class=\u0026ldquo;center\u0026rdquo;}\u003c/p\u003e\n\u003cp\u003eThere are three main parts to the resolution resampler: the source\nresolution, destination resolution, and what to do if the source and\ndestination have different aspect ratios.\u003c/p\u003e\n\u003cp\u003eBy default, the source resolution is set to the current script properties and the destination resolution is set to the video\u0026rsquo;s properties, which is normally what you want.\nChanging the source settings is typically only useful to repair previous incorrect resampling or scripts typeset incorrectly.\u003c/p\u003e\n\u003cp\u003eIf you\u0026rsquo;re resampling from SD to HD resolutions, you probably want to convert the YCbCr matrix from TV.601 to TV.709, and vice-versa when converting from HD to SD.\u003c/p\u003e\n\u003cp\u003eIf the new resolution and old resolution don\u0026rsquo;t have the same aspect ratio, you have four options:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eStretch the subtitles to the new AR.\nThis is intended for when one or both of the resolutions is anamorphic, and actually represent the same picture.\u003c/li\u003e\n\u003cli\u003eAutomatically add the required margins to center the old video within the new video.\nUse this if your new video has black borders or shows more of the picture than the old one.\u003c/li\u003e\n\u003cli\u003eAutomatically remove the required margins to center the old video within the new video.\nUse this if the source video has black borders and your new video does not.\u003c/li\u003e\n\u003cli\u003eManually set the margins to offset all lines by.\nNote that margins are added \u003cem\u003ebefore\u003c/em\u003e rescaling, not after.\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2 id="examples"\u003eExamples\u003c/h2\u003e\n\u003ch3 id="43-sd-to-169-hd"\u003e4:3 SD to 16:9 HD\u003c/h3\u003e\n\u003cp\u003eFor example, if you have subtitles typeset to a 640x480 video, and want to\napply the same subtitles to a 1280x720 video (which is widescreen, therefore\neither showing more video on the left and right margins or with black\nborders), you\u0026rsquo;d set the resampler to the settings shown in the\nscreenshot above.\u003c/p\u003e\n\u003ch3 id="anamorphic-720x480-to-640x480"\u003eAnamorphic 720x480 to 640x480\u003c/h3\u003e\n\u003cp\u003eFor this, you\u0026rsquo;d set source resolution to 720x480, destination resolution\nto 640x480, and select the \u0026ldquo;Stretch\u0026rdquo; aspect ratio handling\u003c/p\u003e\n'},{id:22,href:"/docs/3.2/en/fonts_collector/",title:"Fonts Collector",description:null,content:'\u003cp\u003eThe fonts collector is an automated tool that finds all fonts used in the\ncurrent script, scans your system\u0026rsquo;s fonts folder(s) and copies all the\nrelevant fonts to a destination of your choosing. The dialog box looks like\nso:\u003c/p\u003e\n\u003cp\u003e\u003cimg src="/img/3.2/fonts_collector.png" alt="fonts_collector"\u003e{: class=\u0026ldquo;center\u0026rdquo;}\u003c/p\u003e\n\u003cp\u003eThe collector can perform any of the following actions:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eCheck fonts for availability\u003c/strong\u003e - Checks the fonts folder(s) to see if\nyou have all the fonts used in the current script, and that all fonts\ncontain all of the required glyphs. Do note that for technical reasons, the\ncollector can\u0026rsquo;t detect or collect fonts that aren\u0026rsquo;t actually installed (like\nfor example fonts temporarily loaded by a Matroska splitter or a font\nviewing program).\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eCopy fonts to folder\u003c/strong\u003e - Copies all the fonts used on the current script\nto the given folder.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eCopy fonts to subtitle file\u0026rsquo;s folder\u003c/strong\u003e - Copies all the fonts used on the\ncurrent script to the folder containing the subtitle file. This is\nequivalent to using the above option with the destination set to ?script.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eCopy fonts to zipped archive\u003c/strong\u003e - Copies all the fonts used on the\ncurrent script to a compressed .ZIP archive.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThe fonts collector will output diagnostic information about its doings in\nthe lower half of the window.\u003c/p\u003e\n'},{id:23,href:"/docs/3.2/en/audio/",title:"Working with Audio",description:null,content:'\u003cp\u003eAegisub has a fairly advanced, customizable audio mode with both the\ntraditional waveform display as well as an alternative spectrum display.\nSeveral different timing modes are available for both normal dialog timing\nand karaoke timing.\u003c/p\u003e\n\u003ch2 id="opening-audio"\u003eOpening audio\u003c/h2\u003e\n\u003cp\u003eTo load an audio file into Aegisub, just go to the \u003cem\u003eAudio\u003c/em\u003e menu and press\n\u003cem\u003eOpen audio file\u003c/em\u003e. If you have a video file (with an included audio track)\nalready loaded, you can use \u003cem\u003eOpen audio from video\u003c/em\u003e instead, which obviously\nwill load the audio track from the video file you currently have loaded. You\ncan open any type of audio file that your \u003ca href="/docs/3.2/en/options/#advancedaudio"\u003eaudio provider\u003c/a\u003e can decode (more on this below). In\naddition, if you simply wish to use the audio display without loading any\nreal audio, you can choose \u003cem\u003eOpen 2h30 Blank Audio\u003c/em\u003e or \u003cem\u003eOpen 2h30 Noise\nAudio\u003c/em\u003e.\u003c/p\u003e\n\u003cp\u003eIf opening audio fails with an error that mentions the audio player, or if\nplaying audio results in no sound, switching to a \u003ca href="/docs/3.2/en/options/#advancedaudio"\u003edifferent audio player\u003c/a\u003e may help.\u003c/p\u003e\n\u003ch3 id="supported-formats"\u003eSupported formats\u003c/h3\u003e\n\u003cp\u003eAegisub normally uses \u003ca href="https://github.com/FFMS/ffms2"\u003eFFMS2\u003c/a\u003e to open audio,\nwhich can reliably open audio is nearly any format you can think of. On\nWindows, Aegisub can also use DirectShow (via Avisynth), which can be faster as\nit does not have to index the audio files before opening them. However,\nDirectShow is considerably less reliable, and extremely insane things may\nhappen if you open a file with multiple audio tracks via Avisynth.\u003c/p\u003e\n\u003cp\u003eAegisub only supports mono audio. Multichannel audio will be automatically\ndownmixed, but the results may be of poor quality for sources of more than\ntwo channels.\u003c/p\u003e\n\u003ch3 id="audio-caching"\u003eAudio caching\u003c/h3\u003e\n\u003cp\u003eIf you\u0026rsquo;re loading any audio format that isn\u0026rsquo;t an uncompressed (PCM)\nMicrosoft WAV file, Aegisub needs to decode and cache it first. When loaded,\nthe audio is downmixed to mono (see the \u003ca href="/docs/3.2/en/options/#avisynthwindowsonly"\u003eaudio downmixer option\u003c/a\u003e if you want to grab one channel only\ninstead), decompressed to PCM (a.k.a. WAV), and (by default) loaded into a\nRAM cache. This means that you will need a \u003cem\u003elarge amount\u003c/em\u003e of RAM to open a\nlong compressed audio file. If your computer doesn\u0026rsquo;t have a lot of RAM, or\nif you\u0026rsquo;re working with a full-length movie, refer to the \u003ca href="/docs/3.2/en/options/#cache"\u003eaudio cache option\u003c/a\u003e for instructions on how to make Aegisub use its\n(slower) hard drive cache instead; or decompress the file to WAV first since\nAegisub can read from WAVs directly without need for caching.\u003c/p\u003e\n\u003cp\u003eThe exact amount of memory used for any given audio file can be calculated\nwith the following formula:\ns = ( b * r * l ) / 8\nwhere \u003cem\u003es\u003c/em\u003e is the amount of memory (in bytes - divide by 1024 to get kB), \u003cem\u003eb\u003c/em\u003e\nis the number of bits per sample (always 16 in the current implementation),\n\u003cem\u003er\u003c/em\u003e is the sample rate in Hz (usually 48000, or 44100 in some cases), and\n\u003cem\u003el\u003c/em\u003e is the length of the audio (in seconds).\u003c/p\u003e\n\u003cp\u003eFor example, for a 25 minute audio clip at 48 kHz, you will need (16 * 48000\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e25 * 60)/8 = 144000000 bytes ~= 137 MB.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eLoading and decompressing the audio into the cache takes some time.\nA progress bar is shown in the scroll bar of the audio display while audio is loading.\u003c/p\u003e\n'},{id:24,href:"/docs/3.2/en/automation/",title:"Overview",description:null,content:'\u003cp\u003eThe name \u003cstrong\u003eAutomation\u003c/strong\u003e covers the entire scripting functionality of Aegisub.\u003c/p\u003e\n\u003ch2 id="about-automation"\u003eAbout Automation\u003c/h2\u003e\n\u003cp\u003eThe single purpose of Automation is — as the name implies — to automate various aspects of subtitle creation and editing.\nThis was originally used mainly for creating \u003ca href="/docs/3.2/en/glossary/karaoke_effect/"\u003ekaraoke effects\u003c/a\u003e, but over time it has expanded in scope to support more general purpose \u003ca href="/docs/3.2/en/glossary/macro/"\u003emacros\u003c/a\u003e which add arbitrary new functionaly to Aegisub.\u003c/p\u003e\n\u003cp\u003eSome of the goals of Automation:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eMacros to automate complex subtitle editing tasks\u003c/li\u003e\n\u003cli\u003eExport filters to generate complex effects from simpler input\n\u003cul\u003e\n\u003cli\u003eKaraoke effects\u003c/li\u003e\n\u003cli\u003eTranslation note boxes\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eProbably several yet-undiscovered uses\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id="using-automation"\u003eUsing Automation\u003c/h2\u003e\n\u003cp\u003eAegisub comes with several Automation scripts already packaged and ready to use.\nThis includes the advanced \u003cstrong\u003e\u003ca href="/docs/3.2/en/automation/karaoke_templater/"\u003eKaraoke_Templater\u003c/a\u003e\u003c/strong\u003e script and a \u003cstrong\u003e\u003ca href="/docs/3.2/en/automation/included_macros/"\u003ecollection of macros\u003c/a\u003e\u003c/strong\u003e to simplify some editing tasks.\u003c/p\u003e\n\u003cp\u003eAegisub almost always has several Automation scripts loaded at a time.\nYou can see what scripts are loaded, and load/unload more from the \u003cstrong\u003e\u003ca href="/docs/3.2/en/automation/manager/"\u003eAutomation/Manager\u003c/a\u003e\u003c/strong\u003e window.\u003c/p\u003e\n\u003cp\u003eAll Automation scripts also present themselves in Aegisub in one way or another.\nSome appear as \u003ca href="/docs/3.2/en/automation/running_macros/"\u003emacros in the Automation menu\u003c/a\u003e and others appear as \u003ca href="/docs/3.2/en/exporting/"\u003efilters in the Export dialog\u003c/a\u003e.\nSome scripts even appear in both places.\u003c/p\u003e\n\u003ch2 id="automation-for-programmers"\u003eAutomation for programmers\u003c/h2\u003e\n\u003cp\u003eAutomation uses \u003ca href="http://luajit.org/"\u003eLuaJIT 2.0\u003c/a\u003e compiled in \u003ca href="http://www.lua.org/manual/5.2/"\u003eLua 5.2 mode\u003c/a\u003e.\n\u003ca href="http://www.moonscript.org"\u003eMoonScript\u003c/a\u003e is natively supported (and in fact parts of the Aegisub libraries are written in it).\u003c/p\u003e\n\u003cp\u003eThere are several example scripts included with Aegisub to give you a head start on writing your own ones.\nA word of warning: Unless you are an experienced programmer the \u003cem\u003ekara-templater.lua\u003c/em\u003e script is a very bad place to start!\u003c/p\u003e\n\u003cp\u003e{::template name=\u0026ldquo;automation_navbox\u0026rdquo; /}\u003c/p\u003e\n'},{id:25,href:"/docs/3.2/en/options/",title:"Aegisub Options",description:null,content:'\u003cp\u003eAegisub is highly customizable and hence has a large amount of user-changeable\noptions. These are available in the options dialog box, found in the View menu.\nThis page is a reference of all the available options.\u003c/p\u003e\n\u003cp\u003eAegisub stores all its configuration in a plain text file called \u003cem\u003econfig.json\u003c/em\u003e\nwhich by default is stored in the \u003ca href="/docs/3.2/en/aegisub_path_specifiers/"\u003e?user\u003c/a\u003e directory.\nIf you want to reset Aegisub to its default options without reinstalling the\nprogram, you can just delete config.json and restart Aegisub.\u003c/p\u003e\n\u003ch2 id="general"\u003eGeneral\u003c/h2\u003e\n\u003cdl\u003e\n\u003cdt\u003e\u003cimg src="/img/3.2/preferences-general.png" alt="preferences-general"\u003e{: class=\u0026ldquo;center\u0026rdquo;}\u003c/dt\u003e\n\u003cdt\u003e\u003cstrong\u003eAuto Check for Updates\u003c/strong\u003e\u003c/dt\u003e\n\u003cdd\u003eIf enabled, Aegisub will periodically check whether there is a newer version\navailable, and alert you if there is.\nRequires a working connection to the internet, naturally.\u003c/dd\u003e\n\u003cdt\u003e\u003cstrong\u003eShow main toolbar\u003c/strong\u003e\u003c/dt\u003e\n\u003cdd\u003eIf disabled, Aegisub\u0026rsquo;s main toolbar is hidden.\u003c/dd\u003e\n\u003cdt\u003e\u003cstrong\u003eSave UI state in subtitles files\u003c/strong\u003e\u003c/dt\u003e\n\u003cdd\u003eBy default, Aegisub saves things like the current scroll position of the subtitles grid and active\nrow number in the subtitles file so that it can be automatically restored when you reopen the file.\nHowever, if you\u0026rsquo;re using source control for your subtitle files you may want to disable this to\nreduce the noise in the changes.\u003c/dd\u003e\n\u003cdt\u003e\u003cstrong\u003eToolbar icon size\u003c/strong\u003e\u003c/dt\u003e\n\u003cdd\u003eThe size of icons to use in all of the toolbars in Aegisub. Currently the\nonly valid values are 16 and 24.\u003c/dd\u003e\n\u003cdt\u003e\u003cstrong\u003eAutomatically load linked files\u003c/strong\u003e\u003c/dt\u003e\n\u003cdd\u003eWhenever you save a script, Aegisub also stores some information about what\nvideo, audio and timecodes files you had open while working on it, inside the\nscript itself. This option decides what Aegisub does with these files that are\n\u0026ldquo;linked\u0026rdquo; to the script when opening it. If set to \u0026ldquo;ask\u0026rdquo;, Aegisub will ask you\nif you want to load linked files. If set to \u0026ldquo;never\u0026rdquo;, Aegisub will never load\nlinked files, and likewise if set to \u0026ldquo;always\u0026rdquo;, Aegisub will always try to load\nlinked files (and report an error if the file(s) were not found).\u003c/dd\u003e\n\u003cdt\u003e\u003cstrong\u003eUndo levels\u003c/strong\u003e\u003c/dt\u003e\n\u003cdd\u003eThe maximum number of changes that can be undone. The higher this value, the\nmore memory Aegisub will use.\u003c/dd\u003e\n\u003cdt\u003e\u003cstrong\u003eRecently Used Lists\u003c/strong\u003e\u003c/dt\u003e\n\u003cdd\u003eMaximum number of items to remember for all of the various lists of recently\nused items in Aegisub. The memory impact from increasing these is trivial, but\nlarger lists may get unwieldy to use.\u003c/dd\u003e\n\u003c/dl\u003e\n\u003ch3 id="default-styles"\u003eDefault Styles\u003c/h3\u003e\n\u003cp\u003e\u003cimg src="/img/3.2/preferences-default-styles.png" alt="preferences-default-styles"\u003e{: class=\u0026ldquo;center\u0026rdquo;}\u003c/p\u003e\n\u003ch2 id="audio"\u003eAudio\u003c/h2\u003e\n\u003cdl\u003e\n\u003cdt\u003e\u003cimg src="/img/3.2/preferences-audio.png" alt="preferences-audio"\u003e{: class=\u0026ldquo;center\u0026rdquo;}\u003c/dt\u003e\n\u003cdt\u003e\u003cstrong\u003eLock scroll on cursor\u003c/strong\u003e\u003c/dt\u003e\n\u003cdd\u003eWhen enabled, the audio waveform view will automatically scroll to follow the\nplayback cursor if it gets too close to either of the edges.\u003c/dd\u003e\n\u003cdt\u003e\u003cstrong\u003eSnap markers by default\u003c/strong\u003e\u003c/dt\u003e\n\u003cdd\u003eWhen enabled, Aegisub will default to snapping audio markers to other markers\nin the audio display (such as keyframes and the start or end times of other\nlines) when moving them by clicking or dragging them if they are close enough.\nSnapping can be toggled on or off by holding down shift.\u003c/dd\u003e\n\u003cdt\u003e\u003cstrong\u003eDefault mouse wheel to zoom\u003c/strong\u003e\u003c/dt\u003e\n\u003cdd\u003eWhen enabled, the mouse wheel will zoom the audio display horizontally by\ndefault, and scroll the audio display when Ctrl is held down. If disabled, this\nis reversed.\u003c/dd\u003e\n\u003cdt\u003e\u003cstrong\u003eAuto-focus on mouse over\u003c/strong\u003e\u003c/dt\u003e\n\u003cdd\u003eIf enabled, moving the mouse cursor over the audio waveform will\nautomatically give it focus (as opposed to requiring a click).\u003c/dd\u003e\n\u003cdt\u003e\u003cstrong\u003ePlay audio when stepping in video\u003c/strong\u003e\u003c/dt\u003e\n\u003cdd\u003eWhen enabled, frame stepping plays the audio for that frame.\u003c/dd\u003e\n\u003cdt\u003e\u003cstrong\u003eDefault timing length\u003c/strong\u003e\u003c/dt\u003e\n\u003cdd\u003eThe default length of a new untimed line, in milliseconds.\u003c/dd\u003e\n\u003cdt\u003e\u003cstrong\u003eDefault lead-in length\u003c/strong\u003e\u003c/dt\u003e\n\u003cdt\u003e\u003cstrong\u003eDefault lead-out length\u003c/strong\u003e\u003c/dt\u003e\n\u003cdd\u003eThe duration added to the start of a line by the \u0026ldquo;add lead-in\u0026rdquo; and \u0026ldquo;add\nlead-out\u0026rdquo; functions. Also used in (and set by) the \u003ca href="/docs/3.2/en/timing_post-processor/"\u003etiming postprocessor\u003c/a\u003e.\u003c/dd\u003e\n\u003cdt\u003e\u003cstrong\u003eMarker drag-start sensitivity\u003c/strong\u003e\u003c/dt\u003e\n\u003cdd\u003eThe distance in pixels that a marker must be dragged for it to register as a\ndrag. Higher values reduce the chance of accidental changes, at the cost of\nworse responsiveness.\u003c/dd\u003e\n\u003cdt\u003e\u003cstrong\u003eLeft-click-drag moves end marker\u003c/strong\u003e\u003c/dt\u003e\n\u003cdd\u003eWhen enabled, left clicking will set the start time of the line to the\nclicked point, then set the end time of the line to the point dragged to,\nmaking it possible to time a line with a single click-drag movement. When\ndisabled, left-click-drag always updates only the start time of the line, as\nright-click does with the end time.\u003c/dd\u003e\n\u003cdt\u003e\u003cstrong\u003eLine boundary thickness\u003c/strong\u003e\u003c/dt\u003e\n\u003cdd\u003eThe width, in pixels, of the line start and end markers.\u003c/dd\u003e\n\u003cdt\u003e\u003cstrong\u003eMaximum snap distance\u003c/strong\u003e\u003c/dt\u003e\n\u003cdd\u003eMaximum distance to snap markers to other markers, in pixels.\u003c/dd\u003e\n\u003cdt\u003e\u003cstrong\u003eShow inactive lines\u003c/strong\u003e\u003c/dt\u003e\n\u003cdd\u003eControls how lines surrounding the currently selected line are displayed in\nthe audio waveform. \u0026ldquo;Don\u0026rsquo;t show\u0026rdquo; will only display the current line. \u0026ldquo;Show\nprevious\u0026rdquo; will show the previous line (in the grid, \u003cem\u003enot\u003c/em\u003e chronologically) in\ngray in addition to the current line. \u0026ldquo;Show next and previous\u0026rdquo; will show the\nlines before and after the current line (in the grid, \u003cem\u003enot\u003c/em\u003e chronologically).\n\u0026ldquo;Show all\u0026rdquo; will show all lines in gray in addition to the current line.\u003c/dd\u003e\n\u003cdt\u003e\u003cstrong\u003eInclude commented inactive lines\u003c/strong\u003e\u003c/dt\u003e\n\u003cdd\u003eIf disabled, commented lines will be skipped over when picking which inactive\nlines to show in the audio display (making \u0026ldquo;Show previous\u0026rdquo; into \u0026ldquo;Show last\nuncommented line before this line\u0026rdquo;, and so on).\u003c/dd\u003e\n\u003c/dl\u003e\n\u003ch3 id="display-visual-options"\u003eDisplay Visual Options\u003c/h3\u003e\n\u003cdl\u003e\n\u003cdt\u003e\u003cstrong\u003ekeyframes\u003c/strong\u003e\u003c/dt\u003e\n\u003cdd\u003eIf enabled, lines marking the positions of keyframes in the video will be\ndrawn on the audio waveform when in dialogue timing mode (the default).\u003c/dd\u003e\n\u003cdt\u003e\u003cstrong\u003eKaraoke keyframes\u003c/strong\u003e\u003c/dt\u003e\n\u003cdd\u003eIf enabled, lines marking the positions of keyframes in the video will be\ndrawn on the audio waveform when in karaoke timing mode.\u003c/dd\u003e\n\u003cdt\u003e\u003cstrong\u003eDraw cursor time\u003c/strong\u003e\u003c/dt\u003e\n\u003cdd\u003eIf enabled, a timestamp showing the time since the start of the file will be\ndrawn near the top of the audio waveform cursor.\u003c/dd\u003e\n\u003cdt\u003e\u003cstrong\u003eVideo position\u003c/strong\u003e\u003c/dt\u003e\n\u003cdd\u003eIf enabled, a line is drawn in the audio display marking the start time of\nthe current video frame.\u003c/dd\u003e\n\u003cdt\u003e\u003cstrong\u003eWaveform style\u003c/strong\u003e\u003c/dt\u003e\n\u003cdd\u003eSelects which of the waveform rendering styles to use\n\u003cp\u003eMaximum + Average\n: The waveform is two-tone, indicating both the maximum value of a sample\nwithin a pixel\u0026rsquo;s time range, and in a brighter color, the average value\nof all samples within the time range.\u003c/p\u003e\n\u003cp\u003eMaximum\n: The waveform displays only the maximum value, as previous versions of\nAegisub did.\u003c/p\u003e\n\u003c/dd\u003e\n\u003c/dl\u003e\n\u003ch3 id="audio-labels"\u003eAudio labels\u003c/h3\u003e\n\u003cp\u003eThese options control the appearance of labels drawn in the audio display for\nkaraoke syllables.\u003c/p\u003e\n\u003cdl\u003e\n\u003cdt\u003e\u003cstrong\u003eFont Face\u003c/strong\u003e\u003c/dt\u003e\n\u003cdd\u003eThe font to use for audio labels.\u003c/dd\u003e\n\u003cdt\u003e\u003cstrong\u003eFont Size\u003c/strong\u003e\u003c/dt\u003e\n\u003cdd\u003eThe font size to use for audio labels.\u003c/dd\u003e\n\u003c/dl\u003e\n\u003ch2 id="video"\u003eVideo\u003c/h2\u003e\n\u003cdl\u003e\n\u003cdt\u003e\u003cimg src="/img/3.2/preferences-video.png" alt="preferences-video"\u003e{: class=\u0026ldquo;center\u0026rdquo;}\u003c/dt\u003e\n\u003cdt\u003e\u003cstrong\u003eShow keyframes in slider\u003c/strong\u003e\u003c/dt\u003e\n\u003cdd\u003eWhen enabled, Aegisub will draw keyframe markers on the video seek slider.\u003c/dd\u003e\n\u003cdt\u003e\u003cstrong\u003eSeek video to line start on selection change\u003c/strong\u003e\u003c/dt\u003e\n\u003cdd\u003eWhen enabled, whenever the active line is changed Aegisub will automatically\nseek the video to the first frame of the new line. Note that this can by done\nmanually by double-clicking on the grid, or by pressing Ctrl-1.\u003c/dd\u003e\n\u003cdt\u003e\u003cstrong\u003eAlways show visual tools\u003c/strong\u003e\u003c/dt\u003e\n\u003cdd\u003eWhen disabled, the visual typesetting tools are only rendered when the mouse\nis over the video display.\u003c/dd\u003e\n\u003cdt\u003e\u003cstrong\u003eAutomatically open audio when opening video\u003c/strong\u003e\u003c/dt\u003e\n\u003cdd\u003eWhen enabled, when you open a video file which also has audio data, Aegisub\nwill automatically load the audio.\u003c/dd\u003e\n\u003cdt\u003e\u003cstrong\u003eDefault zoom\u003c/strong\u003e\u003c/dt\u003e\n\u003cdd\u003eThe default video zoom level. Useful if you have a very big or very small screen.\u003c/dd\u003e\n\u003cdt\u003e\u003cstrong\u003eFast jump step in frames\u003c/strong\u003e\u003c/dt\u003e\n\u003cdd\u003eDecides how big \u0026ldquo;jumps\u0026rdquo; Aegisub will make when you use the fast seek feature\n(Alt-rightarrow and Alt-leftarrow). Measured in frames.\u003c/dd\u003e\n\u003cdt\u003e\u003cstrong\u003eScreenshot save path\u003c/strong\u003e\u003c/dt\u003e\n\u003cdd\u003eDecides where Aegisub should save screenshots. The default is \u003ccode\u003e?video\u003c/code\u003e, which\nmeans they are saved to wherever the video is, but you can change it to any\npath you like. \u003ca href="/docs/3.2/en/aegisub_path_specifiers/"\u003eAegisub_path_specifiers\u003c/a\u003e are supported; another option\ndirectly available in the dropdown is \u003ccode\u003e?script\u003c/code\u003e, which is wherever the script\nis.\u003c/dd\u003e\n\u003c/dl\u003e\n\u003ch3 id="script-resolution"\u003eScript resolution\u003c/h3\u003e\n\u003cdl\u003e\n\u003cdt\u003e\u003cstrong\u003eUse resolution of first video opened\u003c/strong\u003e\u003c/dt\u003e\n\u003cdd\u003eWhen enabled, Aegisub will automatically set the script resolution to the\nvideo resolution if you open a video and the script resolution is not yet set.\nIf this is disabled, Aegisub instead sets the script resolution to a\nconfigurable default.\u003c/dd\u003e\n\u003cdt\u003e\u003cstrong\u003eMatch video resolution on open\u003c/strong\u003e\u003c/dt\u003e\n\u003cdd\u003eControls what Aegisub will do about script resolution when you open a video.\nIf set to \u0026ldquo;never\u0026rdquo;, Aegisub will do nothing if the script resolution doesn\u0026rsquo;t\nmatch the video resolution. If set to \u0026ldquo;ask\u0026rdquo;, Aegisub will ask you if you want\nto change the script resolution to match the video resolution if they don\u0026rsquo;t\nmatch. If set to \u0026ldquo;always\u0026rdquo;, Aegisub will always resample the script to\nmatch the video resolution automatically.\u003c/dd\u003e\n\u003c/dl\u003e\n\u003ch2 id="interface"\u003eInterface\u003c/h2\u003e\n\u003cp\u003e\u003cimg src="/img/3.2/preferences-interface.png" alt="preferences-interface"\u003e{: class=\u0026ldquo;center\u0026rdquo;}\u003c/p\u003e\n\u003cdl\u003e\n\u003cdt\u003e\u003cstrong\u003eEnable call tips\u003c/strong\u003e\u003c/dt\u003e\n\u003cdd\u003eWhen enabled, Aegisub will detect when you are writing an \u003ca href="/docs/3.2/en/ass_tags/"\u003eoverride tag\u003c/a\u003e and display a small box with a brief reference of the syntax of\nthe tag in question until you close the tag. This is called a \u0026ldquo;call tip\u0026rdquo; and\nthe feature may be familiar to users of various programming IDEs.\u003c/dd\u003e\n\u003cdt\u003e\u003cstrong\u003eOverwrite in time boxes\u003c/strong\u003e\u003c/dt\u003e\n\u003cdd\u003eControls the behavior of all time edit boxes in the program. By default, all\ntime edit boxes in Aegisub behave like as if you had pressed the Insert button,\nso every digit you type overwrites what is already there, and you cannot erase\nnumbers that are already there, you have to overwrite them. Unticking this box\ndisables this behavior and makes the time edit boxes behave just like normal\ntext edit boxes (almost).\u003c/dd\u003e\n\u003cdt\u003e\u003cstrong\u003eEnable syntax highlighting\u003c/strong\u003e\u003c/dt\u003e\n\u003cdd\u003eEnables or disables syntax highlighting of override tags in the main edit\nbox.\u003c/dd\u003e\n\u003cdt\u003e\u003cstrong\u003ePath to dictionary files\u003c/strong\u003e\u003c/dt\u003e\n\u003cdd\u003eDecides where Aegisub will look for dictionary files for its spellchecker and\nthesaurus. By default it looks in \u003ccode\u003e?data/dictionaries\u003c/code\u003e, but if you have your\nown dictionaries in the correct format somewhere else, feel free to point\nAegisub there instead.\u003c/dd\u003e\n\u003cdt\u003e\u003cstrong\u003eFont\u003c/strong\u003e\u003c/dt\u003e\n\u003cdd\u003eDecides the font and fontsize used for the subtitle edit box and other edit\nboxes.\u003c/dd\u003e\n\u003cdt\u003e\u003cstrong\u003eMaximum characters per line\u003c/strong\u003e\u003c/dt\u003e\n\u003cdd\u003eIf the value of the character counter is higher than this number, the\nbackground will turn red to alert you that you have exceeded the maximum line\nlength. The maximum length is not enforced in any other way.\u003c/dd\u003e\n\u003cdt\u003e\u003cstrong\u003eCharacters Per Second Warning Threshold\u003c/strong\u003e\u003c/dt\u003e\n\u003cdt\u003e\u003cstrong\u003eCharacters Per Second Error Threshold\u003c/strong\u003e\u003c/dt\u003e\n\u003cdd\u003eThe thresholds at which the background CPS column begins to be colored and when the error color is\nreached.\u003c/dd\u003e\n\u003cdt\u003e\u003cstrong\u003eIgnore whitespace\u003c/strong\u003e\u003c/dt\u003e\n\u003cdd\u003eIf enabled, whitespace will not be included in the character count.\u003c/dd\u003e\n\u003cdt\u003e\u003cstrong\u003eIgnore punctuation\u003c/strong\u003e\u003c/dt\u003e\n\u003cdd\u003eIf enabled, punctuation will not be included in the character count.\u003c/dd\u003e\n\u003cdt\u003e\u003cstrong\u003eFocus grid on click\u003c/strong\u003e\u003c/dt\u003e\n\u003cdd\u003eWhen enabled, the subtitles grid acts as its own area of the program and it\ncan have focus, just like the audio or the video can, and while it does you can\nuse the arrow keys/mouse wheel to scroll around it etc. On the other hand, if\nyou disable this option, the focus will stay where it was before whenever you\nclick in the grid. This means you can\u0026rsquo;t use keyboard shortcuts in the grid\nanymore, but on the other hand it means you can click in the grid to go to a\nline without losing the audio focus and so on. Use at your own discretion.\u003c/dd\u003e\n\u003cdt\u003e\u003cstrong\u003eHighlight visible subtitles\u003c/strong\u003e\u003c/dt\u003e\n\u003cdd\u003eWhen enabled, all subtitle lines that are currently visible in the video\nframe (or at least \u003cem\u003eshould\u003c/em\u003e be visible; Aegisub does not account for alpha and\nsuch trickery in this case; it cares only about the timing of the line) will be\nhighlighted in the grid with a special background color (see the \u0026ldquo;Line in frame\nbackground\u0026rdquo; option below).\u003c/dd\u003e\n\u003cdt\u003e\u003cstrong\u003eHide overrides symbol\u003c/strong\u003e\u003c/dt\u003e\n\u003cdd\u003eThe character that will be shown instead of override blocks if tag hiding is\nactive. Note that despite the name, this can be more than one character if you\nso desire.\u003c/dd\u003e\n\u003cdt\u003e\u003cstrong\u003eFont\u003c/strong\u003e\u003c/dt\u003e\n\u003cdd\u003eDecides the font and font size of all text in the grid.\u003c/dd\u003e\n\u003c/dl\u003e\n\u003ch3 id="colors"\u003eColors\u003c/h3\u003e\n\u003cp\u003e\u003cimg src="/img/3.2/preferences-colours.png" alt="preferences-colours"\u003e{: class=\u0026ldquo;center\u0026rdquo;}\u003c/p\u003e\n\u003ch4 id="audio-display"\u003eAudio Display\u003c/h4\u003e\n\u003cdl\u003e\n\u003cdt\u003e\u003cstrong\u003ePlay cursor\u003c/strong\u003e\u003c/dt\u003e\n\u003cdd\u003eThe color of the playback cursor.\u003c/dd\u003e\n\u003cdt\u003e\u003cstrong\u003eLine boundary start\u003c/strong\u003e\u003c/dt\u003e\n\u003cdt\u003e\u003cstrong\u003eLine boundary end\u003c/strong\u003e\u003c/dt\u003e\n\u003cdt\u003e\u003cstrong\u003eLine boundary inactive line\u003c/strong\u003e\u003c/dt\u003e\n\u003cdd\u003eThe respective colors of the various line boundary markers.\u003c/dd\u003e\n\u003cdt\u003e\u003cstrong\u003eSyllable boundary\u003c/strong\u003e\u003c/dt\u003e\n\u003cdd\u003eThe color of a syllable boundary line in karaoke mode.\u003c/dd\u003e\n\u003c/dl\u003e\n\u003ch3 id="color-schemes"\u003eColor Schemes\u003c/h3\u003e\n\u003cp\u003eControls the color scheme used for the waveform/spectrum and some of the UI\nelements. Aegisub currently does not have a UI for editing the color schemes or\ncreating new ones, but if you\u0026rsquo;re feeling adventurous they can be found in\nconfig.json.\u003c/p\u003e\n\u003ch4 id="syntax-highlighting"\u003eSyntax Highlighting\u003c/h4\u003e\n\u003cdl\u003e\n\u003cdt\u003e\u003cstrong\u003eNormal\u003c/strong\u003e\u003c/dt\u003e\n\u003cdd\u003eThe color of normal text.\u003c/dd\u003e\n\u003cdt\u003e\u003cstrong\u003eBrackets\u003c/strong\u003e\u003c/dt\u003e\n\u003cdd\u003eThe color of brackets that start/end override blocks.\u003c/dd\u003e\n\u003cdt\u003e\u003cstrong\u003eSlashes and parentheses\u003c/strong\u003e\u003c/dt\u003e\n\u003cdd\u003eThe color of backslashes and parentheses within override blocks.\u003c/dd\u003e\n\u003cdt\u003e\u003cstrong\u003eTags\u003c/strong\u003e\u003c/dt\u003e\n\u003cdd\u003eThe color of tag names within override blocks.\u003c/dd\u003e\n\u003cdt\u003e\u003cstrong\u003eParameters\u003c/strong\u003e\u003c/dt\u003e\n\u003cdd\u003eThe color of parameters to override tags.\u003c/dd\u003e\n\u003cdt\u003e\u003cstrong\u003eError\u003c/strong\u003e\u003c/dt\u003e\n\u003cdd\u003eThe error color for invalid syntax within an override block.\u003c/dd\u003e\n\u003cdt\u003e\u003cstrong\u003eError background\u003c/strong\u003e\u003c/dt\u003e\n\u003cdd\u003eBackground color for errors.\u003c/dd\u003e\n\u003cdt\u003e\u003cstrong\u003eLine break\u003c/strong\u003e\u003c/dt\u003e\n\u003cdd\u003eColor for \\N, \\n and \\h outside of override blocks.\u003c/dd\u003e\n\u003cdt\u003e\u003cstrong\u003eKaraoke templates\u003c/strong\u003e\u003c/dt\u003e\n\u003cdd\u003eColor for karaoke templater blocks on template lines.\u003c/dd\u003e\n\u003c/dl\u003e\n\u003ch4 id="subtitle-grid"\u003eSubtitle Grid\u003c/h4\u003e\n\u003cdl\u003e\n\u003cdt\u003e\u003cstrong\u003eStandard foreground\u003c/strong\u003e\u003c/dt\u003e\n\u003cdt\u003e\u003cstrong\u003eStandard background\u003c/strong\u003e\u003c/dt\u003e\n\u003cdd\u003eThe normal color of lines in the grid. \u0026ldquo;Foreground\u0026rdquo; is the text color, and\n\u0026ldquo;Background\u0026rdquo; is obviously the background color.\u003c/dd\u003e\n\u003cdt\u003e\u003cstrong\u003eSelection foreground\u003c/strong\u003e\u003c/dt\u003e\n\u003cdt\u003e\u003cstrong\u003eSelection background\u003c/strong\u003e\u003c/dt\u003e\n\u003cdd\u003eThe color of selected lines in the grid.\u003c/dd\u003e\n\u003cdt\u003e\u003cstrong\u003eComment background\u003c/strong\u003e\u003c/dt\u003e\n\u003cdt\u003e\u003cstrong\u003eSelected comment background\u003c/strong\u003e\u003c/dt\u003e\n\u003cdd\u003eThe background color of commented-out lines and selected commented-out lines,\nrespectively.\u003c/dd\u003e\n\u003cdt\u003e\u003cstrong\u003eCollision foreground\u003c/strong\u003e\u003c/dt\u003e\n\u003cdd\u003eThe text color of lines whose timings overlap with the currently active line.\u003c/dd\u003e\n\u003cdt\u003e\u003cstrong\u003eLine in frame background\u003c/strong\u003e\u003c/dt\u003e\n\u003cdd\u003eThe background color of lines currently visible in the video frame.\u003c/dd\u003e\n\u003cdt\u003e\u003cstrong\u003eHeader\u003c/strong\u003e\u003c/dt\u003e\n\u003cdt\u003e\u003cstrong\u003eLeft column\u003c/strong\u003e\u003c/dt\u003e\n\u003cdt\u003e\u003cstrong\u003eActive line border\u003c/strong\u003e\u003c/dt\u003e\n\u003cdt\u003e\u003cstrong\u003eLines\u003c/strong\u003e\u003c/dt\u003e\n\u003cdd\u003eThe color of the grid lines and fixed columns/headers.\u003c/dd\u003e\n\u003c/dl\u003e\n\u003ch2 id="hotkeys"\u003eHotkeys\u003c/h2\u003e\n\u003cp\u003e\u003cimg src="/img/3.2/preferences-hotkeys.png" alt="preferences-hotkeys"\u003e{: class=\u0026ldquo;center\u0026rdquo;}\u003c/p\u003e\n\u003cp\u003eThis page lists all hotkeys currently set in Aegisub, and allows you to add,\nremove or change them.\u003c/p\u003e\n\u003ch3 id="hotkey-contexts"\u003eHotkey Contexts\u003c/h3\u003e\n\u003cp\u003eAegisub supports setting different hotkeys depending on what part of the\nprogram has focus.\u003c/p\u003e\n\u003cp\u003eThe \u0026ldquo;Default\u0026rdquo; group is for hotkeys which should work regardless of what in\nAegisub currently has keyboard focus. Hotkeys set in Default are overridden by\nthe more specific categories when applicable.\u003c/p\u003e\n\u003cp\u003eThe \u0026ldquo;Always\u0026rdquo; group sets hotkeys which are enabled by Medusa mode, which apply\neverywhere in the program and override all other keypresses, including ordinary\ntyping in edit boxes.\u003c/p\u003e\n\u003cp\u003eAll other hotkey contexts should be self-explanatory.\u003c/p\u003e\n\u003ch3 id="setting-hotkeys"\u003eSetting hotkeys\u003c/h3\u003e\n\u003cp\u003eTo modify a hotkey, first click on the row to select it, then click on the\nhotkey field in the row, then press the key(s) that should trigger the command.\nAccept the new hotkey by clicking on another row.\u003c/p\u003e\n\u003cp\u003eTo add a new hotkey, select the context you want to add the hotkey to, then\nclick the New button. Enter the \u003ca href="/docs/3.2/en/commands/"\u003ecommand name\u003c/a\u003e, then set the hotkey\nas when editing them.\u003c/p\u003e\n\u003ch2 id="backup"\u003eBackup\u003c/h2\u003e\n\u003cp\u003e\u003cimg src="/img/3.2/preferences-backup.png" alt="preferences-backup"\u003e{: class=\u0026ldquo;center\u0026rdquo;}\u003c/p\u003e\n\u003ch3 id="automatic-save"\u003eAutomatic Save\u003c/h3\u003e\n\u003cdl\u003e\n\u003cdt\u003e\u003cstrong\u003eEnable\u003c/strong\u003e\u003c/dt\u003e\n\u003cdd\u003eIf enabled, Aegisub will periodically save a copy of the script you are\nworking on to the autosave path.\u003c/dd\u003e\n\u003cdt\u003e\u003cstrong\u003eInterval in seconds\u003c/strong\u003e\u003c/dt\u003e\n\u003cdd\u003eHow often should Aegisub autosave.\u003c/dd\u003e\n\u003cdt\u003e\u003cstrong\u003ePath\u003c/strong\u003e\u003c/dt\u003e\n\u003cdd\u003eDecides where to save autosaved copies of scripts you are working on. By\ndefault set to \u003ccode\u003eautosave\u003c/code\u003e in your Aegisub \u003ccode\u003e?user\u003c/code\u003e directory (see the\n\u003ca href="/docs/3.2/en/aegisub_path_specifiers/"\u003eAegisub_path_specifiers\u003c/a\u003e page for details).\u003c/dd\u003e\n\u003cdt\u003e\u003cstrong\u003eAutosave after every change\u003c/strong\u003e\u003c/dt\u003e\n\u003cdd\u003eIf enabled, Aegisub will save the file after every change made to it. Note\nthat this currently causes some problems with the undo system.\u003c/dd\u003e\n\u003c/dl\u003e\n\u003ch3 id="automatic-backup"\u003eAutomatic Backup\u003c/h3\u003e\n\u003cdl\u003e\n\u003cdt\u003e\u003cstrong\u003eEnable\u003c/strong\u003e\u003c/dt\u003e\n\u003cdd\u003eIf enabled, Aegisub will save a backup copy of each script you open,\nimmediately on opening it. By default, it is saved to \u003ccode\u003e?user/autoback/\u003c/code\u003e, but\nthis can be changed (see below).\u003c/dd\u003e\n\u003cdt\u003e\u003cstrong\u003ePath\u003c/strong\u003e\u003c/dt\u003e\n\u003cdd\u003eDecides where to save automatic backup copies of scripts. By default set to\n\u003ccode\u003eautoback\u003c/code\u003e in your Aegisub \u003ccode\u003e?user\u003c/code\u003e directory.\u003c/dd\u003e\n\u003c/dl\u003e\n\u003ch2 id="automation"\u003eAutomation\u003c/h2\u003e\n\u003cp\u003e\u003cimg src="/img/3.2/preferences-automation.png" alt="preferences-automation"\u003e{: class=\u0026ldquo;center\u0026rdquo;}\u003c/p\u003e\n\u003cdl\u003e\n\u003cdt\u003e\u003cstrong\u003eBase path\u003c/strong\u003e\u003c/dt\u003e\n\u003cdd\u003eA base directory where you put non-autoloaded automation scripts. Used only\nfor saving paths to script files in the subtitles.\u003c/dd\u003e\n\u003cdt\u003e\u003cstrong\u003eInclude path\u003c/strong\u003e\u003c/dt\u003e\n\u003cdd\u003eList of directories where include files and modules are searched for.\nDirectories are separated with a pipe character, \u003ccode\u003e|\u003c/code\u003e.\u003c/dd\u003e\n\u003cdt\u003e\u003cstrong\u003eAuto-load path\u003c/strong\u003e\u003c/dt\u003e\n\u003cdd\u003eList of directories that are searched for scripts on startup, which are then\nautomatically loaded. Directories are separated with a pipe character, \u003ccode\u003e|\u003c/code\u003e.\u003c/dd\u003e\n\u003cdt\u003e\u003cstrong\u003eTrace level\u003c/strong\u003e\u003c/dt\u003e\n\u003cdd\u003eWhen a script sends a message to the debug console it can also specify a\ntrace level. If the trace level of a message is lower than the value given\nhere, the message is not logged. The names given to the levels are only\nsuggestions and they don\u0026rsquo;t have any effect on the execution of the script.\n(i.e. a \u0026ldquo;Fatal\u0026rdquo; level message will not cause the script to terminate.)\u003c/dd\u003e\n\u003cdt\u003e\u003cstrong\u003eThread priority\u003c/strong\u003e\u003c/dt\u003e\n\u003cdd\u003ePriority given to the script execution thread. If you\u0026rsquo;re on a\nsingle-core/single-CPU system having this on lower than normal will make other\nprograms more responsive while long-running scripts are active.\u003c/dd\u003e\n\u003cdt\u003e\u003cstrong\u003eAutoreload on Export\u003c/strong\u003e\u003c/dt\u003e\n\u003cdd\u003eAutomatically reloads the specified sets of scripts when the \u003ca href="/docs/3.2/en/exporting/"\u003eExporting\u003c/a\u003e\ndialogue is opened. In that case you will have to enter the\n\u003ca href="/docs/3.2/en/automation/manager/"\u003eAutomation/Manager\u003c/a\u003e window and determine the cause of the error.\u003c/dd\u003e\n\u003c/dl\u003e\n\u003ch2 id="advanced-audio"\u003eAdvanced Audio\u003c/h2\u003e\n\u003cp\u003e\u003cimg src="/img/3.2/preferences-advanced-audio.png" alt="preferences-advanced-audio"\u003e{: class=\u0026ldquo;center\u0026rdquo;}\u003c/p\u003e\n\u003cdl\u003e\n\u003cdt\u003e\u003cstrong\u003eAudio provider\u003c/strong\u003e\u003c/dt\u003e\n\u003cdd\u003eWhat backend to to use for loading audio. Currently there are only two\nmethods.\n\u003cp\u003e\u003cem\u003eavisynth\u003c/em\u003e (Windows only)\n: Uses \u003ca href="http://www.avisynth.org"\u003eAvisynth\u003c/a\u003e to load audio. All file types\nwill be loaded with DirectShowSource(), except for AVS files which will\nbe opened with Import().\u003c/p\u003e\n\u003cp\u003e\u003cem\u003eFFmpegSource\u003c/em\u003e\n: Uses \u003ca href="http://code.google.com/p/ffmpegsource/"\u003eFFMS2\u003c/a\u003e to load audio.\nGenerally more reliable than opening via DirectShowSource, but slower\ndue to that it has to index files first.\u003c/p\u003e\n\u003cp\u003eRegardless of this setting, the internal PCM WAV reader will always be\ntried first for WAV files.\u003c/p\u003e\n\u003c/dd\u003e\n\u003cdt\u003e\u003cstrong\u003eAudio player\u003c/strong\u003e\u003c/dt\u003e\n\u003cdd\u003eWhat method to use for playing back audio. The options depend on the platform.\n\u003cp\u003e\u003cem\u003eDirectSound\u003c/em\u003e (Windows only)\n: Uses Microsoft DirectSound to play back audio. This is the best\ntested and most stable audio player.\u003c/p\u003e\n\u003cp\u003e\u003cem\u003eDirectSound-old\u003c/em\u003e (Windows only)\n: Aegisub\u0026rsquo;s original implementation of the DirectSound player. If\nyou have audio playback problems when using the DirectSound player this\none may work better (but probably won\u0026rsquo;t).\u003c/p\u003e\n\u003cp\u003e\u003cem\u003ealsa\u003c/em\u003e (Linux only)\n: Uses the \u003ca href="http://www.alsa-project.org/"\u003eAdvanced Linux Sound\nArchitecture\u003c/a\u003e to play back audio. ALSA is\nthe native sound architecture of Linux and is not available on any\nother systems.\u003c/p\u003e\n\u003cp\u003e\u003cem\u003epulse\u003c/em\u003e (Linux and other *NIX-like systems)\n: Plays sound back through a \u003ca href="http://pulseaudio.org/"\u003ePulseAudio\u003c/a\u003e\nsound server. This is the least-tested and least likely to work of the\naudio players, and is only recommended if your audio setup makes\nnon-pulse players undesirable.\u003c/p\u003e\n\u003cp\u003e\u003cem\u003eportaudio\u003c/em\u003e\n: Use the \u003ca href="http://www.portaudio.com/"\u003ePortAudio\u003c/a\u003e API to play back\nsound. PortAudio has different playback implementations on different\nplatforms. On most Unices it uses Open Sound System (OSS) for output.\nIt is currently the only Windows audio player which supports\nselecting the output device.\u003c/p\u003e\n\u003cp\u003e\u003cem\u003eopenal\u003c/em\u003e\n: Uses the \u003ca href="http://www.openal.com/"\u003eOpenAL\u003c/a\u003e API to play back audio.\nThis is the recommended player on OS X. It is normally not included in\nwindows builds due to that it adds an extra dependency for little\nbenefit.\u003c/p\u003e\n\u003c/dd\u003e\n\u003c/dl\u003e\n\u003ch3 id="cache"\u003eCache\u003c/h3\u003e\n\u003cdl\u003e\n\u003cdt\u003e\u003cstrong\u003eCache type\u003c/strong\u003e\u003c/dt\u003e\n\u003cdd\u003eUse RAM unless you have very little of it, then use Hard Disk. The cache is\nnot needed and not used when PCM WAV files are opened. If you disable caching,\naudio playback might become very unreliable.\u003c/dd\u003e\n\u003cdt\u003e\u003cstrong\u003ePath\u003c/strong\u003e\u003c/dt\u003e\n\u003cdt\u003e\u003cstrong\u003eFile name\u003c/strong\u003e\u003c/dt\u003e\n\u003cdd\u003eThese options determine where the hard disk audio cache will be located. Only\nused if cache is set to hard disk. You shouldn\u0026rsquo;t need to change this unless\nyou\u0026rsquo;re low on disk space. For the name, the string expects a printf-style \u0026ldquo;%i\u0026rdquo;\nparameter, that will be replaced with a number. \u0026ldquo;%02i\u0026rdquo; is used by default.\nDon\u0026rsquo;t change that unless you know what you are doing.\u003c/dd\u003e\n\u003c/dl\u003e\n\u003ch3 id="spectrum"\u003eSpectrum\u003c/h3\u003e\n\u003cdl\u003e\n\u003cdt\u003e\u003cstrong\u003eSpectrum quality\u003c/strong\u003e\u003c/dt\u003e\n\u003cdd\u003eDetermines the quality of the audio spectrum display. Higher quality settings\nresult in larger CPU and RAM use. Each consecutive setting uses a bit more CPU\nthan the previous, and double the amount of RAM.  For 48 kHz sample rate audio,\none minute of audio uses this much memory at the different settings:\n  \u003ctable class="table table-bordered table-condensed"\u003e\r\n    \u003ctr\u003e\u003cth\u003e0 "regular"\u003c/th\u003e\u003ctd\u003e11 MB\u003c/td\u003e\r\n    \u003ctr\u003e\u003cth\u003e1 "better"\u003c/th\u003e\u003ctd\u003e22 MB\u003c/td\u003e\r\n    \u003ctr\u003e\u003cth\u003e2 "high"\u003c/th\u003e\u003ctd\u003e44 MB\u003c/td\u003e\r\n    \u003ctr\u003e\u003cth\u003e3 "insane"\u003c/th\u003e\u003ctd\u003e88 MB\u003c/td\u003e\r\n  \u003c/table\u003e\r\n\u003cp\u003eThe amount of memory used does not depend on the number of channels\n(Aegisub always works in mono) or the bit-depth (the spectrum is always\ncalculated in 32 bit floating point) of the audio.\u003c/p\u003e\n\u003c/dd\u003e\n\u003c/dl\u003e\n\u003cp\u003e{::template name=\u0026ldquo;todo\u0026rdquo;}this is probably wrong{:/}\u003c/p\u003e\n\u003cdl\u003e\n\u003cdt\u003e\u003cstrong\u003eCache memory max\u003c/strong\u003e\u003c/dt\u003e\n\u003cdd\u003eThe maximum amount of memory to use for audio spectrum caching. The results\nof the calculations to display the audio spectrum are cached to make scrolling\nthrough the audio smoother. The amount of spectrum display that can be cached\nin an amount of memory depends on the quality setting above. The default cache\nsize of 128 MB results a little less than 6 minutes of audio at 48 kHz in\nquality 1. If you set this smaller than 5 MB, the default of 128 MB will be\nused instead. You probably shouldn\u0026rsquo;t set this to more than 1/4 of your amount\nof physical RAM installed.\u003c/dd\u003e\n\u003c/dl\u003e\n\u003ch3 id="avisynth-windows-only"\u003eAvisynth (Windows only)\u003c/h3\u003e\n\u003cdl\u003e\n\u003cdt\u003e\u003cstrong\u003eAvisynth down-mixer\u003c/strong\u003e\u003c/dt\u003e\n\u003cdd\u003eAegisub can only use mono (single-channel) audio. This option determines\nwhich Avisynth function to use to convert audio to mono.\u003c/dd\u003e\n\u003cdt\u003e\u003cstrong\u003eForce sample rate\u003c/strong\u003e\u003c/dt\u003e\n\u003cdd\u003eConvert all audio opened to the given sample rate. Forcing the sample rate to\nthe sample rate used by your sound card (rather than having the audio player do\nit) can potentially improve audio performance and fix playback issues.\u003c/dd\u003e\n\u003c/dl\u003e\n\u003ch3 id="ffmpegsource"\u003eFFmpegSource\u003c/h3\u003e\n\u003cdl\u003e\n\u003cdt\u003e\u003cstrong\u003eAudio indexing error handling mode\u003c/strong\u003e\u003c/dt\u003e\n\u003cdd\u003eWhat to do if an error occurs while indexing an audio track.\n\u003cp\u003e\u003cem\u003eIgnore\u003c/em\u003e\n: Ignore the error and continue decoding the file. This mode can let you\nopen some corrupted files, but can cause audio/video desync.\u003c/p\u003e\n\u003cp\u003e\u003cem\u003eClear\u003c/em\u003e\n: Pretend that the track with the error does not exist in the file.\u003c/p\u003e\n\u003cp\u003e\u003cem\u003eStop\u003c/em\u003e (default)\n: Stop indexing at the point of the error and return all audio data before\nthe error. This is the default due to that corrupted audio packets at\nthe very end of files are fairly common.\u003c/p\u003e\n\u003cp\u003e\u003cem\u003eAbort\u003c/em\u003e\n: Refuse to open the file at all.\u003c/p\u003e\n\u003c/dd\u003e\n\u003cdt\u003e\u003cstrong\u003eAlways index all audio tracks\u003c/strong\u003e\u003c/dt\u003e\n\u003cdd\u003eIf disabled, opening a video file will only index the video tracks, forcing\nyou to reindex the file to open audio tracks from the same file.\u003c/dd\u003e\n\u003c/dl\u003e\n\u003ch3 id="portaudio"\u003ePortaudio\u003c/h3\u003e\n\u003cdl\u003e\n\u003cdt\u003e\u003cstrong\u003ePortaudio device\u003c/strong\u003e\u003c/dt\u003e\n\u003cdd\u003eWhat output device to use when playing audio through portaudio.\u003c/dd\u003e\n\u003c/dl\u003e\n\u003ch2 id="advanced-video"\u003eAdvanced Video\u003c/h2\u003e\n\u003cp\u003e\u003cimg src="/img/3.2/preferences-advanced-video.png" alt="preferences-advanced-video"\u003e{: class=\u0026ldquo;center\u0026rdquo;}\u003c/p\u003e\n\u003cdl\u003e\n\u003cdt\u003e\u003cstrong\u003eVideo provider\u003c/strong\u003e\u003c/dt\u003e\n\u003cdd\u003eDecides what method Aegisub should use to load video. What options you have\navailable here depends on how your copy of Aegisub was compiled and what\noperating system you are running under. The following alternatives exist:\n\u003cp\u003e\u003cem\u003eavisynth\u003c/em\u003e (Windows only)\n: Uses \u003ca href="http://www.avisynth.org"\u003eAvisynth\u003c/a\u003e to load video. Versatile,\nsupports loading almost all common formats as well as .d2v files\n(indexed DVD VOBs) if the correct plugin is supplied. Note that Aegisub\ncan install its own avisynth.dll instead of using your system\ninstallation if so desired. Requires Video for Windows decoders for AVI\nfiles for best performance. Uses DirectShow for most formats, so it\nisn\u0026rsquo;t recommended for anything but AVI, d2v and opening Avisynth\nscripts.\u003c/p\u003e\n\u003cp\u003e\u003cem\u003eFFmpegSource\u003c/em\u003e\n: Uses \u003ca href="http://code.google.com/p/ffmpegsource/"\u003eFFMS2\u003c/a\u003e to load video.\nGenerally the most reliable option.\u003c/p\u003e\n\u003c/dd\u003e\n\u003cdt\u003e\u003cstrong\u003eSubtitles provider\u003c/strong\u003e\u003c/dt\u003e\n\u003cdd\u003eDecides what backend Aegisub uses to render subtitles on the video.\nIf you install additional CSRI renderers such as VSFilterMod or\nxy-VSFilter (by placing the dlls in the CSRI directory within Aegisub\u0026rsquo;s\ndirectory), they will be listed here along with the default ones.\n\u003cp\u003e\u003cem\u003eCSRI/vsfilter_textsub\u003c/em\u003e (Windows only)\n: Use VSFilter 2.40 to render subtitles. This is the standard subtitle\nrenderer which defines the ASS format used by Aegisub.\u003c/p\u003e\n\u003cp\u003e\u003cem\u003elibass\u003c/em\u003e\n: Use \u003ca href="http://code.google.com/p/libass/"\u003elibass\u003c/a\u003e to render subtitles.\nlibass is far faster than VSFilter and (somewhat) cross-platform, but\nunfortunately still has some rendering differences from VSFilter and\nfont-related issues on Windows. If you are doing complex typesetting\nthat will be \u003ca href="/docs/3.2/en/attaching_subtitles_to_video/#softsubbing"\u003esoftsubbed\u003c/a\u003e it\nis a good idea to check your work with both VSFilter and libass, as an\nincreasing number of users are using libass.\u003c/p\u003e\n\u003c/dd\u003e\n\u003cdt\u003e\u003cstrong\u003eForce BT.601\u003c/strong\u003e\u003c/dt\u003e\n\u003cdd\u003ePretend all YUV videos are BT.601, for VSFilter compatibility.\n\u003cp\u003eWhen VSFilter is used as a DirectShow filter, it always uses the BT.601\ncolor matrix for converting the subtitles from RGB to YUV. This means that\nif the video uses BT.709 (as most HD video and the occasional DVD does),\ncolors which match the video in Aegisub will not match the video in the\nplayer. This option makes Aegisub always convert videos to RGB using\nBT.601, making the colors shown in Aegisub incorrect, but making it so that\nif the colors match in Aegisub, they will match in the player.\u003c/p\u003e\n\u003cp\u003eTo make things more exciting, VSFilter will use the \u003cem\u003ecorrect\u003c/em\u003e color space\nwhen used as the internal subtitle renderer in MPC-HC, so enabling this\noption will result in \u003cem\u003emismatched\u003c/em\u003e colors in that case. As the ISR is\ncurrently broken in many ways (e.g. it is impossible to accurately position\nsubtitles with it), we recommend not worrying about it for now.\u003c/p\u003e\n\u003cp\u003eThis comparison may make this clearer:\u003c/p\u003e\n\u003cp\u003e\u003cimg src="/img/3.2/bt601.png" alt="bt601"\u003e\u003c/p\u003e\n\u003cp\u003eAegisub now writes what colorspace should be used for RGB -\u0026gt; YUV\nconversions to the subtitle file, so hopefully this mess will be resolved\nby renderer improvements sometime in the future.\u003c/p\u003e\n\u003c/dd\u003e\n\u003c/dl\u003e\n\u003ch3 id="avisynth"\u003eAvisynth\u003c/h3\u003e\n\u003cdl\u003e\n\u003cdt\u003e\u003cstrong\u003eAllow pre-2.56a Avisynth\u003c/strong\u003e\u003c/dt\u003e\n\u003cdd\u003eSupport using ancient versions of Avisynth that a few people refuse to\nupgrade past for various bad reasons.\u003c/dd\u003e\n\u003cdt\u003e\u003cstrong\u003eAvisynth memory limit\u003c/strong\u003e\u003c/dt\u003e\n\u003cdd\u003eFrame cache memory limit for Avisynth. Raising this generally does not\nimprove performance and should be done only if you\u0026rsquo;re opening overcomplicated\nAvisynth scripts directly.\u003c/dd\u003e\n\u003c/dl\u003e\n\u003ch3 id="ffmpegsource-1"\u003eFFmpegSource\u003c/h3\u003e\n\u003cdl\u003e\n\u003cdt\u003e\u003cstrong\u003eDebug log verbosity\u003c/strong\u003e\u003c/dt\u003e\n\u003cdd\u003eSet ffmpeg/libav\u0026rsquo;s verbosity level. Only has an effect when you have a\ndebugger attached to Aegisub.\u003c/dd\u003e\n\u003cdt\u003e\u003cstrong\u003eDecoding threads\u003c/strong\u003e\u003c/dt\u003e\n\u003cdd\u003eMaximum number of threads to use to decode video, or -1 to choose\nautomatically. Setting this to 1 can fix some decoding issues at the cost of\nperformance. There is rarely any reason to set it to a value other than 1 or\n-1.\u003c/dd\u003e\n\u003cdt\u003e\u003cstrong\u003eEnable unsafe seeking\u003c/strong\u003e\u003c/dt\u003e\n\u003cdd\u003eDisable some of FFMS2\u0026rsquo;s sanity checks when seeking in video. Makes it\npossible to open some files which FFMS2 cannot seek frame-accurately in.\u003c/dd\u003e\n\u003c/dl\u003e\n'},{id:26,href:"/docs/3.2/en/properties/",title:"Script Properties",description:null,content:'\u003cp\u003eThe \u003cstrong\u003escript properties\u003c/strong\u003e are some headers and other options that affect the\nentire script in various ways. They can be accessed from the \u003cem\u003eFile menu\u003c/em\u003e -\u0026gt;\n\u003cem\u003eProperties\u003c/em\u003e.\u003c/p\u003e\n\u003cp\u003e\u003cimg src="/img/3.2/Properties.png" alt="Properties"\u003e{: class=\u0026ldquo;center\u0026rdquo;}\u003c/p\u003e\n\u003cp\u003eThe properties are:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eTitle\u003c/strong\u003e, \u003cstrong\u003eOriginal script\u003c/strong\u003e, \u003cstrong\u003eTranslation\u003c/strong\u003e, \u003cstrong\u003eEditing\u003c/strong\u003e, \u003cstrong\u003eTiming\u003c/strong\u003e, \u003cstrong\u003eSynch point\u003c/strong\u003e, \u003cstrong\u003eUpdated by\u003c/strong\u003e and \u003cstrong\u003eUpdate details\u003c/strong\u003e - These are for informational purposes only and do not affect rendering in any way. Set them to appropriate values if you find them useful.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eResolution\u003c/strong\u003e, \u003cstrong\u003eYCbCr Matrix\u003c/strong\u003e, \u003cstrong\u003eScale border and shadow\u003c/strong\u003e - See the \u003ca href="/docs/3.2/en/script_resolution/"\u003eScript Resolution\u003c/a\u003e page for the meaning of these fields.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eWrap style\u003c/strong\u003e - Controls how the subtitle renderer will break lines that are too long to fit on one line. The modes are:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e0 - The default mode. \u0026ldquo;Smart\u0026rdquo; wrapping; if a line is too long to fit on a line by itself, breaks it into two roughly evenly long lines, but prefers the top line to be wider. \u003ctt\u003e\\N\u003c/tt\u003e (note capital N) can be used to insert a manual linebreak.\u003c/li\u003e\n\u003cli\u003e1 - Inserts a linebreak when the line reaches the edges of the frame (minus margins); i.e. if it\u0026rsquo;s just one word too long to fit on a line by itself, you get the last word all by itself on the bottom line. Almost never useful. As with 0, \u003ctt\u003e\\N\u003c/tt\u003e can be used for manual linebreaks.\u003c/li\u003e\n\u003cli\u003e2 - No automatic linewrapping at all; if a line is too long to fit inside the video frame, it will just continue outside the frame. \u003ctt\u003e\\n\u003c/tt\u003e and \u003ctt\u003e\\N\u003c/tt\u003e can be used to insert manual linebreaks.\u003c/li\u003e\n\u003cli\u003e3 - Same as mode 0, but prefers the bottom line to be wider. Note that for a long time VSFilter\u0026rsquo;s implementation of this was buggy and would sometimes insert extra blank lines or have lines with a single word on them.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThe wrapping mode should almost always be zero.\nMode two is sometimes useful for long lines which are scrolled or manually line-broken, but should be set on a per-line basis with the \u003ca href="/docs/3.2/en/ass_tags/#/q"\u003e\\q\u003c/a\u003e tag.\u003c/p\u003e\n'},{id:27,href:"/docs/3.2/en/attachment_manager/",title:"Attachment Manager",description:null,content:'\u003cp\u003eThe attachment manager allows you to attach fonts and/or pictures to your\nscript (by encoding them as text). This is occasionally useful for sharing\nfonts between everyone who is working on a script without having to send the\nfonts as separate files. However, it is quite limited and is prone to causing\nproblems.\u003c/p\u003e\n\u003ch2 id="overview"\u003eOverview\u003c/h2\u003e\n\u003cp\u003e\u003cimg src="/img/3.2/Attachment_list.png" alt="Attachment_list"\u003e{: class=\u0026ldquo;center\u0026rdquo;}\u003c/p\u003e\n\u003cp\u003eThe entire dialogue is fairly self-explanatory. The two \u0026ldquo;Attach \u0026hellip;\u0026rdquo; buttons\nadd attachments, \u0026ldquo;Extract\u0026rdquo; extracts existing attachments into separate files,\nand \u0026ldquo;Delete\u0026rdquo; deletes attachments from the subtitles file.\u003c/p\u003e\n\u003ch2 id="limitations-and-downsides"\u003eLimitations and downsides\u003c/h2\u003e\n\u003ch3 id="supported-formats"\u003eSupported formats\u003c/h3\u003e\n\u003cp\u003eThe SSA format specification only allows certain filetypes to be attached. For\nfonts, only .ttf is allowed. For pictures, .bmp, .gif, .ico, .jpg and .wmf are\nallowed (note the absence of .png). None of the SSA commands which \u003cem\u003euse\u003c/em\u003e the\nimages are implemented in anything but SubStation Alpha, so it is very unlikely\nthat attaching pictures is actually a useful thing to do.\u003c/p\u003e\n\u003ch3 id="compatibility-issues"\u003eCompatibility issues\u003c/h3\u003e\n\u003cp\u003eMany SSA/ASS editors ignore or strip attachments. The original SubStation Alpha\n(v4.08) will work fine, but only for real SSA files. Sabbu will complain about\nunrecognized fields, and strip the attachments if you save the file. Most other\neditors either ignore the attachments or crash when encountering them.\u003c/p\u003e\n\u003cp\u003eA notable exception is mkvmerge, which will convert the attached files to\nMatroska attachments on muxing. If you demux the script again, the attachments\nwill be stripped from the script, but they\u0026rsquo;re still there as MKV attachments.\u003c/p\u003e\n\u003ch3 id="size"\u003eSize\u003c/h3\u003e\n\u003cp\u003eUnfortunately, storing binary data as text (in this case, a variant of\nUUEncoding) is not very efficient. The attached files will take considerably\nmore space as script attachments than they do as separate files.\u003c/p\u003e\n\u003ch3 id="speed"\u003eSpeed\u003c/h3\u003e\n\u003cp\u003eAegisub\u0026rsquo;s undo system makes a complete copy of the loaded file on every change.\nNormally this is very fast, but attachments can significantly slow this down\ndue to the large size.\u003c/p\u003e\n'},{id:28,href:"/docs/3.2/en/commands/",title:"Commands",description:null,content:"\u003cpre\u003e\u003ccode class=\"language-haml\"\u003e- require 'enumerator'\r\n\r\n%table{style: 'width: 100%; margin-bottom: 2em'}\r\n  - data.commands_31.each_slice(6) do |slice|\r\n    %tr\r\n      - slice.each do |locale|\r\n        %td\r\n          %a{href: \u0026quot;/docs/3.2/Commands/#{locale[:locale]}/\u0026quot;}= locale[:name]\r\n\r\n- if not defined? commands\r\n  - commands = data.commands_31[0][:commands]\r\n\r\n%table.karatable\r\n  %tr\r\n    %th Name\r\n    %th Display\r\n    %th Help\r\n  - commands.each do |command|\r\n    - unless command.name.start_with? 'recent/'\r\n      %tr\r\n        %td= command.name\r\n        %td= command['display']\r\n        %td= command.help\r\n\u003c/code\u003e\u003c/pre\u003e\n"},{id:29,href:"/docs/3.2/en/aegisub_manual/general_disclaimer/",title:"",description:null,content:"\u003cp\u003e\u003cstrong\u003eThis manual is a work in progress.\u003c/strong\u003e It is at present incomplete and no information in it can be taken for granted. We attempt to be accurate on every point, to a reasonable degree.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eAegisub is software under constant development.\u003c/strong\u003e While it is a goal to provide up-to-date documentation there will almost always be cases where the actual functionality of the program has changed since this documentation was last updated.\u003c/p\u003e\n\u003cp\u003eAll use of the information on this website is made on your own risk. The Aegisub team can not be held responsible for any unexpected operation including but not limited to data loss, software fault or hardware fault resulting from the usage or failure to use the information provided on this web site. You alone are responsible for taking backup copies of your data and keeping these safe.\u003c/p\u003e\n\u003chr\u003e\n\u003cp\u003eWhile the goal of this website is to document the program Aegisub it might at times be required to reference products, services or works by other individuals or corporations.\u003c/p\u003e\n\u003cp\u003eAll use of trademarks is done recognising that these are property of their respective owners.\u003c/p\u003e\n\u003cp\u003eAny reference to the products, services or works of other individuals or corporations does not imply any kind of endorsement of these items from the Aegisub Documentation Team, nor does it imply any kind of endorsement of Aegisub or its documentation from the third party in question.\u003c/p\u003e\n"},{id:30,href:"/docs/3.2/en/aegisub_path_specifiers/",title:"",description:null,content:"\u003cp\u003eAegisub uses a simple system for denoting file locations. Most pathnames in\nAegisub can be written starting with special variables that each refer to\nspecific locations. Note that path specifiers should always have a trailing\nslash unless they are the entire path (i.e. ?scripta doesn\u0026rsquo;t work).\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e?data\u003c/strong\u003e\n:   The location where application data are stored. On Windows this is the\ninstallation directory (the location of the .exe). On Mac OS X this is\ninside the application bundle. On other POSIX-like systems this is\n\u003ccode\u003e$prefix/share/aegisub/\u003c/code\u003e.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e?user\u003c/strong\u003e\n:   The location for user data files, such as configuration\nfiles, automatic back-ups and some additional things. On Windows this\n\u003ccode\u003e%APPDATA%\\Aegisub\\\u003c/code\u003e, on Mac OS X this is \u003ccode\u003e$HOME/Library/Application\r Support/Aegisub/\u003c/code\u003e and on other POSIX-like systems this is\n\u003ccode\u003e$HOME/.aegisub/\u003c/code\u003e. In portable mode this is changed to ?data.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e?temp\u003c/strong\u003e\n:   The system temp directory. Audio cache and any required temporary\nsubtitle files are stored here.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e?local\u003c/strong\u003e\n:   The local user settings directory. Cache files which should be\npersisted across runs, such as FFMS2 indexes and the fontconfig cache are\nstored here. %LOCALAPPDATA%\\Aegisub on recent versions of Windows, and\nequal to ?user everywhere else.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e?script\u003c/strong\u003e\n:   Only defined if a subtitles file is open and saved somewhere, in which\ncase it points to the directory the script is in.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e?video\u003c/strong\u003e\n:   Only defined if a video file is loaded. Points to the directory the\nvideo file in is. Do note that this is not a good place to save things with\ndummy video loaded.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e?audio\u003c/strong\u003e\n:   Only defined if an audio file is loaded. Points to the directory the\naudio file in is. Do note that this is not a good place to save things with\ndummy audio loaded.\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n"},{id:31,href:"/docs/3.2/en/audio_timing_tutorial/",title:"",description:null,content:'\u003col\u003e\n\u003cli\u003eREDIRECT \u003ca href="/docs/3.2/en/audio/#basicaudiotiming"\u003eAudio#basicaudiotiming\u003c/a\u003e\u003c/li\u003e\n\u003c/ol\u003e\n'},{id:32,href:"/docs/3.2/en/automation/included_macros/",title:"",description:null,content:'\u003cp\u003eAegisub includes several macros. Here\u0026rsquo;s a line-up of them.\u003c/p\u003e\n\u003ch2 id="apply-karaoke-template"\u003eApply karaoke template\u003c/h2\u003e\n\u003cp\u003eThis is the macro incantation of Karaoke Templater. See the page on\n\u003ca href="/docs/3.2/en/automation/karaoke_templater/"\u003eKaraoke_Templater\u003c/a\u003e for how to use this.\u003c/p\u003e\n\u003cp\u003eThis macro is only available when there is at least one template line in the\nsubtitle file.\u003c/p\u003e\n\u003ch2 id="make-full-width"\u003eMake full-width\u003c/h2\u003e\n\u003cp\u003eConverts all ASCII characters to Japanese \u0026ldquo;full-width\u0026rdquo; variations of them.\u003c/p\u003e\n\u003cp\u003eThis can be useful if you need to typeset a sign translation vertically,\nsuch that the letters are \u0026ldquo;stacked\u0026rdquo;.\u003c/p\u003e\n\u003cp\u003eThis macro modifies all lines that are currently selected in the subtitles\ngrid.\u003c/p\u003e\n\u003cp\u003e{::template name=\u0026ldquo;examplebox\u0026rdquo;}\nHere\u0026rsquo;s a typeset sign:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e{\\fn@DFPGothic-EB\\fs26\\shad0\\fe128\\bord3\\3c\u0026amp;H25485A\u0026amp;\\c\u0026amp;HDEEBF1\u0026amp;\\pos(456,184)\\frz-90}Sign text\r\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNotice that it uses an \u0026ldquo;@-font\u0026rdquo;, a variation that exists of every CJK font\nthat has \u0026ldquo;fullwidth\u0026rdquo; characters rotated 90 degrees from the baseline.\nFullwidth characters include not just these fullwidth variations of the\nLatin alphabet but also Japanese kana and kanji, hanzi, hanja and various\npunctuation characters.\u003c/p\u003e\n\u003cp\u003eNow after running this macro on the line:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e{\\fn@DFPGothic-EB\\fs26\\shad0\\fe128\\bord3\\3c\u0026amp;H25485A\u0026amp;\\c\u0026amp;HDEEBF1\u0026amp;\\pos(456,184)\\frz-90}Ｓｉｇｎ ｔｅｘｔ\r\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis is what it looks before and after running the macro:\u003c/p\u003e\n\u003cp\u003e\u003cimg src="/img/3.2/StackedSign1.png" alt="StackedSign1"\u003e \u003cimg src="/img/3.2/StackedSign2.png" alt="StackedSign2"\u003e\n{:/}\u003c/p\u003e\n\u003ch2 id="automatic-karaoke-lead-in"\u003eAutomatic karaoke lead-in\u003c/h2\u003e\n\u003cp\u003eAutomatically join several karaoke-timed lines up timing-wise and add\nappropriate \u003ccode\u003e\\k\u003c/code\u003e tags in front of them.\u003c/p\u003e\n\u003cp\u003eThis macro is designed to help creating karaoke effects, most importantly\ncreating transitions and lead-ins for lines. It\u0026rsquo;s well suited for using when\nthe karaoke is timed but before applying effects, such as karaoke templates.\u003c/p\u003e\n\u003cp\u003eThis macro requires at least two lines to be selected and it only works\nsensibly if the start-time of each selected line is larger than the\nstart-time of the selected line that comes before it. It changes the timing\nof the selected lines and adds \u003ccode\u003e\\k\u003c/code\u003e tags at the start of them except the\nfirst.\u003c/p\u003e\n\u003cp\u003e{::template name=\u0026ldquo;examplebox\u0026rdquo;}\nHere\u0026rsquo;s two lines of \u0026ldquo;tightly\u0026rdquo; timed karaoke:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eDialogue: 0,0:00:44.46,0:00:46.28,Default,,0000,0000,0000,,{\\k15}Ne{\\k14}ver {\\k14}gon{\\k13}na {\\k37}give {\\k40}you {\\k49}up\r\nDialogue: 0,0:00:46.57,0:00:48.56,Default,,0000,0000,0000,,{\\k13}Ne{\\k13}ver {\\k13}gon{\\k13}na {\\k36}let {\\k46}you {\\k65}down\r\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eBoth lines start exactly when the first word starts being sung, and they end\nexactly when the last word ends.\u003c/p\u003e\n\u003cp\u003eNow if the \u003cem\u003eAutomatic karaoke lead-in\u003c/em\u003e macro is run on these two lines, they\nare changed into this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eDialogue: 0,0:00:44.46,\u003cu\u003e0:00:46.28\u003c/u\u003e,Default,,0000,0000,0000,,{\\k15}Ne{\\k14}ver {\\k14}gon{\\k13}na {\\k37}give {\\k40}you {\\k49}up\r\nDialogue: 0,\u003cu\u003e0:00:46.28\u003c/u\u003e,0:00:48.56,Default,,0000,0000,0000,,\u003cu\u003e{\\k29}\u003c/u\u003e{\\k13}Ne{\\k13}ver {\\k13}gon{\\k13}na {\\k36}let {\\k46}you {\\k65}down\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThe start-time of the second line is changed so it matches the end-time of\nthe first line, and a \u003ccode\u003e\\k\u003c/code\u003e tag  is added to the start of the line, to make\nup for the shift otherwise created by this. This effectively creates an\nempty syllable that can be used as a \u0026ldquo;spacer\u0026rdquo; to create fade-in and fade-out\neffects.\u003c/p\u003e\n\u003cp\u003eThe macro also shows this message:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eSmallest inter-line duration: 290 milliseconds\r\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis simply says that the smallest duration between two lines it found, was\n290 milliseconds, or 0.29 seconds, so that\u0026rsquo;s as much time you have to make\nfade-in, fade-out and other transition effects, if you want every\nsyllable-highlight to be fully visible.\n{:/}\u003c/p\u003e\n\u003ch2 id="clean-tags"\u003eClean tags\u003c/h2\u003e\n\u003cp\u003eThis macro does various cleaning up on the override tags in all selected\nlines.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eCombines adjacent override blocks (i.e { \u0026hellip; }) except if both of the\nblock contains \\k tags each then they will be left as is\u003c/li\u003e\n\u003cli\u003ePush any \\k tags in override blocks to the front (e.g. from {\\frz90\\k40}\nto {\\k40\\frz90}). Special care will be taken for multiple \\k tags within\none block to preserve the ordering\u003c/li\u003e\n\u003cli\u003eMove line-wide tags (i.e. tags whose effects affect the whole line \u0026ndash; \\a\n\\an \\org \\pos \\move \\fade \\fad) to the beginning of the lines\u003c/li\u003e\n\u003cli\u003eRemove all but first line-wide tags of the same class (note: \\pos and\n\\move are from the same class \u0026ndash; only first of them works in a line,\ntherefore the script will find the first \\move or \\pos and retain whic of\nthe two comes first and remove others. The same are done for \\fad and\n\\fade)\u003c/li\u003e\n\u003cli\u003eRemove spaces in comma-separated parameters (e.g. \\pos(200 , 200) becomes\n\\pos(200,200))\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThis macro is also available as an export filter.\u003c/p\u003e\n\u003cp\u003eThe main intended function of this macro is to make\n\u003ca href="/docs/3.2/en/automation/lua/modules/karaskel.lua/"\u003ekaraskel.lua\u003c/a\u003e split karaoke lines more\nsensibly into syllable structures, see the example.\u003c/p\u003e\n\u003cp\u003eThis macro modifies all selected lines in the grid, re-writing all tag\nblocks in them.\u003c/p\u003e\n\u003cp\u003e{::template name=\u0026ldquo;examplebox\u0026rdquo;}\nOriginal line:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e{\\r\\frz90\\k80}Test {\\r\\fry180\\k60}me\r\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eKaraskel creates these syllable structures:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e0 = {\\r\\frz90}\u003c/li\u003e\n\u003cli\u003e1 = Test {\\r\\fry180}\u003c/li\u003e\n\u003cli\u003e2 = me\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eAfter running \u003cem\u003eClean Tags\u003c/em\u003e on the line:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e{\\k80\\r\\frz90}Test {\\k60\\r\\fry180}me\r\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNow karaskel creates these syllable structures:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e0 =\u003c/li\u003e\n\u003cli\u003e1 = {\\r\\frz90}Test\u003c/li\u003e\n\u003cli\u003e2 = {\\r\\fry180}me\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThe cleaned up version is generally what you\u0026rsquo;d want since it places the\noverride tags inside the syllables they affect.\n{:/}\u003c/p\u003e\n\u003ch2 id="add-edgeblur"\u003eAdd Edgeblur\u003c/h2\u003e\n\u003cp\u003eAdd \u003ca href="/docs/3.2/en/ass_tags/#bluredges"\u003e\u003ccode\u003e\\be1\u003c/code\u003e\u003c/a\u003e to all selected lines. Lightly blurring the\nedges of all dialogue lines can noticeably improve compressibility when\n\u003ca href="/docs/3.2/en/attaching_subtitles_to_video/"\u003ehardsubbing\u003c/a\u003e (especially when using older\ncodecs such as XviD), but edgeblur cannot be set in the style due to format\nlimitations.\u003c/p\u003e\n\u003ch2 id="strip-tags"\u003eStrip tags\u003c/h2\u003e\n\u003cp\u003eRemove all ASS override blocks and the tags within from the selected lines.\u003c/p\u003e\n\u003ch2 id="select-overlaps"\u003eSelect Overlaps\u003c/h2\u003e\n\u003cp\u003eSelect all lines which begin while another line is still active. This can be\nuseful for catching timing errors, or for setting an alternate style for these\nlines, which improves readability.\u003c/p\u003e\n\u003cp\u003e{::template name=\u0026ldquo;automation_navbox\u0026rdquo; /}\u003c/p\u003e\n'},{id:33,href:"/docs/3.2/en/automation/karaoke_templater/",title:"",description:null,content:'\u003cp\u003e\u003cstrong\u003eKaraoke Templater\u003c/strong\u003e is an \u003ca href="/docs/3.2/en/automation/"\u003eAutomation\u003c/a\u003e script that ships with Aegisub. Its\nprimary purpose is to help creating \u003ca href="/docs/3.2/en/glossary/karaoke_effect/"\u003ekaraoke effects\u003c/a\u003e\nwith a specially designed template language. Karaoke Templater is already\ninstalled and ready to use along with Aegisub.\u003c/p\u003e\n\u003ch2 id="tutorials-introducing-karaoke-templater"\u003eTutorials: Introducing Karaoke Templater\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href="/docs/3.2/en/automation/karaoke_templater/tutorial_1/"\u003eA simple example\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href="/docs/3.2/en/automation/karaoke_templater/tutorial_2/"\u003eUsing math expressions\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href="#"\u003eUsing multiple template lines\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href="#"\u003eMore advanced effects with positioned syllables\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e{::template name=\u0026ldquo;todo\u0026rdquo;}Plan more tutorials. Also actually write those above.{:/}\u003c/p\u003e\n\u003ch2 id="reference"\u003eReference\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href="/docs/3.2/en/automation/karaoke_templater/declaring_template_and_code_lines/"\u003eDeclaring template and code lines\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href="/docs/3.2/en/automation/karaoke_templater/template_execution_rules_and_order/"\u003eRules for when and in what order templates are run\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href="/docs/3.2/en/automation/karaoke_templater/template_modifiers/"\u003eTemplate modifiers\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href="/docs/3.2/en/automation/karaoke_templater/inline_variables/"\u003eInline variables (dollar-variables)\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href="/docs/3.2/en/automation/karaoke_templater/code_lines_and_blocks/"\u003eRules for code blocks and code lines\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href="/docs/3.2/en/automation/karaoke_templater/code_execution_environment/"\u003eContents of the code block/line execution environment\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eAlso see the \u003ca href="/docs/3.2/en/automation/lua/modules/karaskel.lua/"\u003e\u003ccode\u003eAutomation/Lua/Modules/karaskel.lua\u003c/code\u003e\u003c/a\u003e section for more\ninformation on what\u0026rsquo;s in the \u003ccode\u003eline\u003c/code\u003e and \u003ccode\u003esyl\u003c/code\u003e variables, and more.\u003c/p\u003e\n\u003ch2 id="for-users-of-_multi-template_"\u003eFor users of \u003cem\u003emulti-template\u003c/em\u003e\u003c/h2\u003e\n\u003cp\u003eIf you have used the \u003cem\u003emulti-template\u003c/em\u003e script from Aegisub 1.10 you should\nrecognise several similar concepts in the karaoke templater, but there are also\nseveral pitfalls. Some of them are:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eYou no longer declare template lines in the Actor field but in the Effect\nfield instead. You can also put much more than just \u003ccode\u003etemplate\u003c/code\u003e in there. Read\nthe tutorials above for an introduction, or the reference below if you feel\nadventurous.\u003c/li\u003e\n\u003cli\u003eInstead of using percent-signs to write Lua code blocks you use exclamation\nmarks. So write \u003ccode\u003e!$start+$i*30!\u003c/code\u003e instead of \u003ccode\u003e%$start+$i*30%\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003eThe \u003ccode\u003eA\u003c/code\u003e global is gone, but \u003ccode\u003eline\u003c/code\u003e and \u003ccode\u003esyl\u003c/code\u003e are directly accessible. The\nescaped Lua code is no longer run in the true global environment but instead\nin its own environment, so clashes between your templates and Karaoke\nTemplater itself is much less probable.\u003c/li\u003e\n\u003cli\u003eThe \u003ccode\u003ereturn false\u003c/code\u003e hack to cancel execution of a template no longer works.\nNeither does having multi-statement Lua blocks and returning from them in\ngeneral. For the first purpose the \u003ccode\u003efxgroup\u003c/code\u003e functionality has been\nintroduced, and for your multi-statement needs code lines have been\nintroduced.\u003c/li\u003e\n\u003cli\u003eInstead of working with \u003ccode\u003enewline\u003c/code\u003e and \u003ccode\u003eline\u003c/code\u003e (for being-generated and\noriginal line) you now work with \u003ccode\u003eline\u003c/code\u003e and \u003ccode\u003eorgline\u003c/code\u003e for being-generated and\noriginal lines.\u003c/li\u003e\n\u003cli\u003eThe \u003ccode\u003eretime\u003c/code\u003e function has been introduced to make it much easier to control\nthe start and end times of your generated lines.\u003c/li\u003e\n\u003cli\u003eLots of more fancy features. Check the tutorials or read the reference to\nlearn about it all.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e{::template name=\u0026ldquo;automation_navbox\u0026rdquo; /}\u003c/p\u003e\n'},{id:34,href:"/docs/3.2/en/automation/karaoke_templater/code_execution_environment/",title:"",description:null,content:'\u003cp\u003eThe Lua code in code blocks and on code lines is run in a separate global\nenvironment such that it won\u0026rsquo;t accidentally disturb the main script\nfunction.\u003c/p\u003e\n\u003cp\u003eYou can store your own data in this environment for use later, for example\npre-compute some values on code-lines and later insert them using code\nblocks, but it also contains several pre-defined variables and functions\ndesigned to make it easier writing effect templates.\u003c/p\u003e\n\u003cp\u003eIt\u0026rsquo;s important to understand that the contents of code execution\nenvironment and the\n\u003ca href="/docs/3.2/en/automation/karaoke_templater/inline_variables/"\u003einline-variables\u003c/a\u003e\n($-variables) are not related. You cannot change an inline-variable by\nchanging something in the code execution environment nor can you add new\nones. However, you can create and re-define the contents of the code\nexecution environment.\u003c/p\u003e\n\u003ch2 id="line-and-syllable-information"\u003eLine and syllable information\u003c/h2\u003e\n\u003cp\u003eThe code execution environment contains a few variables pointing to the\ncurrent line and syllable structure being processed, as well as some more\nsupporting tables. These are just references to the structures produced by\n\u003ca href="/docs/3.2/en/automation/lua/modules/karaskel.lua/#datastructures"\u003ekaraskel\u003c/a\u003e and are not\nmodified in any way.\u003c/p\u003e\n\u003cp\u003eYou should treat all of these except \u003ccode\u003eline\u003c/code\u003e as read-only. If you change the\nother ones, the kara-templater script might start misbehaving.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eline\u003c/strong\u003e - The line currently being produced. Changing this will affect\nthe resulting line in the file. See the \u003cstrong\u003e\u003ca href="/docs/3.2/en/automation/lua/modules/karaskel.lua/#dialoguelinetable"\u003ereference for dialogue line tables\u003c/a\u003e\u003c/strong\u003e.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eorgline\u003c/strong\u003e - The original line. This is the source line the current\nsyllable is located on.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003esyl\u003c/strong\u003e - The current syllable structure. If the current template is a\n\u003cem\u003efuri\u003c/em\u003e template, it\u0026rsquo;s the current furigana syllable. If the current\ntemplate has one or both of the \u003cem\u003echar\u003c/em\u003e or \u003cem\u003emulti\u003c/em\u003e modifiers, this is a\npseudo-syllable structure, a copy of the original syllable structure with\nseveral values changed to look like the current part of the syllable\nbeing processed. Also see the \u003cstrong\u003e\u003ca href="/docs/3.2/en/automation/lua/modules/karaskel.lua/#karaokeandfuriganasyllabletables"\u003ereference for syllable tables\u003c/a\u003e\u003c/strong\u003e.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003ebasesyl\u003c/strong\u003e - Usually the same as \u003ccode\u003esyl\u003c/code\u003e, except when the template has the\n\u003cem\u003echar\u003c/em\u003e or \u003cem\u003emulti\u003c/em\u003e modifier, then this is the original syllable. (If \u003ccode\u003esyl\r == basesyl\u003c/code\u003e is true, then the current template is neither \u003cem\u003echar\u003c/em\u003e nor\n\u003cem\u003emulti\u003c/em\u003e.)\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003emeta\u003c/strong\u003e - Contains various metadata about the script, namely the\ncontents of the \u003cem\u003eScript Info\u003c/em\u003e section. Most importantly, it has the\n\u003ccode\u003eres_x\u003c/code\u003e and \u003ccode\u003eres_y\u003c/code\u003e fields describing the script resolution.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eAll of these variables are reset to \u003ccode\u003enil\u003c/code\u003e whenever processing starts for a\nnew line, except \u003ccode\u003emeta\u003c/code\u003e. They are then set to the relevant value whenever\nprocessing hits a new stage. This means that, for example \u003cem\u003epre-line\u003c/em\u003e\ntemplates only has \u003ccode\u003eline\u003c/code\u003e and \u003ccode\u003eorgline\u003c/code\u003e set and both \u003ccode\u003esyl\u003c/code\u003e and \u003ccode\u003ebasesyl\u003c/code\u003e\nare \u003ccode\u003enil\u003c/code\u003e. In \u003cem\u003ecode once\u003c/em\u003e templates, all of the variables except \u003ccode\u003emeta\u003c/code\u003e are\n\u003ccode\u003enil\u003c/code\u003e.\u003c/p\u003e\n\u003ch2 id="standard-libraries-and-related-things"\u003eStandard libraries and related things\u003c/h2\u003e\n\u003cp\u003eBoth the \u003ca href="http://www.lua.org/manual/5.1/manual.html#5.4"\u003e\u003cstrong\u003estring\u003c/strong\u003e\u003c/a\u003e and\n\u003ca href="http://www.lua.org/manual/5.1/manual.html#5.6"\u003e\u003cstrong\u003emath\u003c/strong\u003e\u003c/a\u003e Lua standard\nlibraries are imported into the execution environment, as they are\ngenerally useful.\u003c/p\u003e\n\u003cp\u003eYou can also access the main execution environment of the kara-templater\nscript itself using the \u003cstrong\u003e\u003ccode\u003e_G\u003c/code\u003e\u003c/strong\u003e (underscore capital-G) variable and\nthrough that access the rest of the Lua standard library and any \u003ca href="/docs/3.2/en/automation/lua/modules/"\u003eloaded modules\u003c/a\u003e. For example, \u003ccode\u003e_G.table.sort\u003c/code\u003e refers to\nthe regular \u003ccode\u003etable.sort\u003c/code\u003e function. See the \u003ca href="http://www.lua.org/manual/5.1/manual.html#5"\u003eLua 5.1\nmanual\u003c/a\u003e for details on the\navailable libraries.\u003c/p\u003e\n\u003cp\u003eFor backwards compatibility, several of the included modules\n(\u003ca href="/docs/3.2/en/automation/lua/modules/karaskel.lua/"\u003ekaraskel.lua\u003c/a\u003e,\n\u003ca href="/docs/3.2/en/automation/lua/modules/unicode/"\u003eunicode.lua\u003c/a\u003e and\n\u003ca href="/docs/3.2/en/automation/lua/modules/util/"\u003eutils.lua\u003c/a\u003e) are automatically loaded\nand will be accessible via \u003ccode\u003e_G\u003c/code\u003e by default. All others must be explicitly\n\u003ccode\u003erequire\u003c/code\u003ed on a code line.\u003c/p\u003e\n\u003cp\u003eThere is also the self-reference \u003cstrong\u003e\u003ccode\u003etenv\u003c/code\u003e\u003c/strong\u003e variable which refers to the\ncode execution environment itself. This means that \u003ccode\u003etenv.tenv == tenv\u003c/code\u003e is\ntrue.\u003c/p\u003e\n\u003ch2 id="utility-functions"\u003eUtility functions\u003c/h2\u003e\n\u003cp\u003eThese functions help do more complex modifications of the output line (the\n\u003ccode\u003eline\u003c/code\u003e variable) and are unavoidable when creating complex effects.\u003c/p\u003e\n\u003ch3 id="retime"\u003eretime\u003c/h3\u003e\n\u003cp\u003eSynopsis: \u003ccode\u003eretime(mode, startadjust, endadjust)\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e\u003cimg src="/img/3.2/Auto4-kara-templater-retime-explanation.png" alt="Auto4-kara-templater-retime-explanation"\u003e\u003c/p\u003e\n\u003cp\u003eThis function is usually used once in a template in a code block by itself.\nIt adjusts the start and end time of the output line in various ways.\u003c/p\u003e\n\u003cp\u003eThe \u003cem\u003emode\u003c/em\u003e parameter determines how the start and end times of the line are\nchanged, it must be a string with one of the following values. Because it\nmust be a string, the name of the mode must be enclosed in quotation marks!\u003c/p\u003e\n\u003cp\u003eThe \u003cem\u003estartadjust\u003c/em\u003e and \u003cem\u003eendadjust\u003c/em\u003e parameters slightly change meaning based\non the mode, but generally is a number of milliseconds added to the \u0026ldquo;base\u0026rdquo;\ntime controlled by the mode.\u003c/p\u003e\n\u003cp\u003ePossible _mode_s:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eabs\u003c/strong\u003e or \u003cstrong\u003eset\u003c/strong\u003e - Both \u003cem\u003estartadjust\u003c/em\u003e and \u003cem\u003eendadjust\u003c/em\u003e are used as\nabsolute time values to set the start and end time of the line directly.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003epreline\u003c/strong\u003e - Intended to make effects that happen before the actual line\nstart. Both start and end time of the line are set to the start time of\nthe line, then \u003cem\u003estartadjust\u003c/em\u003e is added to the start time and \u003cem\u003eendadjust\u003c/em\u003e\nadded to the end time. Usually \u003cem\u003estartadjust\u003c/em\u003e should be negative here and\n\u003cem\u003eendadjust\u003c/em\u003e be zero.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eline\u003c/strong\u003e - Use the regular line timings and just add \u003cem\u003estartadjust\u003c/em\u003e to the\nstart time and \u003cem\u003eendadjust\u003c/em\u003e to the end time.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003estart2syl\u003c/strong\u003e - Intended to make the look of the syllable from the start\nof the line until it is highlighted. The start time of the line is kept\nand the end time is set to the start time of the syllable. Use\n\u003cem\u003estartadjust\u003c/em\u003e and \u003cem\u003eendadjust\u003c/em\u003e to offset the times.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003epresyl\u003c/strong\u003e - Similar to \u003cem\u003epreline\u003c/em\u003e but for the syllable timing instead.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003esyl\u003c/strong\u003e - From start of syllable to end of syllable.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003epostsyl\u003c/strong\u003e - Similar to \u003cem\u003epresyl\u003c/em\u003e but the base timing is the syllable end\ntime instead of start time. You will usually want to use a zero\n\u003cem\u003eaddstart\u003c/em\u003e and positive \u003cem\u003eaddend\u003c/em\u003e here.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003esyl2end\u003c/strong\u003e - The time from the end of the syllable to the end of line,\nsimilar to \u003cem\u003estart2syl\u003c/em\u003e.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003epostline\u003c/strong\u003e - Similar to \u003cem\u003epostsyl\u003c/em\u003e but for the line timing instead.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThere is also a special \u003cem\u003emode\u003c/em\u003e:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003esylpct\u003c/strong\u003e - Both of \u003cem\u003estartadjust\u003c/em\u003e and \u003cem\u003eendadjust\u003c/em\u003e are treated as\npercentage values from 0 to 100 and are used to set the line timing to\ncover that part of the syllable\u0026rsquo;s time.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eBe careful with the \u003ccode\u003eretime\u003c/code\u003e function on \u003cem\u003eline\u003c/em\u003e templates. If you use it\ndirectly on a \u003cem\u003eline\u003c/em\u003e template it will probably not do what you want. You\nshould only use it on \u003cem\u003epre-line\u003c/em\u003e, \u003cem\u003esyl\u003c/em\u003e and \u003cem\u003efuri\u003c/em\u003e templates. You should\nalso only use it once in each template.\u003c/p\u003e\n\u003cp\u003eThe \u003ccode\u003eretime\u003c/code\u003e function always returns the empty string (\u003ccode\u003e\u0026quot;\u0026quot;\u003c/code\u003e) which will\ncause it to output nothing when used in code blocks, but still evaluate to\ntrue if used in boolean expressions.\u003c/p\u003e\n\u003cp\u003e{::template name=\u0026ldquo;examplebox\u0026rdquo;}\ntemplate syl: !retime(\u0026ldquo;preline\u0026rdquo;, -1000, 0)!{\\pos($scenter,$smiddle)\\an5\\fscx0\\fscy0\\t(\\fscx100\\fscy100)}\u003c/p\u003e\n\u003cp\u003eThis creates a kind of \u0026ldquo;pop-in\u0026rdquo; effect for the syllables that lasts 1\nsecond (1000 milliseconds) before the actual line timing. The two important\nthings to code: Quotation marks around \u003ccode\u003e\u0026quot;preline\u0026quot;\u003c/code\u003e and that the start\noffset is negative, -1000, because the start time needs to be moved\nbackwards.\n{:/}\n{::template name=\u0026ldquo;examplebox\u0026rdquo;}\ntemplate syl: !retime(\u0026ldquo;syl\u0026rdquo;, 0, 0)!{\\pos($x,$y)\\t(\\fscx360)}\u003c/p\u003e\n\u003cp\u003eMakes the syllable spin around itself during its highlight. Unless you also\nhave \u003cem\u003esyl\u003c/em\u003e templates retimed to \u003ccode\u003estart2syl\u003c/code\u003e and \u003ccode\u003esyl2end\u003c/code\u003e the\nsyllable will only be visible during its highlight. Note how retiming a\nsyllable line to just the syllable time makes it unneeded to put start and\nend times in the \u003ccode\u003e\\t\u003c/code\u003e tag, as they default to the duration of the entire\nline and here the duration of the line is the duration of the syllable.\n{:/}\n{::template name=\u0026ldquo;examplebox\u0026rdquo;}\ntemplate syl: !retime(\u0026ldquo;sylpct\u0026rdquo;, 0, 50)!{\\move($x,$y,$x,!$y-10!)}\ntemplate syl: !retime(\u0026ldquo;sylpct\u0026rdquo;, 50, 100)!{\\move($x,!$y-10!,$x,$y)}\u003c/p\u003e\n\u003cp\u003eThese two templates together makes the syllable move 10 pixels upwards\nduring the first half of its highlight and back down during the last half.\nUsing \u003ccode\u003eretime\u003c/code\u003e is an easy way to get multiple \u003ccode\u003e\\move\u003c/code\u003e tags to affect the\nsame syllable; there can only be one \u003ccode\u003e\\move\u003c/code\u003e tag on one line, but if you\nsplit the line into many \u0026ldquo;chained\u0026rdquo; times you can create an effect of the\nsame syllable moving in several directions.\n{:/}\u003c/p\u003e\n\u003ch3 id="relayer"\u003erelayer\u003c/h3\u003e\n\u003cp\u003eSynopsis: \u003ccode\u003erelayer(newlayer)\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003eChange the Layer field of the generated line to \u003cem\u003enewlayer\u003c/em\u003e.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e If you want a template to always generate lines with a static\nlayer number, you do not need to use this function. You can just set the\nLayer field on the template line, and it will transfer to the generated\nlines. This function is only needed when the layer number is dynamic.\u003c/p\u003e\n\u003cp\u003e{::template name=\u0026ldquo;examplebox\u0026rdquo;}\ntemplate syl: !relayer(syl.i*5+20)!\u003c/p\u003e\n\u003cp\u003eEach syllable generated from the line gets a progressively higher layer\nnumber. The first syllable gets in layer 25, the second in layer 30 and so\non, each syllable getting a layer 5 larger than the previous.\n{:/}\u003c/p\u003e\n\u003ch3 id="restyle"\u003erestyle\u003c/h3\u003e\n\u003cp\u003eSynopsis: \u003ccode\u003erestyle(newstyle)\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003eChange the Style field on the generated line to \u003cem\u003enewstyle\u003c/em\u003e.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e\u003cem\u003eBe careful\u003c/em\u003e\u003c/strong\u003e \u003cem\u003ethat this does not update the sizing and positioning\ninformation.\u003c/em\u003e If you want to use sizing or positioning information such as\n\u003ccode\u003e$x\u003c/code\u003e, \u003ccode\u003e$lwidth\u003c/code\u003e, \u003ccode\u003eline.middle\u003c/code\u003e and \u003ccode\u003esyl.right\u003c/code\u003e you must change to a style\nthat uses the same font name, font size, boldness, italics, font encoding,\nX and Y scaling, character spacing, alignment and margins. If you change to\na style where any of those properties are different, the positioning and\nsizing information will be invalid.\u003c/p\u003e\n\u003cp\u003eNo example because the function has limited use.\u003c/p\u003e\n\u003ch3 id="maxloop"\u003emaxloop\u003c/h3\u003e\n\u003cp\u003eSynopsis: \u003ccode\u003emaxloop(newmax)\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003eDynamically control the number of times a template will be looped.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e\u003cem\u003eBe careful\u003c/em\u003e\u003c/strong\u003e \u003cem\u003ethat you do not make a template that loops forever.\u003c/em\u003e\u003c/p\u003e\n\u003cp\u003eYou do not need to use the loop modifier on templates to use this function.\u003c/p\u003e\n\u003cp\u003e{::template name=\u0026ldquo;examplebox\u0026rdquo;}\ntemplate syl: !maxloop(syl.width + 2*line.styleref.outline)!{\\clip(!line.left+syl.left-line.styleref.outline+j-1!,0,!line.left+syl.left-line.styleref.outline+j!,!meta.res_y!)\\an5\\move(!line.left+syl.center!,!line.middle!,!line.left+syl.center!,!line.middle+math.random(-20,20)!,$start,$end)\\shad0}\u003c/p\u003e\n\u003cp\u003eCut each syllable into a number of slivers, depending on the size of the\nsyllable. Each sliver moves randomly on highlight.\n{:/}\n{::template name=\u0026ldquo;examplebox\u0026rdquo;}\ntemplate syl: !maxloop(j+1)!\u003c/p\u003e\n\u003cp\u003eMakes an infinite loop. It continually sets \u003ccode\u003ej\u003c/code\u003e one higher, making the loop\nnever complete.\n{:/}\u003c/p\u003e\n\u003ch3 id="loopctl"\u003eloopctl\u003c/h3\u003e\n\u003cp\u003eSynopsis: \u003ccode\u003eloopctl(newj, newmaxj)\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003eControl both loop variables. This function has questionable utility.\u003c/p\u003e\n\u003cp\u003e\u003cem\u003enewj\u003c/em\u003e sets the new value of \u003ccode\u003etenv.j\u003c/code\u003e and \u003cem\u003enewmaxj\u003c/em\u003e sets the new value of\n\u003ccode\u003etenv.maxj\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eNo example because the function has limited use.\u003c/p\u003e\n\u003ch3 id="remember-and-recall"\u003eremember and recall\u003c/h3\u003e\n\u003cp\u003eSynopsis:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eremember(name, value)\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eremember_if(name, value, condition)\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003erecall(name)\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003erecall(name, default)\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThis suite of functions lets you calculate a value in one template and re-use\nit in later templates. This is especially useful together with the\n\u003ccode\u003emath.random\u003c/code\u003e function, since remember/recall will let you choose a random\nvalue in one template and use the same random value in a later template for the\nsame syllable.\u003c/p\u003e\n\u003cp\u003e\u003cem\u003ename\u003c/em\u003e is a user-chosen name to identify the saved value. It should be a string,\nso usually written as a string literal with quotes.\u003c/p\u003e\n\u003cp\u003e\u003cem\u003evalue\u003c/em\u003e is the value to store. It can be any Lua value, although string and\nnumber values are the most useful.\u003c/p\u003e\n\u003cp\u003e\u003cem\u003edefault\u003c/em\u003e is a value to recall if nothing has been stored with the name yet.\u003c/p\u003e\n\u003cp\u003e\u003cem\u003econdition\u003c/em\u003e controls whether the value will actually get stored or not.\u003c/p\u003e\n\u003cp\u003eThe \u003ccode\u003eremember\u003c/code\u003e and \u003ccode\u003eremember_if\u003c/code\u003e functions both return the given \u003cem\u003evalue\u003c/em\u003e\nunchanged. This means you can put a \u003ccode\u003eremember\u003c/code\u003e call anywhere you would put\nthe bare value.\u003c/p\u003e\n\u003cp\u003eThe \u003ccode\u003eremember_if\u003c/code\u003e function will only store the value if the given \u003cem\u003econdition\u003c/em\u003e\nis a truthy value (i.e. not \u003ccode\u003enil\u003c/code\u003e or \u003ccode\u003efalse\u003c/code\u003e.) It still returns the value even\nif the condition is falsey.\u003c/p\u003e\n\u003cp\u003e{::template name=\u0026ldquo;examplebox\u0026rdquo;}\ntemplate syl: {\\frz!remember(\u0026ldquo;entryrotation\u0026rdquo;,math.random(100,200))!\\fscx300\\fscy300\\t(0,300,\\frz0\\fscx100\\fscy100)\\pos($x,$y)}\ntemplate syl: {\\frz-!recall(\u0026ldquo;entryrotation\u0026rdquo;)!\\fscx300\\fscy300\\t(0,300,\\frz0\\fscx100\\fscy100)\\pos($x,$y)\\fad(300,0)}\u003c/p\u003e\n\u003cp\u003eThe first line chooses a random number between 100 and 200 degrees, and stores\nthe chosen value with the name \u003ccode\u003e\u0026quot;entryrotation\u0026quot;\u003c/code\u003e. It then uses that number to set\na rotation and transform it to 0, causing the syllable to rotate to its correct\nposition.\u003c/p\u003e\n\u003cp\u003eThe second line loads the same number back, since it uses the name\n\u003ccode\u003e\u0026quot;entryrotation\u0026quot;\u003c/code\u003e for recall. It places a minus sign in front of it, but\notherwise does the same effect. The result is two copies of the syllable\nrotating opposite each other, but the same amount.\n{:/}\n{::template name=\u0026ldquo;examplebox\u0026rdquo;}\ntemplate syl: {\\fscx!remember_if(\u0026ldquo;longsyllables\u0026rdquo;, recall(\u0026ldquo;longsyllables\u0026rdquo;, 100)+10, #syl.duration\u0026gt;200)!}\u003c/p\u003e\n\u003cp\u003eHere \u003ccode\u003eremember_if\u003c/code\u003e and \u003ccode\u003erecall\u003c/code\u003e are combined, together with a default value,\nto set up a value that updates itself every time it is used.\u003c/p\u003e\n\u003cp\u003eThe name \u0026ldquo;longsyllables\u0026rdquo; is attempted recalled, innermost, but if it doesn\u0026rsquo;t\nexist yet the value 100 is used instead. Then 10 is added to it, and if the\nsyllable has a duration longer than 200 ms, the value (recalled + 10) gets\nstored back.\u003c/p\u003e\n\u003cp\u003eThe effect is that the \u003ccode\u003e\\fscx\u003c/code\u003e gets 10 bigger for all syllables, every time\na \u0026ldquo;long\u0026rdquo; syllable is encountered.\n{:/}\u003c/p\u003e\n\u003ch2 id="template-execution-data"\u003eTemplate execution data\u003c/h2\u003e\n\u003cp\u003eThese variables either give some further information on the status of the\nexecuting template or modify the rules for template execution in some way.\nThey generally work together with specific template modifiers.\u003c/p\u003e\n\u003ch3 id="looping-templates"\u003eLooping templates\u003c/h3\u003e\n\u003cp\u003eWhen a template with the \u003cem\u003eloop\u003c/em\u003e or \u003cem\u003erepeat\u003c/em\u003e modifier is running, two new\nvariables are introduced in the code execution environment, \u003cstrong\u003e\u003ccode\u003ej\u003c/code\u003e\u003c/strong\u003e and\n\u003cstrong\u003e\u003ccode\u003emaxj\u003c/code\u003e\u003c/strong\u003e.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003emaxj\u003c/strong\u003e is the number of loops, i.e. simply the parameter given to the\n\u003cem\u003eloop\u003c/em\u003e modifier.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003ej\u003c/strong\u003e is the loop iteration counter. It starts at 1 in the first\niteration and \u003cem\u003emaxj\u003c/em\u003e in the last.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eIf you change \u003ccode\u003ej\u003c/code\u003e or \u003ccode\u003emaxj\u003c/code\u003e while a template is executing, you can affect\nthe number of iterations the loop makes. The\n\u003ca href="/docs/3.2/en/automation/karaoke_templater/code_execution_environment/#maxloop"\u003e\u003ccode\u003emaxloop\u003c/code\u003e\u003c/a\u003e\nfunction is convenient for making dynamic loops.\u003c/p\u003e\n\u003cp\u003e{::template name=\u0026ldquo;examplebox\u0026rdquo;}\n\u003ccode\u003e\u003cpre\u003etemplate syl loop 5: {\\an5\\pos($scenter,$smiddle)\\1a\u0026amp;HFF\u0026amp;\\3a\u0026amp;Hcc\u0026amp;\\t($start,$end,\\fscx!100+\u003cu\u003ej\u003c/u\u003e*10!\\fscy!100+\u003cu\u003ej\u003c/u\u003e*10!\\3a\u0026amp;HFF\u0026amp;)}\u003c/pre\u003e\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003eThe syllable fill is hidden so only the border is visible, then several\ncopies of the that border-only line is made through the loop, and made to\n\u0026ldquo;explode\u0026rdquo; to different, growing sizes using the \u003ccode\u003ej\u003c/code\u003e variable.\u003c/p\u003e\n\u003cp\u003eThis example assumes that the style definition has shadow disabled but it\ndoes have a border.\n{:/}\n{::template name=\u0026ldquo;examplebox\u0026rdquo;}\n\u003ccode\u003e\u003cpre\u003etemplate syl loop 20: {\\move($x,$y,!$x+15*math.cos(math.pi*2*\u003cu\u003ej\u003c/u\u003e/\u003cu\u003emaxj\u003c/u\u003e)!,!$y+15*math.sin(math.pi*2*\u003cu\u003ej\u003c/u\u003e/\u003cu\u003emaxj\u003c/u\u003e)!,$start,$end)\\t($start,$end,\\alpha\u0026amp;HFF\u0026amp;)}\u003c/code\u003e\u003c/pre\u003e\u003c/p\u003e\n\u003cp\u003eHere looping is used to \u003ca href="http://en.wikipedia.org/wiki/Unit_circle#Trigonometric_functions_on_the_unit_circle"\u003ecalculate several points on a\ncircle\u003c/a\u003e\nwith radius 15 and make the syllables move out to those. Just by changing\nthe number of loops in the Effect field you can make a more detailed circle\nbecause \u003ccode\u003ej/maxj\u003c/code\u003e is used to calculate how large a portion of the total\nnumber of loops have been completed.\n{:/}\u003c/p\u003e\n\u003ch3 id="conditional-templates-with-fxgroup"\u003eConditional templates with fxgroup\u003c/h3\u003e\n\u003cp\u003eThe \u003cem\u003efxgroup\u003c/em\u003e modifier uses a special table \u003cstrong\u003e\u003ccode\u003efxgroup\u003c/code\u003e\u003c/strong\u003e in the code\nexecution environment to control whether a template will be executed or\nnot.\u003c/p\u003e\n\u003cp\u003eThe parameter given to the \u003cem\u003efxgroup\u003c/em\u003e modifier names a key (always a string)\nin the \u003ccode\u003efxgroup\u003c/code\u003e table in the execution environment, and when a template\nassigned to an fxgroup is about to be executed, the value for that key in\nthe \u003ccode\u003efxgroup\u003c/code\u003e table is looked up. If the value is true or the key doesn\u0026rsquo;t\nexist, the template is executed, if it\u0026rsquo;s false the template is skipped.\u003c/p\u003e\n\u003cp\u003eWhile you can technically use any text string for fxgroup names, because\nthey\u0026rsquo;re used in Lua code it\u0026rsquo;s best to avoid ones that overlap with Lua\nreserved words such as \u003ccode\u003eend\u003c/code\u003e, \u003ccode\u003ebreak\u003c/code\u003e, \u003ccode\u003ereturn\u003c/code\u003e and several more.\u003c/p\u003e\n\u003cp\u003e{::template name=\u0026ldquo;examplebox\u0026rdquo;}\n\u003ccode\u003e\u003cpre\u003ecode syl: \u003cu\u003efxgroup.long = (syl.duration \u0026gt; 200)\u003c/u\u003e\ntemplate syl noblank: all here:\ntemplate syl \u003cu\u003efxgroup long\u003c/u\u003e: is long:\nkaraoke: {\\k10}huh? {\\k40}wee~~\u003c/code\u003e\u003c/pre\u003e\u003c/p\u003e\n\u003cp\u003eIt\u0026rsquo;s important to understand the template execution order to understand\nthis example. For each input syllable (i.e. \u0026ldquo;huh?\u0026rdquo; and \u0026ldquo;wee~~\u0026quot;) all the\ntemplates and code lines are run in the order they appear.\u003c/p\u003e\n\u003cp\u003eThis means that for \u0026ldquo;huh?\u0026rdquo;, first the code line is run. It determines that\nthe duration of that syllable is less than 200 ms and thus sets\n\u003cem\u003efxgroup.long\u003c/em\u003e to false. The first template has no fxgroup, so it\u0026rsquo;s applied\nto the syllable then, outputting a line \u0026ldquo;all here: huh?\u0026rdquo;, but the second\ntemplate has fxgroup \u0026ldquo;long\u0026rdquo;. This fxgroup was disabled for that syllable by\nthe code line, so that template is not run at all.\u003c/p\u003e\n\u003cp\u003eFor \u0026ldquo;wee~~\u0026rdquo;, the code line determines that its duration is longer than 200\nms, so the \u0026ldquo;long\u0026rdquo; fxgroup is enabled. Then the first template outputs its\nline, \u0026ldquo;all here: wee~~\u0026rdquo;, and when the second template is to run, its\nfxgroup is enabled now so it\u0026rsquo;s also run, outputting \u0026ldquo;is long: wee~~\u0026rdquo;.\u003c/p\u003e\n\u003cp\u003eNeither of the two templates will output anything for the zeroth syllable.\nThe first template, because it has the \u0026ldquo;noblank\u0026rdquo; modifier, and the second\nbecause the zero\u0026rsquo;th syllable\u0026rsquo;s duration is too short for the fxgroup to be\nenabled.\n{:/}\u003c/p\u003e\n\u003cp\u003e{::template name=\u0026ldquo;automation_navbox\u0026rdquo; /}\u003c/p\u003e\n'},{id:35,href:"/docs/3.2/en/automation/karaoke_templater/code_lines_and_blocks/",title:"",description:null,content:'\u003cp\u003eCode lines and blocks in Karaoke Templater allows you to create advanced\neffects by incorporating small snippets of Lua code. This can range from simple\nmathematical expressions adding two numbers to complex functions that for\nexample could generate various shapes in cycling colours.\u003c/p\u003e\n\u003cp\u003eBoth code lines and code blocks are run in a separate semi-closed execution\nenvironment, meaning they are mostly undisturbed by the primary Lua environment\nthe Karaoke Templater script itself runs in. For an overview of what variables\nare available in the code line/block execution environment see: \u003ca href="/docs/3.2/en/automation/karaoke_templater/code_execution_environment/"\u003eCode execution environment\u003c/a\u003e.\u003c/p\u003e\n\u003ch2 id="code-lines"\u003eCode lines\u003c/h2\u003e\n\u003cp\u003eA code line is a special kind of template line. Instead of using the \u003ccode\u003etemplate\u003c/code\u003e\nkeyword in the Effect field it uses the \u003ccode\u003ecode\u003c/code\u003e keyword. A code line contains\nonly Lua code and does not by itself produce any lines in the resulting file.\u003c/p\u003e\n\u003cp\u003eThe two primary uses of code lines are:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eDefining/updating variables for use later in templates\u003c/li\u003e\n\u003cli\u003eDefining functions for use later in templates\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eFor example, if you need a random number, but also need to use it twice in one\ntemplate, you can use a code line to first generate the number and store it to\na variable, then use that variable in your template line.\u003c/p\u003e\n\u003cp\u003eAnother example could be defining a function that produces a random colour.\u003c/p\u003e\n\u003ch3 id="classes-of-code-lines"\u003eClasses of code lines\u003c/h3\u003e\n\u003cp\u003eLike there\u0026rsquo;s multiple classes of template lines there\u0026rsquo;s also multiple classes\nof code lines. Some of them are the same, and some only exist for one or the\nother.\u003c/p\u003e\n\u003cp\u003eYou specify the class of the code line in the Effect field after the \u003ccode\u003ecode\u003c/code\u003e\nkeyword. The possible classes are:\u003c/p\u003e\n\u003cdl\u003e\n\u003cdt\u003eonce\u003c/dt\u003e\n\u003cdd\u003eCode lines in the \u003ccode\u003eonce\u003c/code\u003e class are run exactly one time, before any templates\nare applied. This is usually the best place to define functions and general\ntables of values you need to look up later.  This is the default class, if you\ndon\u0026rsquo;t specify a class for a code line it\u0026rsquo;s automatically in the \u003ccode\u003eonce\u003c/code\u003e class.\u003c/dd\u003e\n\u003cdt\u003eline\u003c/dt\u003e\n\u003cdd\u003eCode lines in the \u003ccode\u003eline\u003c/code\u003e class are run when a new line is encountered. They\nare run once per line. They are run interspersed with \u003ccode\u003eline\u003c/code\u003e/\u003ccode\u003epre-line\u003c/code\u003e\ntemplates in the order they appear. (There are no \u0026ldquo;pre-line\u0026rdquo; code lines.)\u003c/dd\u003e\n\u003cdt\u003esyl\u003c/dt\u003e\n\u003cdd\u003eCode lines in the \u003ccode\u003esyl\u003c/code\u003e class are run when a new syllable is encountered.\nThey run once per syllable. They are run interspersed with \u003ccode\u003esyl\u003c/code\u003e templates.\u003c/dd\u003e\n\u003cdt\u003efuri\u003c/dt\u003e\n\u003cdd\u003eCode lines in the \u003ccode\u003efuri\u003c/code\u003e class are run when a new furigana syllable is\nencountered. They run once per furigana syllable.  They are run interspersed\nwith \u003ccode\u003efuri\u003c/code\u003e templates.\u003c/dd\u003e\n\u003c/dl\u003e\n\u003cp\u003eYou \u003cem\u003ecannot\u003c/em\u003e have templates with \u003ccode\u003echar\u003c/code\u003e or \u003ccode\u003emulti\u003c/code\u003e modifiers run\nper-character/per-highlight interspersed with code lines. This is a limitation\nof the execution model. This may or may not change in later versions of Karaoke\nTemplater.\u003c/p\u003e\n\u003ch2 id="code-blocks"\u003eCode blocks\u003c/h2\u003e\n\u003cp\u003eA code block is a block of Lua code within a template line. Code blocks are\nused to insert more complex things than can be expressed with \u003ca href="/docs/3.2/en/automation/karaoke_templater/inline_variables/"\u003einline variables\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eCode blocks are required to be single Lua expressions, since a \u003ccode\u003ereturn\u003c/code\u003e\nstatement is automatically prepended to the code. This means you (among other\nthings) can\u0026rsquo;t do assignments or use \u003ccode\u003eif\u003c/code\u003e statements within code blocks, you\nmust use a code line if you want to do any of those things. (There is a way to\ndo basic conditionals in code blocks though, see below.)\u003c/p\u003e\n\u003cp\u003eYou create a code block by surrounding the code by exclamation marks, like\nthis:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e{\\t($start,**!syl.start_time+20!**,\\bord0)}\r\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIt is possible to use inline variables within code blocks. They are expanded\nbefore the code block is parsed, so to the Lua interpreter the inline variables\nlook like regular constants.\u003c/p\u003e\n\u003ch3 id="hints-for-using-code-blocks"\u003eHints for using code blocks\u003c/h3\u003e\n\u003cp\u003eMost simple mathematical expressions work just like you\u0026rsquo;d expect them to.\nOperator precedence rules are those of regular arithmetic.\u003c/p\u003e\n\u003cp\u003eA code block should always return a string or numeric value, if it returns a\nboolean, a table or something else it might cause a warning and the resulting\nline containing the wrong output.\u003c/p\u003e\n\u003cp\u003eTo create simple conditionals within code blocks you can use the \u003ccode\u003eand\u003c/code\u003e and \u003ccode\u003eor\u003c/code\u003e\noperators to chain values and conditions. For example:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e{\\k**!syl.duration \u0026gt; 100 and \u0026quot;f\u0026quot; or \u0026quot;\u0026quot;!**$kdur}\r\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIf the syllable duration is longer than 100 ms the first sub-expression is\ntrue, and the code block returns \u003ctt\u003e\u0026ldquo;f\u0026rdquo;\u003c/tt\u003e, otherwise the entire \u003ccode\u003eand\u003c/code\u003e\nexpression is false, and the right-hand argument of the \u003ccode\u003eor\u003c/code\u003e expression is\nreturned.\u003c/p\u003e\n\u003cp\u003eIn Lua, \u003ccode\u003eand\u003c/code\u003e binds stronger than \u003ccode\u003eor\u003c/code\u003e meaning that \u003ccode\u003eand\u003c/code\u003e expressions are\nevaluated first. In the above expression the effective grouping is like this:\n\u003ccode\u003e((syl.duration \u0026gt; 100) and \u0026quot;f\u0026quot;) or \u0026quot;\u0026quot;\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e{::template name=\u0026ldquo;automation_navbox\u0026rdquo; /}\u003c/p\u003e\n'},{id:36,href:"/docs/3.2/en/automation/karaoke_templater/declaring_template_and_code_lines/",title:"",description:null,content:'\u003cp\u003eThis page describes how a template line or code line is declared.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eTemplate lines and code lines are always marked Comment.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv\u003e\u003c/div\u003e\r\n\u003cul\u003e\n\u003cli\u003eThe first space-separated word in the Effect field determines whether a line is a template line, a code line, a timed karaoke line, a styled karaoke line or something otherwise undetermined.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv\u003e\u003c/div\u003e\r\n\u003cul\u003e\n\u003cli\u003eIf the first word in the Effect field is \u003ccode\u003etemplate\u003c/code\u003e, the line is a template line.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv\u003e\u003c/div\u003e\r\n\u003cul\u003e\n\u003cli\u003eIf the first word in the Effect field is \u003ccode\u003ecode\u003c/code\u003e, the line is a code line.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv\u003e\u003c/div\u003e\r\n\u003cul\u003e\n\u003cli\u003eIf the Effect field is exactly equal to \u003ccode\u003efx\u003c/code\u003e, the line is a styled karaoke line. Styled karaoke lines are deleted during execution of Karaoke Templater.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv\u003e\u003c/div\u003e\r\n\u003cul\u003e\n\u003cli\u003eIf the Effect field is \u003ccode\u003eKaraoke\u003c/code\u003e, \u003ccode\u003ekaraoke\u003c/code\u003e or empty, the line is a timed karaoke line.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv\u003e\u003c/div\u003e\r\n\u003cul\u003e\n\u003cli\u003eIf the Effect field contains anything else, the line is an undetermined type and is not touched by Karaoke Templater.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv\u003e\u003c/div\u003e\r\n\u003cp\u003eTemplate lines and code lines can have additional text after the \u003ccode\u003etemplate\u003c/code\u003e or \u003ccode\u003ecode\u003c/code\u003e keywords. This text is parsed as a series of space-separated words and is called modifiers. See \u003ca href="/docs/3.2/en/automation/karaoke_templater/template_modifiers/"\u003eTemplate modifiers\u003c/a\u003e for more information on this.\u003c/p\u003e\n\u003cp\u003e{::template name=\u0026ldquo;automation_navbox\u0026rdquo; /}\u003c/p\u003e\n'},{id:37,href:"/docs/3.2/en/automation/karaoke_templater/inline_variables/",title:"",description:null,content:'\u003cp\u003eThis page describes the \u003cstrong\u003einline variables\u003c/strong\u003e also known as \u003cstrong\u003edollar variables\u003c/strong\u003e\navailable in Karaoke Templater.\u003c/p\u003e\n\u003ch2 id="how-to-use-inline-variables"\u003eHow to use inline variables\u003c/h2\u003e\n\u003cp\u003eAll inline variables start with a dollar-sign. They only work in template\nlines, not in code lines. You can, however, use them in code blocks on template\nlines.\u003c/p\u003e\n\u003cp\u003eHere is an example of how a template text using inline variables could look:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e{\\pos(**$x**,**$y**)\\t(**$start**,**$end**,\\bord0)}\r\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe highlighted parts are the inline variables in the template.\u003c/p\u003e\n\u003cp\u003eWhen a template is applied, the first thing that happens is that all inline\nvariables are found and replaced with their value. E.g. in the above example\n\u003ccode\u003e$x\u003c/code\u003e and \u003ccode\u003e$y\u003c/code\u003e are replaced with the X and Y coordinates of the syllable the\ntemplate is being applied to, and \u003ccode\u003e$start\u003c/code\u003e and \u003ccode\u003e$end\u003c/code\u003e are replaced by the start\nand end times of the syllable.\u003c/p\u003e\n\u003cp\u003eCase does not matter for inline variables. \u003ccode\u003e$start\u003c/code\u003e, \u003ccode\u003e$START\u003c/code\u003e and \u003ccode\u003e$StArT\u003c/code\u003e all\nwork and give the same result.\u003c/p\u003e\n\u003ch3 id="limitations"\u003eLimitations\u003c/h3\u003e\n\u003cp\u003eInline variables are not \u0026ldquo;intelligent\u0026rdquo;: they do the same no matter where you\nplace them or use them and don\u0026rsquo;t \u0026ldquo;know\u0026rdquo; what tag it\u0026rsquo;s being used with. Not\nevery variable can be used with success in all places, and the meaning of some\nare affected by usage of e.g. the\n\u003ca href="/docs/3.2/en/automation/karaoke_templater/code_execution_environment/#retime"\u003eretime\u003c/a\u003e\nfunction. In these cases, inline variables may not be appropriate and you need\nto use code blocks.\u003c/p\u003e\n\u003cp\u003eBecause inline variables have their values determined as the very first thing\nwhen a template is applied you can\u0026rsquo;t affect their values in any way.\u003c/p\u003e\n\u003cp\u003eUsing inline variables is an easy way to get started with an effect, but for\nmany advanced effects they might not be the best choice.\u003c/p\u003e\n\u003cp\u003eAll positioning and sizing inline variables (such as \u003ccode\u003e$y\u003c/code\u003e, \u003ccode\u003e$right\u003c/code\u003e and\n\u003ccode\u003e$width\u003c/code\u003e are rounded to the nearest whole pixel, unlike the values in the\ninternal data structures which you can get in code blocks, which have sub-pixel\nprecision.\u003c/p\u003e\n\u003ch2 id="line-and-syllable-variables"\u003eLine and syllable variables\u003c/h2\u003e\n\u003cp\u003eThe inline variables exist in both \u0026ldquo;line\u0026rdquo; and \u0026ldquo;syllable\u0026rdquo; variants. The \u0026ldquo;line\u0026rdquo;\nvariants contain information about the entire line being processed, the\n\u0026ldquo;syllable\u0026rdquo; variants contain information about the current syllable being\nprocessed.\u003c/p\u003e\n\u003cp\u003eThere are also \u0026ldquo;automatic\u0026rdquo; variants of most of the variables, there are either\nthe line or the syllable variant depending on what kind of template they are\nused in. In pre-line templates the automatic inline variables refer to the line\nvariants, and everywhere else they refer to the syllable variants.\u003c/p\u003e\n\u003ch2 id="the-variables"\u003eThe variables\u003c/h2\u003e\n\u003cp\u003eThe line variables that also exist as automatic variants all start with a\nlowercase L (\u0026ldquo;ell\u0026rdquo;) letter. The syllable variants start with the letter S.\u003c/p\u003e\n\u003ch4 id="line-variants"\u003eLine variants\u003c/h4\u003e\n\u003cdl\u003e\n\u003cdt\u003elayer\u003c/dt\u003e\n\u003cdd\u003eline layer\u003c/dd\u003e\n\u003cdt\u003elstart, lend, ldur, lmid\u003c/dt\u003e\n\u003cdd\u003eline start time, end time, duration and midway, all absolute times in milliseconds\u003c/dd\u003e\n\u003cdt\u003estyle\u003c/dt\u003e\n\u003cdd\u003ename of the line style\u003c/dd\u003e\n\u003cdt\u003eactor\u003c/dt\u003e\n\u003cdd\u003ename of the line actor\u003c/dd\u003e\n\u003cdt\u003emargin_l, margin_r\u003c/dt\u003e\n\u003cdd\u003eeffective left and right margin (line if nonzero, otherwise style)\u003c/dd\u003e\n\u003cdt\u003emargin_v, margin_t, margin_b\u003c/dt\u003e\n\u003cdd\u003eeffective vertical, top and bottom margin, vertical and top is same\u003c/dd\u003e\n\u003cdt\u003esyln\u003c/dt\u003e\n\u003cdd\u003enumber of syllables on line\u003c/dd\u003e\n\u003cdt\u003eli\u003c/dt\u003e\n\u003cdd\u003eline index (first physical line in file is 1)\u003c/dd\u003e\n\u003cdt\u003elleft, lcenter, lright\u003c/dt\u003e\n\u003cdd\u003eline left, horizontal center and right edges, taking margins and alignment into account, rounded to an integer value\u003c/dd\u003e\n\u003cdt\u003eltop, lmiddle, lbottom\u003c/dt\u003e\n\u003cdd\u003eline top, vertical middle and bottom edges, taking margins and alignment into account, rounded\u003c/dd\u003e\n\u003cdt\u003elx, ly\u003c/dt\u003e\n\u003cdd\u003eline x and y position suitable for a \\pos command when alignment is not overridden\u003c/dd\u003e\n\u003cdt\u003elwidth, lheight\u003c/dt\u003e\n\u003cdd\u003eline width and height in pixels, this is rounded and might not match exactly with the positioning variables\n{: .horizontal-wide}\u003c/dd\u003e\n\u003c/dl\u003e\n\u003ch4 id="syllable-variants"\u003eSyllable variants\u003c/h4\u003e\n\u003cdl\u003e\n\u003cdt\u003esstart, send, smid\u003c/dt\u003e\n\u003cdd\u003esyllable start, end and midway times relative to start of line, suitable for putting into \\t and \\move\u003c/dd\u003e\n\u003cdt\u003esdur, skdur\u003c/dt\u003e\n\u003cdd\u003esyllable duration in milliseconds and centiseconds\u003c/dd\u003e\n\u003cdt\u003esi\u003c/dt\u003e\n\u003cdd\u003esyllable index from start of line\u003c/dd\u003e\n\u003cdt\u003esleft, scenter, sright\u003c/dt\u003e\n\u003cdd\u003eabsolute left, horizontal center and right edges for syllable from left edge of screen, suitable directly for \\pos and \\move\u003c/dd\u003e\n\u003cdt\u003esbottom, smiddle, stop\u003c/dt\u003e\n\u003cdd\u003eabsolute bottom, vertical middle and top edges for syllable from top edge of screen, suitable directly for \\pos and \\move, adjusted for furigana positioning if needed\u003c/dd\u003e\n\u003cdt\u003esx, sy\u003c/dt\u003e\n\u003cdd\u003esyllable absolute x and y position in default alignment, suitable for using directly in \\pos and \\move\u003c/dd\u003e\n\u003cdt\u003eswidth, sheight\u003c/dt\u003e\n\u003cdd\u003esyllable width and height in pixelsthis is rounded and might not match exactly with the positioning variables\n{: .horizontal-wide}\u003c/dd\u003e\n\u003c/dl\u003e\n\u003ch4 id="automatic-variants"\u003eAutomatic variants\u003c/h4\u003e\n\u003cdl\u003e\n\u003cdt\u003estart, end, mid\u003c/dt\u003e\n\u003cdd\u003estart and and midway time for line/syllable; absolute for lines and relative for syllables\u003c/dd\u003e\n\u003cdt\u003edur, kdur\u003c/dt\u003e\n\u003cdd\u003eduration in milliseconds and centiseconds of line/syllable\u003c/dd\u003e\n\u003cdt\u003ei\u003c/dt\u003e\n\u003cdd\u003eline or syllable index\u003c/dd\u003e\n\u003cdt\u003eleft, center, right\u003c/dt\u003e\n\u003cdd\u003eleft, center and right edges of line/syllable, absolute from left screen edge\u003c/dd\u003e\n\u003cdt\u003etop, middle, bottom\u003c/dt\u003e\n\u003cdd\u003etop middle and bottom edges of line/syllable, absolute from top screen edge\u003c/dd\u003e\n\u003cdt\u003ex, y\u003c/dt\u003e\n\u003cdd\u003ex and y position of line/syllable when using default alignment\u003c/dd\u003e\n\u003cdt\u003ewidth, height\u003c/dt\u003e\n\u003cdd\u003ewidth and height of line/syllable in pixels, this is rounded and might not match exactly with the positioning variables\n{: .horizontal-wide}\u003c/dd\u003e\n\u003c/dl\u003e\n\u003cp\u003e{::template name=\u0026ldquo;automation_navbox\u0026rdquo; /}\u003c/p\u003e\n'},{id:38,href:"/docs/3.2/en/automation/karaoke_templater/template_execution_rules_and_order/",title:"",description:null,content:'\u003cp\u003eThis page describes various technical details about how Karaoke Templater\n(\u003cem\u003ekara-templater\u003c/em\u003e) works and will try to explain why various things work as\nthey do and why some things can\u0026rsquo;t and won\u0026rsquo;t work.\u003c/p\u003e\n\u003cp\u003eMost of this is technical details you don\u0026rsquo;t need to know to use kara-templater,\nbut if you see some behaviour you don\u0026rsquo;t understand this page might explain it.\u003c/p\u003e\n\u003ch2 id="concepts"\u003eConcepts\u003c/h2\u003e\n\u003cp\u003eThese are some terms and concepts used throughout the description. The names\nare close to or the same as those used in the actual script.\u003c/p\u003e\n\u003cdl\u003e\n\u003cdt\u003e\u003cstrong\u003e\u003ccode\u003etenv\u003c/code\u003e\u003c/strong\u003e\u003c/dt\u003e\n\u003cdd\u003eThe \u003cstrong\u003et\u003c/strong\u003eemplate \u003cstrong\u003eenv\u003c/strong\u003eironment, or \u003ca href="/docs/3.2/en/automation/karaoke_templater/code_execution_environment/"\u003ecode execution environment\u003c/a\u003e.\u003c/dd\u003e\n\u003cdt\u003e\u003cstrong\u003e\u003ccode\u003evarctx\u003c/code\u003e\u003c/strong\u003e\u003c/dt\u003e\n\u003cdd\u003eThe inline \u003cstrong\u003evar\u003c/strong\u003eiable \u003cstrong\u003ec\u003c/strong\u003eon\u003cstrong\u003et\u003c/strong\u003ee\u003cstrong\u003ex\u003c/strong\u003et, the storage for the actual\nvalues of the \u003ca href="/docs/3.2/en/automation/karaoke_templater/inline_variables/"\u003einline variables\u003c/a\u003e.\u003c/dd\u003e\n\u003cdt\u003e\u003cstrong\u003e\u003ccode\u003etemplate\u003c/code\u003e\u003c/strong\u003e\u003c/dt\u003e\n\u003cdd\u003eThe basic \u0026ldquo;execution unit\u0026rdquo; of kara-templater, a template is essentially a\nmini-program compiled and executed by kara-templater.\u003c/dd\u003e\n\u003cdt\u003e\u003cstrong\u003e\u003ccode\u003ecode template\u003c/code\u003e\u003c/strong\u003e\u003c/dt\u003e\n\u003cdd\u003eA template that runs a chunk of Lua code but doesn\u0026rsquo;t produce output.\n(Declared with the \u003cem\u003ecode\u003c/em\u003e keyword.)\u003c/dd\u003e\n\u003cdt\u003e\u003cstrong\u003e\u003ccode\u003eoutput template\u003c/code\u003e\u003c/strong\u003e\u003c/dt\u003e\n\u003cdd\u003eA template that produces output lines from some karaoke data input. (Declared\nwith the \u003cem\u003etemplate\u003c/em\u003e keyword.)\u003c/dd\u003e\n\u003cdt\u003e\u003cstrong\u003e\u003ccode\u003ecode line\u003c/code\u003e\u003c/strong\u003e\u003c/dt\u003e\n\u003cdd\u003eA line in the subtitle that defines a code template.\u003c/dd\u003e\n\u003cdt\u003e\u003cstrong\u003e\u003ccode\u003etemplate line\u003c/code\u003e\u003c/strong\u003e\u003c/dt\u003e\n\u003cdd\u003eA line in the subtitle file that defines an output template, or part of one.\n(One \u003cem\u003eline\u003c/em\u003e class output template can span multiple template lines.)\u003c/dd\u003e\n\u003cdt\u003e\u003cstrong\u003e\u003ccode\u003eclass\u003c/code\u003e\u003c/strong\u003e\u003c/dt\u003e\n\u003cdd\u003eA class is a kind of template. There\u0026rsquo;s four basic classes, \u003cem\u003eonce\u003c/em\u003e, \u003cem\u003eline\u003c/em\u003e,\n\u003cem\u003esyl\u003c/em\u003e and \u003cem\u003efuri\u003c/em\u003e, the first only available for code templates.\u003c/dd\u003e\n\u003cdt\u003e\u003cstrong\u003e\u003ccode\u003emodifier\u003c/code\u003e\u003c/strong\u003e\u003c/dt\u003e\n\u003cdd\u003eModifiers affect how and when templates are executed.\u003c/dd\u003e\n\u003cdt\u003e\u003cstrong\u003e\u003ccode\u003etemplate text** or just **text\u003c/code\u003e\u003c/strong\u003e\u003c/dt\u003e\n\u003cdd\u003eThe \u0026ldquo;text\u0026rdquo; part of a template, either the Lua code in a code template or the\ntemplate code in output templates. \u003cem\u003eline\u003c/em\u003e class output templates also have a\n\u003cem\u003epre-line text\u003c/em\u003e.\u003c/dd\u003e\n\u003c/dl\u003e\n\u003ch2 id="startup"\u003eStartup\u003c/h2\u003e\n\u003cp\u003eThe first thing kara-templater does is simply use\n\u003ca href="/docs/3.2/en/automation/lua/modules/karaskel.lua/"\u003ekaraskel\u003c/a\u003e to collect some basic\ninformation on the subtitle file. It always passes \u003ccode\u003etrue\u003c/code\u003e for\n\u003cem\u003egenerate_furigana\u003c/em\u003e in the \u003ccode\u003ekaraskel.collect_head\u003c/code\u003e function, meaning that\n\u003ca href="/docs/3.2/en/furigana_karaoke/"\u003efurigana\u003c/a\u003e styles are always generated, unless they already\nexist.\u003c/p\u003e\n\u003cp\u003eIt then collects all template lines in the file.\u003c/p\u003e\n\u003ch3 id="collecting-parsing-and-compiling-templates"\u003eCollecting, parsing and compiling templates\u003c/h3\u003e\n\u003cp\u003eEvery line in the file is visited and checked for being a template line, i.e.\nbe a comment and have the first word in the Effect field be \u003cem\u003ecode\u003c/em\u003e or\n\u003cem\u003etemplate\u003c/em\u003e.\u003c/p\u003e\n\u003cp\u003eThe details aren\u0026rsquo;t important here, but every modifier name found in the Effect\nfield either sets a flag in the template or a value corresponding to the\nparameter given to the modifier.\u003c/p\u003e\n\u003cp\u003eWhen a named \u003cem\u003eline\u003c/em\u003e class template lines is encountered, first it\u0026rsquo;s checked if\nthere is already a \u003cem\u003eline\u003c/em\u003e class template with that name. If there isn\u0026rsquo;t one, a\nnew one is created with that name and initialised with the given modifiers. If\nthere is already one with that name, \u003cem\u003ethe text of the template line is appended\nto the current text of the template\u003c/em\u003e and modifiers present in the new template\nline but not in the current template are added to the template. Modifiers\ncannot be removed from templates in this way or any other way. The text of\n\u003cem\u003epre-line\u003c/em\u003e template lines is added to the \u003cem\u003epre-line text\u003c/em\u003e of the template\nrather than the regular text.\u003c/p\u003e\n\u003cp\u003eThe templates of different classes are each put in their own \u0026ldquo;bucket\u0026rdquo;, so for\nexample \u003cem\u003eline\u003c/em\u003e and \u003cem\u003esyl\u003c/em\u003e templates are not kept together.\u003c/p\u003e\n\u003ch3 id="clean-up"\u003eClean-up\u003c/h3\u003e\n\u003cp\u003eAfter all templates have been collected etc., all old and no longer needed\nlines are deleted from the subtitle file. This mainly includes lines with \u003cem\u003efx\u003c/em\u003e\nin the Effect field, as those are assumed to have been generated in a previous\nrun of kara-templater, so they should be replaced in this new run.\u003c/p\u003e\n\u003ch3 id="initialising-the-_tenv_"\u003eInitialising the \u003cem\u003etenv\u003c/em\u003e\u003c/h3\u003e\n\u003cp\u003eThe last thing done before starting actually running the templates is\ninitialising the runtime environment for the templates. Basically, as much as\npossible before any templates are run, is put into \u003cem\u003etenv\u003c/em\u003e. See \u003ca href="/docs/3.2/en/automation/karaoke_templater/code_execution_environment/"\u003eCode execution environment\u003c/a\u003e for more\ndetails on what\u0026rsquo;s in there. (Basically everything but \u003ccode\u003eline\u003c/code\u003e, \u003ccode\u003eorgline\u003c/code\u003e, \u003ccode\u003esyl\u003c/code\u003e\nand \u003ccode\u003ebasesyl\u003c/code\u003e.)\u003c/p\u003e\n\u003ch2 id="run-_once_-templates"\u003eRun \u003cem\u003eonce\u003c/em\u003e templates\u003c/h2\u003e\n\u003cp\u003eAll templates in the \u003cem\u003eonce\u003c/em\u003e class are executed first. Nothing truly exciting\nhappens here, the main thing that can happen is that some more things are added\nto \u003cem\u003etenv\u003c/em\u003e.\u003c/p\u003e\n\u003ch2 id="iterate-through-karaoke-lines-in-file"\u003eIterate through karaoke lines in file\u003c/h2\u003e\n\u003cp\u003eEvery non-template line in the file is now run through and has all templates attempted applied in order.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eIf a line is a comment and its Effect field doesn\u0026rsquo;t contain \u003ccode\u003eKaraoke\u003c/code\u003e it is\nskipped immediately.\u003c/li\u003e\n\u003cli\u003eIf a line is not a comment and its Effect field contains anything else that\n\u003ccode\u003eKaraoke\u003c/code\u003e or nothing (is blank) it is skipped immediately.\u003c/li\u003e\n\u003cli\u003eKara-templater attempts to match all templates against all other lines.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eEach line that hasn\u0026rsquo;t been rejected by the above points is now run through all\ntemplates in three steps.\u003c/p\u003e\n\u003cp\u003eFirst, all \u003cem\u003eline\u003c/em\u003e class templates are attempted matched against the line and\nthen run on the line. See below for a definition of when a template matches a\nline.\u003c/p\u003e\n\u003cp\u003eNext, all syllables on the line are run through in order and for each, all\n\u003cem\u003esyl\u003c/em\u003e class templates are attempted matched against the line and then run on\nthe syllable.\u003c/p\u003e\n\u003cp\u003eFinally, all furigana syllables on the line are run through in order, for each\nevery \u003cem\u003efuri\u003c/em\u003e class template is attempted matched against the line and then run\non the furigana syllable.\u003c/p\u003e\n\u003cp\u003eIt is important to note that the syllables and furigana syllables looped\nthrough are the parsed-stored syllables, not multi-highlight virtual syllables,\nnot per-character virtual syllables and not a combination.\u003c/p\u003e\n\u003cp\u003e{::template name=\u0026ldquo;examplebox\u0026rdquo;}\nAssume there are three \u003ccode\u003esyl\u003c/code\u003e class templates: A, B and C.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eA is a regular template with neither \u003cem\u003emulti\u003c/em\u003e nor \u003cem\u003echar\u003c/em\u003e modifier.\u003c/li\u003e\n\u003cli\u003eB has the \u003cem\u003emulti\u003c/em\u003e modifier but not \u003cem\u003echar\u003c/em\u003e.\u003c/li\u003e\n\u003cli\u003eC has both the \u003cem\u003echar\u003c/em\u003e and \u003cem\u003emulti\u003c/em\u003e modifiers.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eNow these templates are applied against a line with 2 syllables. This happens in order:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eSyllable 1 is picked.\n\u003cul\u003e\n\u003cli\u003eTemplate A is matched against the line. It matches.\n\u003cul\u003e\n\u003cli\u003eTemplate A is applied on syllable 1.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eTemplate B is matched against the line. It matches.\n\u003cul\u003e\n\u003cli\u003eSyllable 1 is split into multi-highlight pseudo-sylables 1.1 and 1.2\u003c/li\u003e\n\u003cli\u003eTemplate B is applied on pseudo-syllable 1.1.\u003c/li\u003e\n\u003cli\u003eTemplate B is applied on pseudo-syllable 1.2.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eTemplate C is matched against the line. It matches.\n\u003cul\u003e\n\u003cli\u003eSyllable 1 is split into per-character pseudo-syllables 1.a and 1.b\u003c/li\u003e\n\u003cli\u003eSyllable 1.a and 1.b are further split into per-character pseudo-sylables 1.a1, 1.a2, 1.b1 and 1.b2.\u003c/li\u003e\n\u003cli\u003eTemplate C is applied on pseudo-syllable 1.a1.\u003c/li\u003e\n\u003cli\u003eTemplate C is applied on pseudo-syllable 1.a2.\u003c/li\u003e\n\u003cli\u003eTemplate C is applied on pseudo-syllable 1.b1.\u003c/li\u003e\n\u003cli\u003eTemplate C is applied on pseudo-syllable 1.b2.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eSyllable 2 is picked.\n\u003cul\u003e\n\u003cli\u003eProcessing proceeds similar to syllable 1.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eAlso see later down for more details on multi-highlight and per-character pseudo-syllables.\n{:/}\u003c/p\u003e\n\u003cp\u003eIf any template matches at any time during the three steps above the (original)\nline is marked as \u0026ldquo;timed karaoke\u0026rdquo; and is then made into a comment with\n\u003ccode\u003ekaraoke\u003c/code\u003e in the Effect field.\u003c/p\u003e\n\u003ch3 id="matching-a-template-against-a-line"\u003eMatching a template against a line\u003c/h3\u003e\n\u003cp\u003eTemplates are always matched against a line, not against a syllable or\notherwise.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eIf the template has the \u003cem\u003efxgroup\u003c/em\u003e modifier and the fxgroup named is disabled,\nthe template never matches anything.\u003c/li\u003e\n\u003cli\u003eIf the template has the \u003cem\u003eall\u003c/em\u003e modifier it always matches any line.\u003c/li\u003e\n\u003cli\u003eIf the template has the same Style as a line, it matches the line.\u003c/li\u003e\n\u003cli\u003eOtherwise the template does not match the line.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id="applying-_line_-class-templates"\u003eApplying \u003cem\u003eline\u003c/em\u003e class templates\u003c/h2\u003e\n\u003cp\u003e{::template name=\u0026ldquo;todo\u0026rdquo;} write this{:/}\u003c/p\u003e\n\u003ch2 id="applying-_syl_-and-_furi_-class-templates"\u003eApplying \u003cem\u003esyl\u003c/em\u003e and \u003cem\u003efuri\u003c/em\u003e class templates\u003c/h2\u003e\n\u003cp\u003e{::template name=\u0026ldquo;todo\u0026rdquo;} write this{:/}\u003c/p\u003e\n\u003ch2 id="old-mid-level-description"\u003eOld mid-level description\u003c/h2\u003e\n\u003cpre\u003eMain kara-templater process:\r\n1. Collect header\r\n   1. Find all header information, primarily PlayResX and PlayResY\r\n   2. Find all styles\r\n   3. Generate furigana styles for styles missing them\r\n2. Collect templates and delete existing "fx" lines\r\n3. Initialise tenv\r\n   1. Add "string", "math" and "_G" references\r\n   2. Add "tenv" self-reference\r\n   3. Add "retime" function\r\n   4. Add empty "fxgroup" table\r\n4. Run every "code once" template\r\n5. For every pre-existing dialogue line in subtitle file:\r\n   a. If Effect field start with "code" or "template":\r\n      1. Skip line\r\n   b. Else:\r\n      1. If Effect field is not empty and not "karaoke":\r\n         a. Skip line\r\n      2. If Effect field is empty and line is a Comment:\r\n         a. Skip line\r\n      3. Preprocess line with karaskel\r\n      4. Initialise varctx\r\n      5. Reset tenv\r\n         1. Set "orgline" to input line\r\n         2. Set "line", "syl" and "basesyl" to nil\r\n      6. For every "line" template:\r\n         If template matches line style or template is "all":\r\n         Repeat this "template.loops" number of times:\r\n         1. Set "tenv.j" to loop counter\r\n         2. a. If template is a code line:\r\n               1. Set "tenv.line" to input line\r\n               2. Run code\r\n            b. Else:\r\n               1. Produce output line as copy of input line\r\n               2. Set "tenv.line" to output line\r\n               3. Initialise output line Layer to template Layer\r\n               4. Initialise output line Text to empty\r\n               5. If template has pre-line:\r\n                  1. Run pre-line template\r\n                  2. Append result to output Text\r\n               6. a. If template has regular line:\r\n                     For every syllable in input line:\r\n                     1. Set "tenv.syl" to syllable\r\n                     2. Update varctx for syllable\r\n                     3. Run line template\r\n                     4. Append result to output Text\r\n                     5. If "notext" is not set:\r\n                        a. If "keeptags" is set:\r\n                           1. Append "syl.text" to output Text\r\n                        b. Else:\r\n                           1. Append "syl.text_stripped" to output Text\r\n                  b. Else:\r\n                     a. If "keeptags" is set:\r\n                        1. Append "syl.text" to output Text\r\n                     b. Else:\r\n                        1. Append "syl.text_stripped" to output Text\r\n               7. Set Effect field of output line to "fx"\r\n               8. Append output line to subtitle file\r\n      7. For every main syllable in line:\r\n         For every "syl" template:\r\n         If template matches line style or template is "all":\r\n         If template is not in a disabled fxgroup:\r\n         1. Set "tenv.syl" to syllable\r\n         2. Update varctx for syllable\r\n         3. If syllable inlinefx does not match template inlinefx:\r\n            1. Skip syllable\r\n         4. If template has "noblank" set and syllable is blank:\r\n            1. Skip syllable\r\n         5. If template is "char":\r\n            1. Create "charsyl" as copy of syllable\r\n            2. Set "tenv.basesyl" to current "tenv.syl"\r\n            3. Set "tenv.syl" to "charsyl"\r\n            4. For every Unicode character in syllable:\r\n               1. Calculate virtual syllable characteristics for "charsyl"\r\n               2. Update varctx for "charsyl"\r\n               3. Continue syllable processing for the virtual syllable (from 5.b.7.6.)\r\n         6. If template is "multi":\r\n            1. Create "hlsyl" as copy of syllable\r\n            2. Unless "tenv.basesyl" already exists, set it to "hlsyl"\r\n            3. Set "tenv.syl" to "hlsyl"\r\n            4. For every highlight on syllable:\r\n               1. Calculate virtual syllable characteristics for "hlsyl"\r\n               2. Update varctx for "hlsyl"\r\n               3. Continue syllable processing for the virtual syllable (from 5.b.7.7.)\r\n         7. a. If template is a code line:\r\n               1. Set "tenv.line" to input line\r\n               2. Run code\r\n            b. Else:\r\n               Repeat this "template.loops" number of times:\r\n               1. Set "tenv.j" to loop counter\r\n               2. Create output line\r\n               3. Set output line Style to virtual syllable style\r\n               4. Set output line Layer to template layer\r\n               5. Set "tenv.line" to output line\r\n               6. Run template\r\n               7. Set output line Text to result\r\n               8. a. If "keeptags" is set:\r\n                     1. Append "syl.text" to output line Text\r\n                  b. If "notext" is not set:\r\n                     1. Append "syl.text_stripped" to output line Text\r\n                  c. Otherwise nothing is appended\r\n               9. Set output line Effect to "fx"\r\n              10. Append output line to subtitle file\r\n      8. For every furigana part in line:\r\n         Same process as for main syllables (5.b.7.)\r\n      9. If any non-code templates were applied to the line:\r\n         1. Set input line to Comment\r\n         2. Set input line Effect field to "karaoke"\r\n         3. Store modified input line back to subtitle file\r\n\r\nRunning a code line:\r\n1. Compile line text to a Lua function\r\n2. If compilation failed, report error\r\n3. Set compiled function\'s environment to tenv\r\n4. Repeat this "template.loops" number of times:\r\n   1. Set "tenv.j" to loop counter\r\n   2. Run compiled function\r\n   3. If an error occurred, report it\r\n\r\nRunning a single template:\r\n1. Set result text to template\r\n2. If there is a varctx:\r\n   For every match of "$([a-zA-Z_]+)" in result text:\r\n   1. Lowercase the captured name\r\n   2. a. If the captured name is a field in varctx:\r\n         1. Replace match in result text with value from varctx\r\n      b. Else:\r\n         1. Report warning\r\n         2. Keep match as-is in result text\r\n3. For every match of "!(.-)!" in result text:\r\n   1. Append "result " to captured code\r\n   2. Compile captured code to a Lua function\r\n   3. If compilation failed, report error\r\n   4. Set compiled function\'s environment to tenv\r\n   5. Run compiled function\r\n      a. If compiled function produced an error:\r\n         1. Report error\r\n         2. Leave match in result text\r\n      b. Else:\r\n         1. Replace match with result of running the function\u003c/pre\u003e\r\n\u003cp\u003e{::template name=\u0026ldquo;todo\u0026rdquo;}Turn this into something more reasonable?{:/}\u003c/p\u003e\n\u003cp\u003e{::template name=\u0026ldquo;automation_navbox\u0026rdquo; /}\u003c/p\u003e\n'},{id:39,href:"/docs/3.2/en/automation/karaoke_templater/template_modifiers/",title:"",description:null,content:'\u003cp\u003eTemplate lines and code lines can take a number of modifiers.\u003c/p\u003e\n\u003cp\u003eThis is a space-separated list of words in the Effect field following the \u003ccode\u003etemplate\u003c/code\u003e or \u003ccode\u003ecode\u003c/code\u003e keyword.\u003c/p\u003e\n\u003cp\u003eWhile modifiers can be combined to some extent, not all are compatible, and not all work on both code lines and for templates.\u003c/p\u003e\n\u003cp\u003eThere is a special set of modifiers that declare the class of the template line or code line.\u003c/p\u003e\n\u003ch2 id="class-declaring-modifiers"\u003eClass declaring modifiers\u003c/h2\u003e\n\u003cp\u003eBoth template lines and code lines can be produced without having a class modifier. Having one is still recommended for clarity, however.\u003c/p\u003e\n\u003cp\u003eA template line without a class modifier is implicitly given the \u003ccode\u003esyl\u003c/code\u003e modifier.\u003c/p\u003e\n\u003cp\u003eA code line without a class modifier is implicitly given the \u003ccode\u003eonce\u003c/code\u003e modifier.\u003c/p\u003e\n\u003ch3 id="once"\u003eonce\u003c/h3\u003e\n\u003cp\u003eThis class modifier is only valid for code lines.\u003c/p\u003e\n\u003cp\u003eCode lines with the \u003ccode\u003eonce\u003c/code\u003e modifier are run exactly once during Karaoke Templater execution, and are always run before any other code lines or templates. They are run in the order they are declared.\u003c/p\u003e\n\u003cp\u003e\u0026ldquo;code once\u0026rdquo; lines are primarily intended to declare functions for use in templates.\u003c/p\u003e\n\u003cp\u003e{{Examplebox|\nComment: 0,0:00:00.00,0:00:05.00,Default,,0000,0000,0000,\u003cu\u003ecode once\u003c/u\u003e,function setlayer(newlayer) line.layer = newlayer; return \u0026ldquo;\u0026quot;; end\u003c/p\u003e\n\u003cp\u003eThis example declares a new function that changes the Layer field in the output line.\n}}\u003c/p\u003e\n\u003ch3 id="line-_name_"\u003eline \u003cem\u003e[name]\u003c/em\u003e\u003c/h3\u003e\n\u003cp\u003eThis class modifier is valid for both code lines and template lines.\u003c/p\u003e\n\u003cp\u003eWhen used on template lines it takes an optional parameter naming the line template the template line participates in. The template name must not match any template modifier names.\u003c/p\u003e\n\u003cp\u003eAnonymous line templates (with no template name given) can not have pre-line template text.\u003c/p\u003e\n\u003cp\u003eCode lines can not be named, they must be anonymous.\u003c/p\u003e\n\u003cp\u003eNamed line template lines append to the template text in the order they appear. The appending of template text happens at template parse time, not at execution time.\u003c/p\u003e\n\u003cp\u003e{{Examplebox|\nComment: 0,0:00:00.00,0:00:05.00,Default,,0000,0000,0000,\u003cu\u003ecode line\u003c/u\u003e,fxgroup.funky = line.actor == \u0026ldquo;funky\u0026rdquo;\u003c/p\u003e\n\u003cp\u003eThis code line is run once per input line. It enables/disables an effect group named \u0026ldquo;funky\u0026rdquo; depending on the Actor field of the input line.\n}}\n{{Examplebox|\nComment: 0,0:00:00.00,0:00:05.00,Default,,0000,0000,0000,\u003cu\u003etemplate line\u003c/u\u003e,{\\r\\t($start,$end,\\bord0)}\u003c/p\u003e\n\u003cp\u003eThis template line declares an anonymous line template. The effect produced will transform the border of each syllable to zero during the syllable\u0026rsquo;s duration.\n}}\n{{Examplebox|\nComment: 0,0:00:00.00,0:00:05.00,Default,,0000,0000,0000,\u003cu\u003etemplate line jumper\u003c/u\u003e,{\\r\\t($start,$mid,\\frz-0.1)\\t($mid,$end,\\frz0}\u003c/p\u003e\n\u003cp\u003eThis template line appends to a line template named \u0026ldquo;jumper\u0026rdquo;  or creates it if it doesn\u0026rsquo;t exist. Together with the pre-line template example given below, this will produce a \u0026ldquo;jumping\u0026rdquo; effect for the syllables.\n}}\u003c/p\u003e\n\u003ch3 id="pre-line-_name_"\u003epre-line \u003cem\u003e[name]\u003c/em\u003e\u003c/h3\u003e\n\u003cp\u003eThis class modifier is only valid for template lines.\u003c/p\u003e\n\u003cp\u003eThe \u003ccode\u003epre-line\u003c/code\u003e modifier takes an optional parameter naming the line template the template line participates in. The template name must not match any template modifier names.\u003c/p\u003e\n\u003cp\u003eAnonymous line templates with only pre-line text leave the original input line text alone and just prepends the template text to the line.\u003c/p\u003e\n\u003cp\u003eNamed pre-line template lines append to the pre-line template text in the order they appear. The appending of template text happens at template parse time, not at execution time.\u003c/p\u003e\n\u003cp\u003e{{Examplebox|\nComment: 0,0:00:00.00,0:00:05.00,Default,,0000,0000,0000,\u003cu\u003etemplate pre-line\u003c/u\u003e,{\\be1}\u003c/p\u003e\n\u003cp\u003eThis template line declares an anonymous line template, that will prepend \u003ctt\u003e{\\be1}\u003c/tt\u003e to all matching lines.\n}}\n{{Examplebox|\nComment: 0,0:00:00.00,0:00:05.00,Default,,0000,0000,0000,\u003cu\u003etemplate pre-line jumper\u003c/u\u003e,{\\org(-10000,$y)}\u003c/p\u003e\n\u003cp\u003eThis template line appends to the pre-line template text of a line template named \u0026ldquo;jumper\u0026rdquo;, or creates it if it doesn\u0026rsquo;t exist. Together with the line template example given above, this will produce a \u0026ldquo;jumping\u0026rdquo; effect for the syllables.\n}}\u003c/p\u003e\n\u003ch3 id="syl"\u003esyl\u003c/h3\u003e\n\u003cp\u003eThis class modifier is valid for both code lines and template lines.\u003c/p\u003e\n\u003cp\u003eSyl templates can not be named.\u003c/p\u003e\n\u003cp\u003e{{Examplebox|\nComment: 0,0:00:00.00,0:00:05.00,Default,,0000,0000,0000,\u003cu\u003etemplate syl\u003c/u\u003e,{\\pos($x,$y)}\u003c/p\u003e\n\u003cp\u003eThis template line declares a syl template that simply positions the syllable text.\n}}\u003c/p\u003e\n\u003ch3 id="furi"\u003efuri\u003c/h3\u003e\n\u003cp\u003eThis class modifier is valid for both code lines and template lines.\u003c/p\u003e\n\u003cp\u003eFuri templates can not be named.\u003c/p\u003e\n\u003cp\u003e{{Examplebox|\nComment: 0,0:00:00.00,0:00:05.00,Default,,0000,0000,0000,\u003cu\u003etemplate furi\u003c/u\u003e,{\\pos($x,$y)}\u003c/p\u003e\n\u003cp\u003eThis template line declares a furi template that simply positions the syllable text. It\u0026rsquo;s not needed to do anything further to get correct furigana formatting.\n}}\u003c/p\u003e\n\u003ch3 id="syl-furi"\u003esyl furi\u003c/h3\u003e\n\u003cp\u003eIt\u0026rsquo;s possible to combine the \u003ccode\u003esyl\u003c/code\u003e and \u003ccode\u003efuri\u003c/code\u003e class modifiers. This results in two identical templates being generated from the template line, one syl template and one furi template.\u003c/p\u003e\n\u003cp\u003eThis is the only possible combination of class modifiers, they are otherwise exclusive.\u003c/p\u003e\n\u003ch2 id="other-modifiers"\u003eOther modifiers\u003c/h2\u003e\n\u003ch3 id="all"\u003eall\u003c/h3\u003e\n\u003cp\u003eApply template to all styles, not just the one of the template line.\u003c/p\u003e\n\u003cp\u003eApplicable for both code lines and templates, and for all classes.\u003c/p\u003e\n\u003cp\u003e{{Examplebox|\nComment: 0,0:00:00.00,0:00:05.00,Default,,0000,0000,0000,\u003cu\u003etemplate syl all\u003c/u\u003e,{\\pos($x,$y)}\u003c/p\u003e\n\u003cp\u003eThis template will be applied to every single syllable in the entire subtitle file, regardless of the style of the line they are on.\n}}\u003c/p\u003e\n\u003ch3 id="char"\u003echar\u003c/h3\u003e\n\u003cp\u003eMake the template work per-character instead of per-syllable. This changes application order semantics in a significant way, see \u003ca href="/docs/3.2/en/automation/karaoke_templater/template_execution_rules_and_order/"\u003eTemplate execution and order\u003c/a\u003e for details.\u003c/p\u003e\n\u003cp\u003eWhile this will work on code lines, it is generally not useful, see the discussion on execution order.\u003c/p\u003e\n\u003cp\u003e{{Examplebox|\nComment: 0,0:00:00.00,0:00:05.00,Default,,0000,0000,0000,\u003cu\u003etemplate syl char\u003c/u\u003e,{\\pos($x,$y)}\nComment: 1,0:00:00.00,0:00:05.00,Default,,0000,0000,0000,\u003cu\u003etemplate syl char\u003c/u\u003e,{\\pos($x,$y)\\bord0}\u003c/p\u003e\n\u003cp\u003eEvery single character on the line will be positioned separately. For each syllable, each template will apply for all characters in one go, and not be applied interleaved.\u003c/p\u003e\n\u003cp\u003eFor example, if there are two syllables, \u0026ldquo;ab\u0026rdquo; and \u0026ldquo;cd\u0026rdquo;, and the above two templates are applied to them, the result will be 8 lines with the following text, in this order:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e{\\pos($x,$y)}a\r\n{\\pos($x,$y)}b\r\n{\\pos($x,$y)\\bord0}a\r\n{\\pos($x,$y)\\bord0}b\r\n{\\pos($x,$y)}c\r\n{\\pos($x,$y)}d\r\n{\\pos($x,$y)\\bord0}c\r\n{\\pos($x,$y)\\bord0}d\r\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e}}\u003c/p\u003e\n\u003ch3 id="fx-_name_"\u003efx \u003cem\u003ename\u003c/em\u003e\u003c/h3\u003e\n\u003cp\u003eMake template only apply to syllables that have the named \u003ca href="/docs/3.2/en/karaoke_inline-fx/"\u003einline-fx\u003c/a\u003e. Specifying an inline-fx name is required; the name may also overlap with template modifier names though this is not recommended.\u003c/p\u003e\n\u003cp\u003e{{Examplebox|\nComment: 0,0:00:00.00,0:00:05.00,Default,,0000,0000,0000,\u003cu\u003etemplate syl fx drop\u003c/u\u003e,{\\move($x,$y,$x,!$y+30!,$start,$end)}\u003c/p\u003e\n\u003cp\u003eWith this template, all syllables that have the inline-fx \u0026ldquo;drop\u0026rdquo; will get an additional line produced, where the syllables moves down 30 pixels during its duration.\u003c/p\u003e\n\u003cp\u003eAll other template lines that don\u0026rsquo;t have \u003cem\u003efx\u003c/em\u003e specified will still be applied as usual to those syllables as well.\n}}\u003c/p\u003e\n\u003ch3 id="fxgroup-_name_"\u003efxgroup \u003cem\u003ename\u003c/em\u003e\u003c/h3\u003e\n\u003cp\u003eDeclare template to be in the named effect group. Specifying an effect group name is required; the name may also overlap with template modifier names and Lua reserved words, though this is not recommended.\u003c/p\u003e\n\u003cp\u003e{{Examplebox|There is an example of \u003cem\u003efxgroup\u003c/em\u003e on the \u003ca href="/docs/3.2/en/automation/karaoke_templater/code_execution_environment/#conditionaltemplateswithfxgroup"\u003eCode execution environment\u003c/a\u003e page.}}\u003c/p\u003e\n\u003ch3 id="keeptags"\u003ekeeptags\u003c/h3\u003e\n\u003cp\u003eSpecify that the original tags must be kept in the syllable after application.\u003c/p\u003e\n\u003cp\u003eThis has no effect when combined with \u003ccode\u003echar\u003c/code\u003e or \u003ccode\u003emulti\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003e{{Examplebox|\ntemplate line \u003cu\u003ekeeptags\u003c/u\u003e: {\\r\\t($start,!$start+1!,\\frx40)\\t(!$start+1!,$end,\\frx0)}\nkaraoke: {\\k21}hi{\\k10}gu{\\k23}ra{\\k22}shi {\\k38}ga {\\k37\\1c\u0026amp;H0000FF\u0026amp;}na{\\k37}ku\u003c/p\u003e\n\u003cp\u003eThe syllables \u0026ldquo;tip\u0026rdquo; back over a bit during highlight. One of them (\u0026ldquo;na\u0026rdquo;) is coloured differently by putting an override tag in the timed karaoke line, but the following syllables don\u0026rsquo;t get it because of the customary \u003ccode\u003e\\r\u003c/code\u003e at the start of the template.\u003c/p\u003e\n\u003cp\u003eThe \u003cem\u003enotags\u003c/em\u003e modifier ensures that the special colour of the special syllable gets carried over to the output.\n}}\u003c/p\u003e\n\u003ch3 id="multi"\u003emulti\u003c/h3\u003e\n\u003cp\u003eMake the template apply per-highlight in \u003ca href="/docs/3.2/en/furigana_karaoke/"\u003emulti-highlight\u003c/a\u003e timed karaoke. This changes application order semantics in a significant way, see \u003ca href="/docs/3.2/en/automation/karaoke_templater/template_execution_rules_and_order/"\u003eTemplate execution and order\u003c/a\u003e for details.\u003c/p\u003e\n\u003cp\u003eWhile this will work on code lines, it is generally not useful, see the discussion on execution order.\u003c/p\u003e\n\u003cp\u003e{{Examplebox|\ntemplate syl \u003cu\u003emulti\u003c/u\u003e: {\\an5\\pos($scenter,$smiddle)\\1a\u0026amp;HFF\u0026amp;\\t($start,$end,\\bord5\\3a\u0026amp;HFF\u0026amp;)}\nkaraoke: {\\k33}風\u003cu\u003e{\\k36}#\u003c/u\u003e{\\k89}の{\\k46}花\u003cu\u003e{\\k28}#\u003c/u\u003e{\\k57}よ\u003c/p\u003e\n\u003cp\u003eThe timed karaoke line uses basic multi-highlight markup, the \u003ctt\u003e#\u003c/tt\u003e syllables, to create multi-highlight syllables. Such, the 風 (ka-ze) and 花 (ha-na) kanji each get stored as a single syllable that gets two highlights each, and the \u003ctt\u003e#\u003c/tt\u003e characters aren\u0026rsquo;t displayed at all in the applied effect. (They will still display if you try to play the timed karaoke line without applying any templates.)\u003c/p\u003e\n\u003cp\u003eThe template uses the \u003cem\u003emulti\u003c/em\u003e modifier to signal that it wants to use multi-highlights instead of just one highlight/application per displayed syllable. The effect is a kind of simple \u0026ldquo;exploding border\u0026rdquo;, but it explodes twice on both the 風 and 花 kanji. If the \u003cem\u003emulti\u003c/em\u003e modifier wasn\u0026rsquo;t there, it would only explode once on each.\n}}\u003c/p\u003e\n\u003ch3 id="noblank"\u003enoblank\u003c/h3\u003e\n\u003cp\u003eSpecify that the template will not be applied to syllables considered \u0026ldquo;blank\u0026rdquo;. A syllable is considered blank if its tag-stripped text consists only of a combination of ASCII whitespace characters and ideographic fullwidth space characters, or is completely empty. A syllable is also considered empty if its duration is zero.\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e\u003cem\u003eSee the \u003cem\u003enotext\u003c/em\u003e modifier below for an example.\u003c/em\u003e\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch3 id="notext"\u003enotext\u003c/h3\u003e\n\u003cp\u003eSpecify that the original text will not be appended to the output line.\u003c/p\u003e\n\u003cp\u003eThis is intended for use primarily with templates that output drawing tags and similar.\u003c/p\u003e\n\u003cp\u003eNot applicable for code lines.\u003c/p\u003e\n\u003cp\u003e{{Examplebox|\ncode once: sword_shape = \u0026ldquo;m 0 0 l 5 -5 l 5 -30 l 10 -30 l 10 -32 l 2 -32 l 2 -40 l -2 -40 l -2 -32 l -10 -32 l -10 -30 l -5 -30 l -5 -5 \u0026quot;\ntemplate syl notext noblank: {\\an5\\move($scenter,!$smiddle-30!,$scenter,$smiddle,!$start-20!,$start)\\p2}!sword_shape!\u003c/p\u003e\n\u003cp\u003eThe first code line defines a vector drawing shape for convenience, so it doesn\u0026rsquo;t clutter up the actual template lines later on. The drawing is of a small simple sword pointing downwards. The effect itself is these small swords dropping down onto the syllables, by a move.\u003c/p\u003e\n\u003cp\u003eThe template uses the \u003cem\u003enotext\u003c/em\u003e modifier to avoid getting the original syllable text shown, because it\u0026rsquo;s being replaced with a vector drawing here. Also the \u003cem\u003enoblank\u003c/em\u003e modifier is used to avoid producing anything for \u0026ldquo;invisible\u0026rdquo; syllables, eg. we don\u0026rsquo;t want a sword dropping down on a lone timed space, that just looks dumb.\n}}\u003c/p\u003e\n\u003ch3 id="repeat-_n_-loop-_n_"\u003erepeat \u003cem\u003en\u003c/em\u003e, loop \u003cem\u003en\u003c/em\u003e\u003c/h3\u003e\n\u003cp\u003eSpecify that the template will be applied the given number of times. Specifying the number of loops is required. The number of loops must be a constant integer number, it can not be a variable or otherwise calculated dynamically.\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003erepeat\u003c/code\u003e and \u003ccode\u003eloop\u003c/code\u003e are synonymous.\u003c/p\u003e\n\u003cp\u003eNote that the execution order of looped line templates and looped syl/furi templates is different. See \u003ca href="/docs/3.2/en/automation/karaoke_templater/template_execution_rules_and_order/"\u003eTemplate execution and order\u003c/a\u003e for details.\u003c/p\u003e\n\u003cp\u003e{{Examplebox|\ntemplate syl \u003cu\u003eloop 4\u003c/u\u003e: {\\move($x,$y,!$x+math.random(-30,30)!,!$y+math.random(-30,30)!,$start,$end)\\alpha\u0026amp;Hc0\u0026amp;\\t($start,$end,\\alpha\u0026amp;HFF\u0026amp;)}\u003c/p\u003e\n\u003cp\u003eThe \u003cem\u003eloop\u003c/em\u003e modifier is used to created 4 copies of the syllable for each time this template is run. Each of those move in a random direction, up to 30 pixels away in X and Y direction. They also fade out.\u003c/p\u003e\n\u003cp\u003eThe starting alpha for each copy, \u003ccode\u003e\u0026amp;Hc0\u003c/code\u003e is chosen as 256 - (256 / 4), 4 being the number of loops made. This way, the opacity for each copy adds up to exactly 256. (Technically it should be 255, but that can\u0026rsquo;t be achieved with an even number of loops.)\n}}\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e\u003cem\u003eAlso see the examples on the \u003ca href="/docs/3.2/en/automation/karaoke_templater/code_execution_environment/#loopingtemplates"\u003eCode execution environment\u003c/a\u003e page for more advanced usage.\u003c/em\u003e\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003e{::template name=\u0026ldquo;automation_navbox\u0026rdquo; /}\u003c/p\u003e\n'},{id:40,href:"/docs/3.2/en/automation/karaoke_templater/tutorial_1/",title:"",description:null,content:'\u003cp\u003eWelcome to the first tutorial in using Karaoke Templater to create \u003ca href="/docs/3.2/en/glossary/karaoke_effect/"\u003ekaraoke effects\u003c/a\u003e. We\u0026rsquo;ll start out with something simple and\nthen continue on to more advanced effects throughout the series.\u003c/p\u003e\n\u003ch2 id="finding-karaoke-templater"\u003eFinding Karaoke Templater\u003c/h2\u003e\n\u003cp\u003eYou can run Karaoke Templater in two different ways. For now we\u0026rsquo;ll just\nconcentrate on one of them.\u003c/p\u003e\n\u003cp\u003eLook under the Automation menu in Aegisub.\u003c/p\u003e\n\u003cp\u003e\u003cimg src="/img/3.2/Automation-menu-kara-templater-gray.png" alt="Automation-menu-kara-templater-gray"\u003e\u003c/p\u003e\n\u003cp\u003eYou should see the option called \u003cem\u003eApply karaoke template\u003c/em\u003e, though it will be\nunavailable. This is what you\u0026rsquo;ll select to use the \u0026ldquo;templates\u0026rdquo; we\u0026rsquo;ll be writing\nthroughout these tutorials. Right now it\u0026rsquo;s unavailable because you haven\u0026rsquo;t\nentered any templates. We\u0026rsquo;ll get to that in a moment.\u003c/p\u003e\n\u003cp\u003eIf you don\u0026rsquo;t have the \u003cem\u003eApply karaoke template\u003c/em\u003e option, your Aegisub\ninstallation is either incomplete or damaged. You need to repair your\ninstallation in that case, to be able to use Karaoke Templater.\u003c/p\u003e\n\u003cp\u003eBut there is something else to make sure of first.\u003c/p\u003e\n\u003ch2 id="getting-timed-karaoke"\u003eGetting timed karaoke\u003c/h2\u003e\n\u003cp\u003eKaraoke Templater can do many things for you, but it can\u0026rsquo;t guess the lyrics for\nyour song, or how they\u0026rsquo;re synchronised with the music. You\u0026rsquo;ll have to time the\nlyrics yourself, or get someone else to do it. You can learn how to time\nkaraoke at the \u003ca href="/docs/3.2/en/karaoke_timing_tutorial/"\u003eKaraoke_Timing_Tutorial\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eWe\u0026rsquo;ll call song lyrics with basic karaoke timing (\\k timing), but no other\nspecial effects, for \u003cem\u003etimed karaoke\u003c/em\u003e. When an effect has been applied to the\nkaraoke we\u0026rsquo;ll call it \u003cem\u003estyled karaoke\u003c/em\u003e.\u003c/p\u003e\n\u003cp\u003eIf you don\u0026rsquo;t have any song to work with here are two lines from a song. You\ncan select them in your browser, select \u003cem\u003eEdit_→_Copy\u003c/em\u003e, then go to Aegisub and\nselect \u003cem\u003eEdit_→_Paste\u003c/em\u003e, to get them into Aegisub.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eDialogue: 0,0:00:01.85,0:00:09.06,Default,,0000,0000,0000,,{\\k97}shi{\\k41}ta{\\k0} {\\k20}no{\\k10} {\\k30}u{\\k80}e{\\k53} {\\k23}a{\\k21}ma{\\k39}ku{\\k7}  {\\k24}to{\\k24}ke{\\k31}ru{\\k0} {\\k37}wa{\\k23}ta{\\k92}gu{\\k69}mo\r\nDialogue: 0,0:00:09.28,0:00:16.21,Default,,0000,0000,0000,,{\\k79}ki{\\k61}su{\\k0} {\\k9}o{\\k0} {\\k37}shi{\\k98}te{\\k40}  {\\k23}ku{\\k25}ro{\\k40}i{\\k0} {\\k28}tsu{\\k19}ba{\\k51}sa{\\k0} {\\k11}no{\\k0} {\\k34}shi{\\k138}ta\r\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eEither way you have some karaoke timed lyrics now, so we can start.\u003c/p\u003e\n\u003ch3 id="load-a-video"\u003eLoad a video\u003c/h3\u003e\n\u003cp\u003eYou don\u0026rsquo;t need to load any audio, but it can be a good idea to have some video\nopen. If you don\u0026rsquo;t have any video files ready you can use, select \u003cem\u003eVideo_→_Use\ndummy video\u003c/em\u003e and just say OK. It\u0026rsquo;s not a very interesting video you will get,\nbut it will show you how the subtitles and the effect we\u0026rsquo;re creating will look.\u003c/p\u003e\n\u003ch2 id="writing-a-_k-replacer_-style-template"\u003eWriting a \u003cem\u003ek-replacer\u003c/em\u003e style template\u003c/h2\u003e\n\u003cp\u003eNow we have everything else set up it\u0026rsquo;s time to make the actual template.\nFirst, here\u0026rsquo;s how to add it. The explanation of what every part means will\nfollow.\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eSelect the very first subtitle line in the file.\u003c/li\u003e\n\u003cli\u003eSelect \u003cem\u003eSubtitles_→_Insert Lines_→_Before Current\u003c/em\u003e to get a new line before it. This will become our karaoke template line. It doesn\u0026rsquo;t \u003cem\u003eneed\u003c/em\u003e to be first, but it usually makes it easier to keep track of for yourself.\u003c/li\u003e\n\u003cli\u003eMake sure the newly created line has the same \u003cem\u003estyle\u003c/em\u003e as your timed karaoke.\u003c/li\u003e\n\u003cli\u003eClick the \u003cem\u003eComment\u003c/em\u003e check box for the new line. It should change colour in the subtitle grid.\u003c/li\u003e\n\u003cli\u003eFind the \u003cem\u003eEffect\u003c/em\u003e field, it\u0026rsquo;s to the right of the \u003cem\u003eStyle\u003c/em\u003e and \u003cem\u003eActor\u003c/em\u003e fields. Put the text \u0026ldquo;\u003ccode\u003etemplate line\u003c/code\u003e\u0026rdquo; into it. (Without the quotes!) Press the \u003cem\u003eEnter\u003c/em\u003e key on your keyboard to save the Effect field.\u003c/li\u003e\n\u003cli\u003eFinally, enter this text for the main text of your template line. Finish off with \u003cem\u003eEnter\u003c/em\u003e again. \u003ccode\u003e{\\r\\t($start,$mid,\\fscy120)\\t($mid,$end,\\fscy100)}\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e{::template name=\u0026ldquo;todo\u0026rdquo;}Insert a screenshot of how it should look after the steps.{:/}\u003c/p\u003e\n\u003cp\u003eNow look at the \u003cem\u003eAutomation\u003c/em\u003e menu again. If you made the template line\ncorrectly, \u003cem\u003eApply karaoke template\u003c/em\u003e will now be available. If it isn\u0026rsquo;t review\nthe steps above again.\u003c/p\u003e\n\u003cp\u003eSelect \u003cem\u003eApply karaoke templates\u003c/em\u003e and watch Karaoke Templater do its work.\u003c/p\u003e\n\u003cp\u003e{::template name=\u0026ldquo;todo\u0026rdquo;}Another screenshot, this time after applying templates.{:/}\u003c/p\u003e\n\u003cp\u003eIf you have a video open you can view the effect right now, inside Aegisub.\u003c/p\u003e\n\u003cp\u003eAlso notice how the template line was left in place, and the timed karaoke was\nchanged to comment lines and had \u003cem\u003ekaraoke\u003c/em\u003e filled into their Effect fields.\nKaraoke Templater preserves your timed karaoke in the styled karaoke so you\nwon\u0026rsquo;t lose it. But it also has another function\u0026hellip;\u003c/p\u003e\n\u003ch2 id="extending-the-effect-a-bit"\u003eExtending the effect a bit\u003c/h2\u003e\n\u003cp\u003eContinuing right on from above, now try doing this:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eChange the text of the template line to: \u003ccode\u003e{\\r\\k$kdur\\t($start,$end,\\1c\u0026amp;H00FF00\u0026amp;)\\t($start,$mid,\\fscy120)\\t($mid,$end,\\fscy100)}\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eApply templates again\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e{::template name=\u0026ldquo;todo\u0026rdquo;}More screenshot{:/}\u003c/p\u003e\n\u003cp\u003eKaraoke Templater re-used the commented out timed karaoke and changed the\nstyled karaoke to match the new effect instead. You can also try changing the\ncommented out timed karaoke and apply templates again.\u003c/p\u003e\n\u003cp\u003eLike this, you can work gradually on your effect and preview it as you go.\u003c/p\u003e\n\u003ch2 id="so-what-does-it-all-mean"\u003eSo what does it all mean?\u003c/h2\u003e\n\u003cp\u003eTo finish off this first part of the tutorial, here\u0026rsquo;s what each part means.\nThis is not the full explanation of everything, but it should be plenty for\nnow.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cem\u003eTemplate lines\u003c/em\u003e are lines in the subtitle file marked in a special way.\nThey must always be Comment lines, and the first word in their Effect\nfield must be \u003ccode\u003etemplate\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003eThere are several kinds of template lines. We only used one in this\ntutorial, this template line type, or \u003cem\u003etemplate class\u003c/em\u003e, is called a \u003cem\u003eline\ntemplate\u003c/em\u003e. Yes, it might be a bit confusing. It\u0026rsquo;s called this because it\ncreates one line of styled karaoke from one line of timed karaoke. The\nsecond word in the Effect field of a template line tells what template\nclass it is.  For line templates, this is \u003ccode\u003eline\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003eSo, the \u003ccode\u003etemplate line\u003c/code\u003e text in the Effect field means this is a\n\u003cem\u003etemplate line\u003c/em\u003e of \u003cem\u003eline class\u003c/em\u003e.\n^\u003c/li\u003e\n\u003cli\u003eA template only does something to timed karaoke lines that have the same\nStyle as the template line.\n^\u003c/li\u003e\n\u003cli\u003eStyled karaoke produced by Karaoke Templater all has \u003ccode\u003efx\u003c/code\u003e in the Effect\nfield. This is used as a reminder for Karaoke Templater that this line\nshould be replaced, if templates are applied once again.\n^\u003c/li\u003e\n\u003cli\u003eThe main text for a template line is called the \u003cem\u003etemplate text\u003c/em\u003e. In\n\u003cem\u003eline\u003c/em\u003e templates, every \\k tag is replaced with the template text.\u003c/li\u003e\n\u003cli\u003eTemplate text can use several \u003cem\u003evariables\u003c/em\u003e. These are short words that\nstart with a dollar-sign, like \u003ccode\u003e$start\u003c/code\u003e, \u003ccode\u003e$end\u003c/code\u003e, \u003ccode\u003e$mid\u003c/code\u003e and \u003ccode\u003e$kdur\u003c/code\u003e.\nVariables are replaced with the information they store for every syllable\nthat\u0026rsquo;s replaced.\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003e$start\u003c/code\u003e gets replaced with the start time of the syllable. This is\nin milliseconds from the start of the line, ie. a time code suitable\nfor putting into the \\t, \\move and \\fade tags.\u003c/li\u003e\n\u003cli\u003eSimilarly, \u003ccode\u003e$end\u003c/code\u003e is the end time of the syllable, also in\nmilliseconds.\u003c/li\u003e\n\u003cli\u003eA bit more special is \u003ccode\u003e$mid\u003c/code\u003e, this is the \u003cem\u003emidway time\u003c/em\u003e of the\nsyllable, the time right in the middle of \u003ccode\u003e$start\u003c/code\u003e and \u003ccode\u003e$end\u003c/code\u003e. Here, we\nused it to grow each syllable taller the first half of its duration,\nand back to normal height for the second half. Also in milliseconds.\u003c/li\u003e\n\u003cli\u003eThe \u003ccode\u003e$kdur\u003c/code\u003e variable, however is in centiseconds. This is the\noriginal time from the \\k tag, and is almost only useful for putting\nback into a \\k tag, like we did here.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eWith this knowledge, you should already be able to create lots of effects. You\nmay also want to refer to the page on \u003ca href="/docs/3.2/en/ass_tags/"\u003eASS override tags\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eYou can also \u003ca href="/docs/3.2/en/automation/karaoke_templater/tutorial_2/"\u003econtinue to the next tutorial\u003c/a\u003e, where we\u0026rsquo;ll look at how to\ndo math with variables to get more variation.\u003c/p\u003e\n'},{id:41,href:"/docs/3.2/en/automation/karaoke_templater/tutorial_2/",title:"",description:null,content:'\u003cp\u003eIn \u003ca href="/docs/3.2/en/automation/karaoke_templater/tutorial_1/"\u003ethe previous tutorial\u003c/a\u003e we saw how to use the basic features of Karaoke Templater to make simple karaoke effects. We\u0026rsquo;ll continue where we left off here, by expanding on the basics from last tutorial.\u003c/p\u003e\n\u003cp\u003e{::template name=\u0026ldquo;todo\u0026rdquo;}make and insert screenshots{:/}\u003c/p\u003e\n\u003ch2 id="preparations"\u003ePreparations\u003c/h2\u003e\n\u003cp\u003eAs before, you\u0026rsquo;ll still need some timed karaoke and a video to preview the effects. I won\u0026rsquo;t go into further details with that here.\u003c/p\u003e\n\u003ch2 id="adding-a-fadeout"\u003eAdding a fadeout\u003c/h2\u003e\n\u003cp\u003eTo recap, here\u0026rsquo;s the effect from the end of last tutorial:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e{\\r\\k$kdur\\t($start,$end,\\1c\u0026amp;H00FF00\u0026amp;)\\t($start,$mid,\\fscy120)\\t($mid,$end,\\fscy100)}\r\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWe\u0026rsquo;ll add a fadeout effect to this now, having each syllable fade out \u003cem\u003eafter\u003c/em\u003e it has been sung, not while. We\u0026rsquo;ll have to do a little maths to make this: Start the fadeout at \u003ccode\u003e$end\u003c/code\u003e and have it continue until \u003ccode\u003e$end+200\u003c/code\u003e, ie. have it fade out for 200 milliseconds after the syllable.\u003c/p\u003e\n\u003cp\u003eChange the template to this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e{\\r\\k$kdur\\t($start,$end,\\1c\u0026amp;H00FF00\u0026amp;)\\t($start,$mid,\\fscy120)\\t($mid,$end,\\fscy100)\\t($end,!$end+200!,\\alpha\u0026amp;HFF\u0026amp;)}\r\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThen try applying templates again. You should see the old effect happen as usual, but this time afterwards, each syllable fades out.\u003c/p\u003e\n\u003cp\u003eThe magic in this is the exclamation marks here: \u003ccode\u003e!$end+200!\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003eWhen you have a pair of exclamation marks like that, everything in between them is treated as an \u003cem\u003eexpression\u003c/em\u003e (actually a very small Lua program, but don\u0026rsquo;t worry about that yet.) Here we use an expression to take the end-time of the syllable and add 200 to it, getting a new number. The end result is that the \u003ctt\u003e\\t\u003c/tt\u003e fadeout effect lasts from \u003ccode\u003e$end\u003c/code\u003e and until 200 milliseconds later.\u003c/p\u003e\n\u003ch2 id="tweaking-the-growshrink-effect"\u003eTweaking the grow/shrink effect\u003c/h2\u003e\n\u003cp\u003eMaybe you think the growing-shrinking effect looks a bit odd, switching right in the middle. It might look better if it was at the maximum height earlier, and used more time shrinking back to normal. Well, that can be changed:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e{\\r\\k$kdur\\t($start,$end,\\1c\u0026amp;H00FF00\u0026amp;)\\t($start,!$start+$dur*0.3!,\\fscy120)\\t(!$start+$dur*0.3!,$end,\\fscy100)}\r\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWith this, the growing-part will only take the first three-tenths of the syllable duration, and the shrinking the rest. We used one new variable here, \u003ccode\u003e$dur\u003c/code\u003e. This is the duration of the syllable in milliseconds, just like \u003ccode\u003e$kdur\u003c/code\u003e is the duration in centiseconds. (We could actually just as well just have used \u003ccode\u003e$kdur\u003c/code\u003e here, and then multiplied by 3 instead of 0.3.)\u003c/p\u003e\n\u003cp\u003eNote that I removed the fadeout from here, it\u0026rsquo;s just to make the line shorter and easier to read. You can add it back if you want.\u003c/p\u003e\n\u003cp\u003eHopefully this tutorial has given you some more ideas of what you can do. In \u003ca href="#"\u003ethe next one\u003c/a\u003e we\u0026rsquo;ll add another layer to the effect by using multiple templates!\u003c/p\u003e\n'},{id:42,href:"/docs/3.2/en/automation/lua/",title:"",description:null,content:'\u003cp\u003eThe Automation 4 Lua scripting engine is based on the version 5.1 series of\n\u003ca href="http://www.lua.org"\u003ethe Lua scripting language\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eThis manual will not deal with the Lua language itself nor the standard\nlibraries shipping with Lua, but only the additional functions and data\nstructures provided by the Aegisub Automation 4 Lua interface. Please see\n\u003ca href="http://www.lua.org/manual/5.1/"\u003ethe Lua 5.1 manual\u003c/a\u003e for details on the\nlanguage itself and its standard libraries.\u003c/p\u003e\n\u003ch2 id="general-overview-of-the-organisation-of-automation-4-lua"\u003eGeneral overview of the organisation of Automation 4 Lua\u003c/h2\u003e\n\u003cp\u003eThe smallest legal Automation 4 Lua script is an empty file, but that won\u0026rsquo;t\nbe able to do anything interesting.\u003c/p\u003e\n\u003cp\u003eThere\u0026rsquo;s a number of global variables a script can set to provide\ninformation about itself. This information will be displayed in the\n\u003ca href="/docs/3.2/en/automation/manager/"\u003eAutomation/Manager\u003c/a\u003e window: \u003ccode\u003escript_name\u003c/code\u003e, \u003ccode\u003escript_description\u003c/code\u003e,\n\u003ccode\u003escript_author\u003c/code\u003e and \u003ccode\u003escript_version\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eAutomation 4 Lua implements both of the currently defined \u0026ldquo;features\u0026rdquo; of\nAutomation 4: Macro and Export Filter. One script (one file) can define\nzero, one or many of each of those features. For example, the Karaoke\nTemplater script defines one macro and one export filter.\u003c/p\u003e\n\u003cp\u003eWhen an Automation 4 Lua script is loaded, its top-level code is executed\nonce. You can put variable initialisations and such at the top level, but\nwhat you usually will do is define some of the script information globals,\nimport some modules, write some functions that do the script\u0026rsquo;s work and\nthen call the feature registration functions. This is described on the\n\u003cstrong\u003e\u003ca href="/docs/3.2/en/automation/lua/registration/"\u003eRegistration\u003c/a\u003e\u003c/strong\u003e page. The only fields of the\n\u003ccode\u003eaegisub\u003c/code\u003e object that should be touched during script loading are\n\u003ccode\u003elua_automation_version\u003c/code\u003e and the registration functions. Most others will\nsimply do nothing and return \u003ccode\u003enil\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eWhen the user activates a feature from the Aegisub interface (such as by\nselecting a macro from the Automation menu) the registered script function\nis run. One of the parameters passed to the function is a \u003cem\u003esubtitles\nobject\u003c/em\u003e, the primary interface to the subtitle data the script will\nmanipulate. To some extent, the subtitles object works as an\ninteger-indexed array, but it exposes some special interfaces to add,\nremove and modify subtitle lines. The subtitles object allows you to access\nevery line in the subtitle file, including headers, style definitions,\ndialogue lines and comment lines. This is described on the \u003cstrong\u003e\u003ca href="/docs/3.2/en/automation/lua/subtitle_file_interface/"\u003eSubtitle file interface\u003c/a\u003e\u003c/strong\u003e page.\u003c/p\u003e\n\u003cp\u003eAutomation 4 Lua also provides a number of helper functions in the core API\nfor getting information on e.g. the video frame timestamps and how large a\npiece of text will be when rendered with a given style.\u003c/p\u003e\n\u003cp\u003eMost things that can be implemented in clean Lua code, i.e. that don\u0026rsquo;t\ndepend directly on Aegisub internal data structures, have been implemented\noutside the core API as \u003ca href="/docs/3.2/en/automation/lua/modules/"\u003eLua modules\u003c/a\u003e. While it is possible to write\nAutomation 4 Lua scripts without using the provided standard include files\nyou will find that for anything but the simplest scripts you will need some\nof the functions provided by the includes.\u003c/p\u003e\n\u003ch2 id="the-automation-4-lua-core-api"\u003eThe Automation 4 Lua core API\u003c/h2\u003e\n\u003cp\u003eAutomation 4 Lua provides various APIs that can be grouped in these general\ncategories.\u003c/p\u003e\n\u003cdl\u003e\n\u003cdt\u003e\u003ca href="/docs/3.2/en/automation/lua/registration/"\u003eScript and feature registration\u003c/a\u003e\u003c/dt\u003e\n\u003cdd\u003eDeals with advertising what features a script provides and a few other\nscript meta data.\u003c/dd\u003e\n\u003cdt\u003e\u003ca href="/docs/3.2/en/automation/lua/subtitle_file_interface/"\u003eSubtitle file interface\u003c/a\u003e\u003c/dt\u003e\n\u003cdd\u003eDeals with use of the \u003cem\u003esubtitles\u003c/em\u003e object, the principal way of accessing\nand modifying the subtitle data.\u003c/dd\u003e\n\u003cdt\u003e\u003ca href="/docs/3.2/en/automation/lua/progress_reporting/"\u003eProgress reporting and debug output\u003c/a\u003e\u003c/dt\u003e\n\u003cdd\u003eproviding feedback to the user while a script is running, outputting\nhints and warnings to the user and printing debug information.\u003c/dd\u003e\n\u003cdt\u003e\u003ca href="/docs/3.2/en/automation/lua/dialogs/"\u003eDisplaying dialogue boxes and getting user input\u003c/a\u003e\u003c/dt\u003e\n\u003cdd\u003erequesting user input during macro execution by dialogue boxes and\nproviding a configuration interface for export filters.\u003c/dd\u003e\n\u003cdt\u003e\u003ca href="/docs/3.2/en/automation/lua/miscellaneous_apis/"\u003eMiscellaneous APIs\u003c/a\u003e\u003c/dt\u003e\n\u003cdd\u003efor e.g. getting the rendered size of text and getting video frame rate\ninformation.\u003c/dd\u003e\n\u003c/dl\u003e\n\u003cp\u003e{::template name=\u0026ldquo;automation_navbox\u0026rdquo; /}\u003c/p\u003e\n'},{id:43,href:"/docs/3.2/en/automation/lua/dialogs/",title:"",description:null,content:'\u003cp\u003eThese functions are used to display dialogs for the user to interact with.\u003c/p\u003e\n\u003ch2 id="display-dialog-functions"\u003eDisplay dialog functions\u003c/h2\u003e\n\u003ch3 id="aegisubdialogdisplay"\u003eaegisub.dialog.display\u003c/h3\u003e\n\u003cp\u003eSynopsis: \u003ccode\u003ebutton, result_table = aegisub.dialog.display(dialog, buttons, button_ids)\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003eThis function displays a configuration dialog to the user and waits for it to\nclose. It then returns whether the user accepted or cancelled the dialog, and\nwhat values were input.\u003c/p\u003e\n\u003cdl\u003e\n\u003cdt\u003e\u003cstrong\u003e\u003ccode\u003e@dialog\u003c/code\u003e\u003c/strong\u003e (\u003ccode\u003etable\u003c/code\u003e)\u003c/dt\u003e\n\u003cdd\u003eA \u003ca href="/docs/3.2/en/automation/lua/dialogs/#dialog-definition-table-format"\u003eDialog Definition table\u003c/a\u003e containing\nthe controls to be in the dialog.\u003c/dd\u003e\n\u003cdt\u003e\u003cstrong\u003e\u003ccode\u003e@buttons\u003c/code\u003e\u003c/strong\u003e (\u003ccode\u003etable\u003c/code\u003e)\u003c/dt\u003e\n\u003cdd\u003eOptional. This is an array of strings defining the buttons that appear in\nthe dialog. If this is left out, empty or is otherwise not a table, the\nstandard Ok and Cancel buttons appear.\nThe strings in this table are used as labels on the buttons, and for\nidentifying them in the return values of the function.\u003c/dd\u003e\n\u003cdt\u003e\u003cstrong\u003e\u003ccode\u003e@button_ids\u003c/code\u003e\u003c/strong\u003e (\u003ccode\u003etable\u003c/code\u003e)\u003c/dt\u003e\n\u003cdd\u003eOptional. A table which specifies which buttons in the dialog correspond to\nwhich \u003ca href="/docs/3.2/en/automation/lua/dialogs/#dialog-button-ids"\u003eplatform button IDs\u003c/a\u003e, making it possible to\nspecify which button will be triggered if the user hits Enter or ESC.\u003c/dd\u003e\n\u003cdt\u003e\u003cstrong\u003e\u003ccode\u003ebutton\u003c/code\u003e\u003c/strong\u003e (\u003ccode\u003eboolean\u003c/code\u003e or \u003ccode\u003estring\u003c/code\u003e)\u003c/dt\u003e\n\u003cdd\u003eIf no custom buttons were specified, this is a boolean telling whether\nOk (true) or Cancel (false) were clicked in the dialog. If custom buttons\nwere specified, this is the text on the button clicked by the user. Even if\ncustom buttons were specified, this can still be boolean false if the user\ncloses the dialog without pressing any button.\u003c/dd\u003e\n\u003cdt\u003e\u003cstrong\u003e\u003ccode\u003eresult_table\u003c/code\u003e\u003c/strong\u003e (\u003ccode\u003etable\u003c/code\u003e)\u003c/dt\u003e\n\u003cdd\u003eThe \u003ca href="/docs/3.2/en/automation/lua/dialogs/#dialog-result-table-format"\u003eDialog Result table\u003c/a\u003e corresponding to\nthe values the user input in the dialog.\u003c/dd\u003e\n\u003c/dl\u003e\n\u003cp\u003e{::template name=\u0026ldquo;examplebox\u0026rdquo;}\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-lua"\u003econfig = {\r\n    {class=\u0026quot;label\u0026quot;, text=\u0026quot;Times to frobulate\u0026quot;, x=0, y=0},\r\n    {class=\u0026quot;intedit\u0026quot;, name=\u0026quot;times\u0026quot;, value=20, x=0, y=1}\r\n}\r\nbtn, result = aegisub.dialog.display(config,\r\n        {\u0026quot;Frobulate\u0026quot;, \u0026quot;Nevermind\u0026quot;},\r\n        {\u0026quot;ok\u0026quot;=\u0026quot;Frobulate\u0026quot;, \u0026quot;cancel\u0026quot;=\u0026quot;Nevermind\u0026quot;})\r\nif btn then\r\n    frobulate(result.times)\r\nend\r\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e{:/}\u003c/p\u003e\n\u003ch3 id="aegisubdialogopen"\u003eaegisub.dialog.open\u003c/h3\u003e\n\u003cp\u003eSynopsis: \u003ccode\u003efile_name = aegisub.dialog.open(title, default_file, default_dir, wildcards, allow_multiple=false, must_exist=true)\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003eOpen a standard file open dialog to ask the user for a filename. Returns\nthe path to the selected file(s), or nil if the user canceled.\u003c/p\u003e\n\u003cdl\u003e\n\u003cdt\u003e\u003cstrong\u003e\u003ccode\u003e@title\u003c/code\u003e\u003c/strong\u003e (\u003ccode\u003estring\u003c/code\u003e)\u003c/dt\u003e\n\u003cdd\u003eTitle of the dialog\u003c/dd\u003e\n\u003cdt\u003e\u003cstrong\u003e\u003ccode\u003e@default_file\u003c/code\u003e\u003c/strong\u003e (\u003ccode\u003estring\u003c/code\u003e)\u003c/dt\u003e\n\u003cdd\u003eDefault filename to preselect. May be empty.\u003c/dd\u003e\n\u003cdt\u003e\u003cstrong\u003e\u003ccode\u003e@default_dir\u003c/code\u003e\u003c/strong\u003e (\u003ccode\u003estring\u003c/code\u003e)\u003c/dt\u003e\n\u003cdd\u003eInitial directory to show in the open dialog. If empty, the\nlast used directory is shown.\u003c/dd\u003e\n\u003cdt\u003e\u003cstrong\u003e\u003ccode\u003e@wildcards\u003c/code\u003e\u003c/strong\u003e (\u003ccode\u003estring\u003c/code\u003e)\u003c/dt\u003e\n\u003cdd\u003eFile filters to show. If empty, a sane default will be used.\nE.g. \u0026ldquo;All Files (\u003cem\u003e.\u003c/em\u003e)|\u003cem\u003e.\u003c/em\u003e|XYZ files (\u003cem\u003e.xyz)|\u003c/em\u003e.xyz\u0026rdquo;\u003c/dd\u003e\n\u003cdt\u003e\u003cstrong\u003e\u003ccode\u003e@allow_multiple\u003c/code\u003e\u003c/strong\u003e (\u003ccode\u003eboolean\u003c/code\u003e)\u003c/dt\u003e\n\u003cdd\u003eLet the user select multiple files. If this is true, a table of\nfilenames will be returned rather than a single string, even\nif only one file is selected by the user.\u003c/dd\u003e\n\u003cdt\u003e\u003cstrong\u003e\u003ccode\u003e@must_exist\u003c/code\u003e\u003c/strong\u003e (\u003ccode\u003eboolean\u003c/code\u003e)\u003c/dt\u003e\n\u003cdd\u003eOnly let the user select files that actually exist.\u003c/dd\u003e\n\u003cdt\u003e\u003cstrong\u003e\u003ccode\u003efile_name\u003c/code\u003e\u003c/strong\u003e (\u003ccode\u003enil\u003c/code\u003e, \u003ccode\u003estring\u003c/code\u003e, or \u003ccode\u003etable\u003c/code\u003e)\u003c/dt\u003e\n\u003cdd\u003e\u003ccode\u003enil\u003c/code\u003e if the user cancelled. A \u003ccode\u003estring\u003c/code\u003e containing the path to the\nselected file if \u003ccode\u003eallow_multiple\u003c/code\u003e is false, or a table containing the\npaths to all selected files if \u003ccode\u003eallow_multiple\u003c/code\u003e is true.\u003c/dd\u003e\n\u003c/dl\u003e\n\u003cp\u003e{::template name=\u0026ldquo;examplebox\u0026rdquo;}\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-lua"\u003efilename = aegisub.dialog.open(\'Select file to read\', \'\', \'\',\r\n                               \'Text files (.txt)|*.txt\', false, true)\r\nif not filename then aegisub.cancel() end\r\n\r\nfile = io.open(filename, \'rb\')\r\n....\r\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e{:/}\u003c/p\u003e\n\u003ch3 id="aegisubdialogsave"\u003eaegisub.dialog.save\u003c/h3\u003e\n\u003cp\u003eSynopsis: \u003ccode\u003efile_name = aegisub.dialog.save(title, default_file, default_dir, wildcards, dont_prompt_for_overwrite=false)\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003eOpen a standard file save dialog to ask the user for a filename.  Returns\nthe path to the selected file, or nil if the user canceled.\u003c/p\u003e\n\u003cdl\u003e\n\u003cdt\u003e\u003cstrong\u003e\u003ccode\u003e@title\u003c/code\u003e\u003c/strong\u003e (\u003ccode\u003estring\u003c/code\u003e)\u003c/dt\u003e\n\u003cdd\u003eTitle of the dialog\u003c/dd\u003e\n\u003cdt\u003e\u003cstrong\u003e\u003ccode\u003e@default_file\u003c/code\u003e\u003c/strong\u003e (\u003ccode\u003estring\u003c/code\u003e)\u003c/dt\u003e\n\u003cdd\u003eDefault filename to preselect. May be empty.\u003c/dd\u003e\n\u003cdt\u003e\u003cstrong\u003e\u003ccode\u003e@default_dir\u003c/code\u003e\u003c/strong\u003e (\u003ccode\u003estring\u003c/code\u003e)\u003c/dt\u003e\n\u003cdd\u003eInitial directory to show in the open dialog. If empty, the\nlast used directory is shown.\u003c/dd\u003e\n\u003cdt\u003e\u003cstrong\u003e\u003ccode\u003e@wildcards\u003c/code\u003e\u003c/strong\u003e (\u003ccode\u003estring\u003c/code\u003e)\u003c/dt\u003e\n\u003cdd\u003eFile filters to show. If empty, a sane default will be used.\nE.g. \u0026ldquo;All Files (\u003cem\u003e.\u003c/em\u003e)|\u003cem\u003e.\u003c/em\u003e|XYZ files (\u003cem\u003e.xyz)|\u003c/em\u003e.xyz\u0026rdquo;\u003c/dd\u003e\n\u003cdt\u003e\u003cstrong\u003e\u003ccode\u003e@dont_prompt_for_overwrite\u003c/code\u003e\u003c/strong\u003e (\u003ccode\u003eboolean\u003c/code\u003e)\u003c/dt\u003e\n\u003cdd\u003eDon\u0026rsquo;t ask the user to confirm that they wish to overwrite the file if\nthey select a filename that already exists.\u003c/dd\u003e\n\u003cdt\u003e\u003cstrong\u003e\u003ccode\u003efile_name\u003c/code\u003e\u003c/strong\u003e (\u003ccode\u003enil\u003c/code\u003eor  \u003ccode\u003estring\u003c/code\u003e)\u003c/dt\u003e\n\u003cdd\u003e\u003ccode\u003enil\u003c/code\u003e if the user cancelled, and a \u003ccode\u003estring\u003c/code\u003e containing the path to the\nselected file otherwise.\u003c/dd\u003e\n\u003c/dl\u003e\n\u003ch2 id="configuration-dialog-interface"\u003eConfiguration Dialog interface\u003c/h2\u003e\n\u003cp\u003eThis section describes the tables passed to and received from\n\u003ccode\u003eaegisub.dialog.display\u003c/code\u003e and the \u003ca href="/docs/3.2/en/automation/lua/registration/#exportfilterconfigurationpanelprovider"\u003eexport filter configuration panel\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eThis file describes the functions and data structures used for the\nConfiguration Dialog functionality in Automation 4.\u003c/p\u003e\n\u003ch3 id="dialog-control-table-format"\u003eDialog Control table format\u003c/h3\u003e\n\u003cp\u003eA Dialog Control table describes a single control in a configuration dialog,\nwhich can display information to the user and allow them to change it.\u003c/p\u003e\n\u003cp\u003eThere are a number of different classes of controls, and the keys a Dialog\nControl table must contain depends on the control class.\u003c/p\u003e\n\u003cp\u003eCommon keys for all control classes:\u003c/p\u003e\n\u003cdl\u003e\n\u003cdt\u003e\u003cstrong\u003e\u003ccode\u003eclass\u003c/code\u003e\u003c/strong\u003e (\u003ccode\u003estring\u003c/code\u003e)\u003c/dt\u003e\n\u003cdd\u003eDefines which class this control has. Must be one of:\n\u003cul\u003e\n\u003cli\u003e\u0026ldquo;label\u0026rdquo;,\u003c/li\u003e\n\u003cli\u003e\u0026ldquo;edit\u0026rdquo;, \u0026ldquo;intedit\u0026rdquo;, \u0026ldquo;floatedit\u0026rdquo;, \u0026ldquo;textbox\u0026rdquo;,\u003c/li\u003e\n\u003cli\u003e\u0026ldquo;dropdown\u0026rdquo;,\u003c/li\u003e\n\u003cli\u003e\u0026ldquo;checkbox\u0026rdquo;,\u003c/li\u003e\n\u003cli\u003e\u0026ldquo;color\u0026rdquo;, \u0026ldquo;coloralpha\u0026rdquo;, \u0026ldquo;alpha\u0026rdquo;\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/dd\u003e\n\u003cdt\u003e\u003cstrong\u003e\u003ccode\u003ex\u003c/code\u003e\u003c/strong\u003e (\u003ccode\u003enumber\u003c/code\u003e)\u003c/dt\u003e\n\u003cdt\u003e\u003cstrong\u003e\u003ccode\u003ey\u003c/code\u003e\u003c/strong\u003e (\u003ccode\u003enumber\u003c/code\u003e)\u003c/dt\u003e\n\u003cdt\u003e\u003cstrong\u003e\u003ccode\u003ewidth\u003c/code\u003e\u003c/strong\u003e (\u003ccode\u003enumber\u003c/code\u003e)\u003c/dt\u003e\n\u003cdt\u003e\u003cstrong\u003e\u003ccode\u003eheight\u003c/code\u003e\u003c/strong\u003e (\u003ccode\u003enumber\u003c/code\u003e)\u003c/dt\u003e\n\u003cdd\u003eDetermines the position and size of the control in the dialog. These values\nare used to create a grid containing the controls. They should all be\ninteger. The top left corner is \u003ccode\u003ex\u003c/code\u003e,\u003ccode\u003ey\u003c/code\u003e=0,0.\nIf any of width and height are set to zero or less, it will be set to one\ninstead.\u003c/dd\u003e\n\u003c/dl\u003e\n\u003cp\u003eKeys defined for all classes except \u0026ldquo;label\u0026rdquo;:\u003c/p\u003e\n\u003cdl\u003e\n\u003cdt\u003e\u003cstrong\u003e\u003ccode\u003ehint\u003c/code\u003e\u003c/strong\u003e (\u003ccode\u003estring\u003c/code\u003e)\u003c/dt\u003e\n\u003cdd\u003eA string displayed to the user as tooltip, when hovering over the control.\u003c/dd\u003e\n\u003cdt\u003e\u003cstrong\u003e\u003ccode\u003ename\u003c/code\u003e\u003c/strong\u003e (\u003ccode\u003estring\u003c/code\u003e)\u003c/dt\u003e\n\u003cdd\u003eA name that uniquely identifies the control. This is recommended to be a\nstring easily used as an identifier in Lua, since it will be used to access\nthe value input into the control.\u003c/dd\u003e\n\u003c/dl\u003e\n\u003cp\u003eKeys defined only for \u0026ldquo;label\u0026rdquo; and \u0026ldquo;checkbox\u0026rdquo; classes:\u003c/p\u003e\n\u003cdl\u003e\n\u003cdt\u003e\u003cstrong\u003e\u003ccode\u003elabel\u003c/code\u003e\u003c/strong\u003e (\u003ccode\u003estring\u003c/code\u003e)\u003c/dt\u003e\n\u003cdd\u003eThe text displayed to the user on the control.\u003c/dd\u003e\n\u003c/dl\u003e\n\u003cp\u003eKey defined only for the \u0026ldquo;edit\u0026rdquo; and \u0026ldquo;textbox\u0026rdquo; classes:\u003c/p\u003e\n\u003cdl\u003e\n\u003cdt\u003e\u003cstrong\u003e\u003ccode\u003etext\u003c/code\u003e\u003c/strong\u003e (\u003ccode\u003estring\u003c/code\u003e)\u003c/dt\u003e\n\u003cdd\u003eThe contents of the control when the dialog is first displayed.\nThis can contain newlines if the control is of the \u0026ldquo;textbox\u0026rdquo; class.\u003c/dd\u003e\n\u003c/dl\u003e\n\u003cp\u003eKeys defined only for the \u0026ldquo;intedit\u0026rdquo; and \u0026ldquo;floatedit\u0026rdquo; classes:\u003c/p\u003e\n\u003cdl\u003e\n\u003cdt\u003e\u003cstrong\u003e\u003ccode\u003evalue\u003c/code\u003e\u003c/strong\u003e (\u003ccode\u003enumber\u003c/code\u003e)\u003c/dt\u003e\n\u003cdd\u003eThe value in the control when the dialog is first displayed. For the\n\u0026ldquo;intedit\u0026rdquo; class, if this is a non-integer number it will be truncated.\u003c/dd\u003e\n\u003cdt\u003e\u003cstrong\u003e\u003ccode\u003emin\u003c/code\u003e\u003c/strong\u003e (\u003ccode\u003enumber or nil\u003c/code\u003e)\u003c/dt\u003e\n\u003cdt\u003e\u003cstrong\u003e\u003ccode\u003emax\u003c/code\u003e\u003c/strong\u003e (\u003ccode\u003enumber or nil\u003c/code\u003e)\u003c/dt\u003e\n\u003cdd\u003eIf one of these are nil, the other must also be nil. (i.e. undefined.) If\nboth are present, the control gets a spin button that the user can click\nto update the value of the control. The user won\u0026rsquo;t be able to enter\nvalues outside the (inclusive) range between \u003ccode\u003emin\u003c/code\u003e and \u003ccode\u003emax\u003c/code\u003e.\u003c/dd\u003e\n\u003c/dl\u003e\n\u003cp\u003eKey defined only for the \u0026ldquo;floatedit\u0026rdquo; class:\u003c/p\u003e\n\u003cdl\u003e\n\u003cdt\u003e\u003cstrong\u003e\u003ccode\u003estep\u003c/code\u003e\u003c/strong\u003e (\u003ccode\u003enumber or nil\u003c/code\u003e)\u003c/dt\u003e\n\u003cdd\u003eSpecifies the size of change when the spin buttons are clicked. If nil,\nspin buttons will not be displayed even if \u003ccode\u003emin\u003c/code\u003e and \u003ccode\u003emax\u003c/code\u003e are set (but\nthe values accepted will still be limited). Note that this does not\nrequire that \u003ccode\u003emin\u003c/code\u003e and \u003ccode\u003emax\u003c/code\u003e be set.\u003c/dd\u003e\n\u003c/dl\u003e\n\u003cp\u003eKeys defined only for the \u0026ldquo;dropdown\u0026rdquo; class:\u003c/p\u003e\n\u003cdl\u003e\n\u003cdt\u003e\u003cstrong\u003e\u003ccode\u003eitems\u003c/code\u003e\u003c/strong\u003e (\u003ccode\u003etable\u003c/code\u003e)\u003c/dt\u003e\n\u003cdd\u003eThis is an Array Table containing only strings. They are used for the\noptions displayed to the user in the dropdown box.\nAll strings in the array table should be unique. (There is not way to\ndistinguish non-unique strings from each other.)\u003c/dd\u003e\n\u003cdt\u003e\u003cstrong\u003e\u003ccode\u003evalue\u003c/code\u003e\u003c/strong\u003e (\u003ccode\u003estring\u003c/code\u003e)\u003c/dt\u003e\n\u003cdd\u003eDetermines which item is selected when the dialog is first displayed. If\nthis is not one of the items specified, no item is selected. This is case-\nsensitive.\u003c/dd\u003e\n\u003c/dl\u003e\n\u003cp\u003eKey defined only for the \u0026ldquo;checkbox\u0026rdquo; class:\u003c/p\u003e\n\u003cdl\u003e\n\u003cdt\u003e\u003cstrong\u003e\u003ccode\u003evalue\u003c/code\u003e\u003c/strong\u003e (\u003ccode\u003eboolean\u003c/code\u003e)\u003c/dt\u003e\n\u003cdd\u003eDetermines whether the checkbox is checked or not when the dialog is first\ndisplayed.\u003c/dd\u003e\n\u003c/dl\u003e\n\u003cp\u003eKeys defined only for the \u0026ldquo;color\u0026rdquo;, \u0026ldquo;coloralpha\u0026rdquo; and \u0026ldquo;alpha\u0026rdquo; classes:\u003c/p\u003e\n\u003cdl\u003e\n\u003cdt\u003e\u003cstrong\u003e\u003ccode\u003evalue\u003c/code\u003e\u003c/strong\u003e (\u003ccode\u003estring\u003c/code\u003e)\u003c/dt\u003e\n\u003cdd\u003eA color value in VB or HTML hexadecimal format.\nFor the \u0026ldquo;color\u0026rdquo; class, this should be a 3 byte value, i.e. \u0026ldquo;#RRGGBB\u0026rdquo;.\nFor the \u0026ldquo;coloralpha\u0026rdquo; class, this should be a 4 byte value, i.e. \u0026ldquo;#RRGGBBAA\u0026rdquo;.\nFor the \u0026ldquo;alpha\u0026rdquo; class, this should be a one-byte value, i.e. \u0026ldquo;#AA\u0026rdquo;.\u003c/dd\u003e\n\u003c/dl\u003e\n\u003ch3 id="dialog-definition-table-format"\u003eDialog Definition table format\u003c/h3\u003e\n\u003cp\u003eThe Dialog Definition table is simply an array of Dialog Control tables.\u003c/p\u003e\n\u003cp\u003eNote, however, that while the visual ordering of the controls are decided\nentirely by the \u0026ldquo;x\u0026rdquo;, \u0026ldquo;y\u0026rdquo;, \u0026ldquo;width\u0026rdquo; and \u0026ldquo;height\u0026rdquo; of the controls, the\n\u0026ldquo;tab order\u0026rdquo; of the controls is decided by their ordering in the Dialog\nDefinition table. Your users will thank you if you make these match up.\u003c/p\u003e\n\u003ch3 id="dialog-result-table-format"\u003eDialog Result table format\u003c/h3\u003e\n\u003cp\u003eA Dialog Result table contains the user input from a configuration dialog.\u003c/p\u003e\n\u003cp\u003eThe control \u0026ldquo;\u003ccode\u003ename\u003c/code\u003e\u0026rdquo; properties are used as keys in this table.\u003c/p\u003e\n\u003cp\u003eThe type of the value for each entry in the table depends on the class of the\ncontrol. The control classes map to types in the following manner:\u003c/p\u003e\n\u003cdl\u003e\n\u003cdt\u003e\u003cstrong\u003e\u003ccode\u003elabel\u003c/code\u003e\u003c/strong\u003e: \u003ccode\u003enil\u003c/code\u003e\u003c/dt\u003e\n\u003cdd\u003eSince the user cannot change a label, they do not produce any value.\u003c/dd\u003e\n\u003cdt\u003e\u003cstrong\u003e\u003ccode\u003eedit\u003c/code\u003e\u003c/strong\u003e, \u003cstrong\u003e\u003ccode\u003etextbox\u003c/code\u003e\u003c/strong\u003e: \u003ccode\u003estring\u003c/code\u003e\u003c/dt\u003e\n\u003cdd\u003eThe text input in the box. This can contain newlines in the case of a\n\u003cstrong\u003e\u003ccode\u003etextbox\u003c/code\u003e\u003c/strong\u003e class control.\u003c/dd\u003e\n\u003cdt\u003e\u003cstrong\u003e\u003ccode\u003eintedit\u003c/code\u003e\u003c/strong\u003e, \u003cstrong\u003e\u003ccode\u003efloatedit\u003c/code\u003e\u003c/strong\u003e: \u003ccode\u003enumber\u003c/code\u003e\u003c/dt\u003e\n\u003cdd\u003eThe number input into the control, guaranteed to be within the\nconstraints set by the class (integer or float) and the min/max properties.\u003c/dd\u003e\n\u003cdt\u003e\u003cstrong\u003e\u003ccode\u003edropdown\u003c/code\u003e\u003c/strong\u003e: \u003ccode\u003estring\u003c/code\u003e\u003c/dt\u003e\n\u003cdd\u003eThe case-exact text of the selected item.\u003c/dd\u003e\n\u003cdt\u003e\u003cstrong\u003e\u003ccode\u003echeckbox\u003c/code\u003e\u003c/strong\u003e: \u003ccode\u003eboolean\u003c/code\u003e\u003c/dt\u003e\n\u003cdd\u003eThe checked-state of the checkbox.\u003c/dd\u003e\n\u003cdt\u003e\u003cstrong\u003e\u003ccode\u003ecolor\u003c/code\u003e\u003c/strong\u003e, \u003cstrong\u003e\u003ccode\u003ecoloralpha\u003c/code\u003e\u003c/strong\u003e, \u003cstrong\u003e\u003ccode\u003ealpha\u003c/code\u003e\u003c/strong\u003e: \u003ccode\u003estring\u003c/code\u003e\u003c/dt\u003e\n\u003cdd\u003eA VB colorstring following the same scheme as for setting the\n\u003cstrong\u003e\u003ccode\u003evalue\u003c/code\u003e\u003c/strong\u003e property.\u003c/dd\u003e\n\u003c/dl\u003e\n\u003cp\u003eDialog result tables are purely output from the dialog. Changing them and then\nredisplaying the dialog will not have any effect.\u003c/p\u003e\n\u003ch3 id="dialog-button-ids"\u003eDialog button IDs\u003c/h3\u003e\n\u003cp\u003eLegal values for button IDs are:\nok\nyes\nsave\napply\nclose\nno\ncancel\nhelp\ncontext_help\u003c/p\u003e\n\u003cp\u003eNote that many combinations of button IDs do not make sense and may have\nstrange effects. For example, having both \u003ccode\u003ecancel\u003c/code\u003e and \u003ccode\u003eclose\u003c/code\u003e buttons is a bad\nidea.\u003c/p\u003e\n\u003cp\u003eButtons with an ID of \u003ccode\u003ecancel\u003c/code\u003e return false, as if ESC was pressed. A\nbutton with an ID of \u003ccode\u003eclose\u003c/code\u003e results in that button being triggered on\nESC rather than cancel.\u003c/p\u003e\n\u003cp\u003eButtons with an ID of \u003ccode\u003eok\u003c/code\u003e, \u003ccode\u003eyes\u003c/code\u003e and \u003ccode\u003esave\u003c/code\u003e are set as the default\naffirmative button for the dialog.\u003c/p\u003e\n\u003cp\u003eButtons with the ID \u003ccode\u003ehelp\u003c/code\u003e will be displayed as a question mark in a circle on\nthe left side of the dialog on OS X.\u003c/p\u003e\n\u003cp\u003e{::template name=\u0026ldquo;automation_navbox\u0026rdquo; /}\u003c/p\u003e\n'},{id:44,href:"/docs/3.2/en/automation/lua/miscellaneous_apis/",title:"",description:null,content:'\u003cp\u003eThis page documents \u003cstrong\u003emiscellaneous APIs useful for working with\nsubtitles\u003c/strong\u003e. These can\u0026rsquo;t be clearly placed into any of the other main\ncategories and there\u0026rsquo;s too few of each kind to warrant a separate category.\u003c/p\u003e\n\u003ch2 id="aegisubcancel"\u003eaegisub.cancel\u003c/h2\u003e\n\u003cp\u003eSynopsis: \u003ccode\u003eaegisub.cancel()\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003eImmediately end execution of the current script, rolling back any changes\nthat have been made in it.\u003c/p\u003e\n\u003cp\u003eThis function never returns.\u003c/p\u003e\n\u003ch2 id="aegisubtext_extents"\u003eaegisub.text_extents\u003c/h2\u003e\n\u003cp\u003eSynopsis: \u003ccode\u003ewidth, height, descent, ext_lead = aegisub.text_extents(style, text)\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003eObtain system font metrics and determine the rendered size in pixels of the\ngiven \u003cstrong\u003etext\u003c/strong\u003e when using the \u003cstrong\u003estyle\u003c/strong\u003e.\u003c/p\u003e\n\u003cdl\u003e\n\u003cdt\u003e\u003cstrong\u003e\u003ccode\u003e@style\u003c/code\u003e\u003c/strong\u003e (\u003ccode\u003etable\u003c/code\u003e)\u003c/dt\u003e\n\u003cdd\u003eA \u003ca href="/docs/3.2/en/automation/lua/subtitle_file_interface/#styletable"\u003estyle table\u003c/a\u003e as defined by\nthe subtitle interface. The font name, size, weight, style, spacing and\nencoding is used to determine the size of the text.\u003c/dd\u003e\n\u003cdt\u003e\u003cstrong\u003e\u003ccode\u003e@text\u003c/code\u003e\u003c/strong\u003e (\u003ccode\u003estring\u003c/code\u003e)\u003c/dt\u003e\n\u003cdd\u003eThe text the extents should be determined for. This\nshould not contain line breaks (\u003ccode\u003e\\n\u003c/code\u003e or \u003ccode\u003e\\r\\n\u003c/code\u003e) nor should it contain\nformatting codes of any kind. Formatting codes are not interpreted and\nwill be taken as verbatim text.\u003c/dd\u003e\n\u003cdt\u003e\u003cstrong\u003e\u003ccode\u003ewidth\u003c/code\u003e\u003c/strong\u003e (\u003ccode\u003enumber\u003c/code\u003e)\u003c/dt\u003e\n\u003cdd\u003eWidth in pixels of text. This may be non-integer.\u003c/dd\u003e\n\u003cdt\u003e\u003cstrong\u003e\u003ccode\u003eheight\u003c/code\u003e\u003c/strong\u003e (\u003ccode\u003enumber\u003c/code\u003e)\u003c/dt\u003e\n\u003cdd\u003eHeight in pixels of the text. This may be non-integer.\u003c/dd\u003e\n\u003cdt\u003e\u003cstrong\u003e\u003ccode\u003edescent\u003c/code\u003e\u003c/strong\u003e (\u003ccode\u003enumber\u003c/code\u003e)\u003c/dt\u003e\n\u003cdd\u003eLength of descenders in the font. This may be\nnon-integer.\u003c/dd\u003e\n\u003cdt\u003e\u003cstrong\u003e\u003ccode\u003eext_lead\u003c/code\u003e\u003c/strong\u003e (\u003ccode\u003enumber\u003c/code\u003e)\u003c/dt\u003e\n\u003cdd\u003eExternal leading for the font. This may be non-integer.\u003c/dd\u003e\n\u003c/dl\u003e\n\u003cp\u003eYou should only feed plain text strings without line breaks into this\nfunction. It cannot handle any kind of formatting codes or text layout.\nRather, it is intended as a helper to create text layouts by determining\nrendered sizes of bits and pieces of a longer text, which can then be\nlaid out by the script.\u003c/p\u003e\n\u003ch2 id="aegisubgettext"\u003eaegisub.gettext\u003c/h2\u003e\n\u003cp\u003eSynopsis: \u003ccode\u003etranslation = aegisub.gettext(untranslated)\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003eGet the translation for a string. This is mostly only intended for scripts\nbundled with Aegisub (as there\u0026rsquo;s no way for you to add your own\ntranslations), but if you happen to be using strings that are present in\nAegisub it may be useful.\u003c/p\u003e\n\u003cp\u003eNote that in the bundled macros this is always aliased to \u003ccode\u003etr\u003c/code\u003e for the sake\nof the string extractor.\u003c/p\u003e\n\u003ch2 id="getting-information-on-the-video"\u003eGetting information on the video\u003c/h2\u003e\n\u003cp\u003eAutomation 4 Lua offers two functions designed to be able to work with\nframe-based timing without having to consider whether the video source is\nVFR or CFR.\u003c/p\u003e\n\u003cp\u003eThe primary purpose of these functions is to be able to generate per-frame\neffects, i.e. get the timestamps of a number of sequential frames and\ncalculate coordinates, sizes etc. for an object for each of those frames.\u003c/p\u003e\n\u003cp\u003eOne thing to remember when using these functions is that, considering a\none-dimensional time line, a time stamp is a point on the time line, while\na video frame spans a range of the time line, from its beginning time to\nits ending time. The ending time of a frame is the beginning time of the\nnext. The beginning time of a frame is included in the range while the\nending time is excluded from the range.\u003c/p\u003e\n\u003ch3 id="aegisubframe_from_ms"\u003eaegisub.frame_from_ms\u003c/h3\u003e\n\u003cp\u003eSynopsis: \u003ccode\u003eframe = aegisub.frame_from_ms(ms)\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003eUse loaded frame rate data to convert an absolute time given in\n\u003cstrong\u003emilliseconds\u003c/strong\u003e into a \u003cstrong\u003eframe\u003c/strong\u003e number.\u003c/p\u003e\n\u003cdl\u003e\n\u003cdt\u003e\u003cstrong\u003e\u003ccode\u003e@ms\u003c/code\u003e\u003c/strong\u003e (\u003ccode\u003enumber\u003c/code\u003e)\u003c/dt\u003e\n\u003cdd\u003eAbsolute time from the beginning of the video, for\nwhich to determine the frame number.\u003c/dd\u003e\n\u003cdt\u003e\u003cstrong\u003e\u003ccode\u003eframe\u003c/code\u003e\u003c/strong\u003e (\u003ccode\u003enumber\u003c/code\u003e)\u003c/dt\u003e\n\u003cdd\u003eFrame number corresponding to the time in ms, or \u003ccode\u003enil\u003c/code\u003e if there is no\nframe rate data loaded.\u003c/dd\u003e\n\u003c/dl\u003e\n\u003cp\u003eIf the time is in the middle of the frame it is \u003cstrong\u003erounded down\u003c/strong\u003e to the frame\nnumber that contains the given time.\u003c/p\u003e\n\u003ch3 id="aegisubms_from_frame"\u003eaegisub.ms_from_frame\u003c/h3\u003e\n\u003cp\u003eSynopsis: \u003ccode\u003ems = aegisub.ms_from_frame(frame)\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003eUse loaded frame rate data to convert a \u003cstrong\u003eframe\u003c/strong\u003e number of the video into\nan absolute time in \u003cstrong\u003emilliseconds\u003c/strong\u003e.\u003c/p\u003e\n\u003cdl\u003e\n\u003cdt\u003e\u003cstrong\u003e\u003ccode\u003e@frame\u003c/code\u003e\u003c/strong\u003e (\u003ccode\u003enumber\u003c/code\u003e)\u003c/dt\u003e\n\u003cdd\u003eFrame to obtain the beginning time of.\u003c/dd\u003e\n\u003cdt\u003e\u003cstrong\u003e\u003ccode\u003ems\u003c/code\u003e\u003c/strong\u003e (\u003ccode\u003enumber\u003c/code\u003e)\u003c/dt\u003e\n\u003cdd\u003eFirst integer millisecond time stamp to lie within the frame, or \u003ccode\u003enil\u003c/code\u003e if\nthere is no frame rate data loaded.\u003c/dd\u003e\n\u003c/dl\u003e\n\u003cp\u003eBecause beginning times of frames can have better precision than one\nmillisecond this function rounds up and returns the first whole millisecond\nthat is guaranteed to be within the frame.\u003c/p\u003e\n\u003ch3 id="aegisubvideo_size"\u003eaegisub.video_size\u003c/h3\u003e\n\u003cp\u003eSynopsis: \u003ccode\u003exres, yres, ar, artype = aegisub.video_size()\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003eGet information about the resolution and aspect-ratio of the loaded video,\nif any.\u003c/p\u003e\n\u003cdl\u003e\n\u003cdt\u003e\u003cstrong\u003e\u003ccode\u003exres\u003c/code\u003e\u003c/strong\u003e (\u003ccode\u003enumber\u003c/code\u003e)\u003c/dt\u003e\n\u003cdd\u003eCoded width of the video in pixels, or \u003ccode\u003enil\u003c/code\u003e if there is no video loaded.\u003c/dd\u003e\n\u003cdt\u003e\u003cstrong\u003e\u003ccode\u003eyres\u003c/code\u003e\u003c/strong\u003e (\u003ccode\u003enumber\u003c/code\u003e)\u003c/dt\u003e\n\u003cdd\u003eCoded height of the video in pixels, or \u003ccode\u003enil\u003c/code\u003e if there is no video loaded.\u003c/dd\u003e\n\u003cdt\u003e\u003cstrong\u003e\u003ccode\u003ear\u003c/code\u003e\u003c/strong\u003e (\u003ccode\u003enumber\u003c/code\u003e)\u003c/dt\u003e\n\u003cdd\u003eCustom display aspect ratio override. Meaningless unless \u003ccode\u003eartype\u003c/code\u003e is 4.\u003c/dd\u003e\n\u003cdt\u003e\u003cstrong\u003e\u003ccode\u003eartype\u003c/code\u003e\u003c/strong\u003e (\u003ccode\u003enumber\u003c/code\u003e)\u003c/dt\u003e\n\u003cdd\u003eThere are 5 values that \u003ccode\u003eartype\u003c/code\u003e can take:\n\u003cul\u003e\n\u003cli\u003e0: The video has square pixels, i.e. PAR is 1.00 and DAR is \u003ccode\u003exres\u003c/code\u003e/\u003ccode\u003eyres\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003e1: The video is 4:3, i.e. DAR is 1.33.\u003c/li\u003e\n\u003cli\u003e2: The video is 16:9, i.e. DAR is 1.78.\u003c/li\u003e\n\u003cli\u003e3: The video is 2.35 format, i.e. DAR is 2.35.\u003c/li\u003e\n\u003cli\u003e4: The DAR is whatever the \u003ccode\u003ear\u003c/code\u003e return value contains.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/dd\u003e\n\u003c/dl\u003e\n\u003ch3 id="aegisubkeyframes"\u003eaegisub.keyframes\u003c/h3\u003e\n\u003cp\u003eSynopsis \u003ccode\u003ekeyframes = aegisub.keyframes()\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003eGet a list of what video frames are keyframes.\u003c/p\u003e\n\u003cdl\u003e\n\u003cdt\u003e\u003cstrong\u003e\u003ccode\u003ekeyframes\u003c/code\u003e\u003c/strong\u003e (\u003ccode\u003etable\u003c/code\u003e)\u003c/dt\u003e\n\u003cdd\u003eA sorted table where each entry is the frame number of a keyframe. If\nno keyframe data is loaded, the table will be empty.\u003c/dd\u003e\n\u003c/dl\u003e\n\u003ch2 id="aegisubdecode_path"\u003eaegisub.decode_path\u003c/h2\u003e\n\u003cp\u003eSynopsis \u003ccode\u003epath = aegisub.decode_path(encoded_path)\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003eConvert a path beginning with a \u003ca href="/docs/3.2/en/aegisub_path_specifiers/"\u003epath specifier\u003c/a\u003e\nto an absolute path.\u003c/p\u003e\n\u003cdl\u003e\n\u003cdt\u003e\u003cstrong\u003e\u003ccode\u003e@encoded_path\u003c/code\u003e\u003c/strong\u003e (\u003ccode\u003estring\u003c/code\u003e)\u003c/dt\u003e\n\u003cdd\u003eA string which may optionally begin with an Aegisub \u003ca href="/docs/3.2/en/aegisub_path_specifiers/"\u003epath specifier\u003c/a\u003e.\u003c/dd\u003e\n\u003cdt\u003e\u003cstrong\u003e\u003ccode\u003e@path\u003c/code\u003e\u003c/strong\u003e (\u003ccode\u003estring\u003c/code\u003e)\u003c/dt\u003e\n\u003cdd\u003eIf \u003ccode\u003eencoded_path\u003c/code\u003e began with a valid \u003ca href="/docs/3.2/en/aegisub_path_specifiers/"\u003epath specifier\u003c/a\u003e, an absolute path. If it began with an\ninvalid path specifier (such as if ?video was used when no video is open),\na string that is unlikely to be useful in any way. Any other strings are\npassed through untouched.\u003c/dd\u003e\n\u003c/dl\u003e\n\u003ch2 id="aegisubproject_properties"\u003eaegisub.project_properties\u003c/h2\u003e\n\u003cp\u003eSynopsis \u003ccode\u003eproperties = aegisub.project_properties()\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003eGet a table containing information about what files the user currently has open.\nThe exact contents of this table are deliberately undocumented, and may change without warning.\u003c/p\u003e\n\u003cp\u003e{::template name=\u0026ldquo;automation_navbox\u0026rdquo; /}\u003c/p\u003e\n'},{id:45,href:"/docs/3.2/en/automation/lua/modules/",title:"",description:null,content:'\u003cp\u003eA number of Lua modules are included with Aegisub.\nSome of these, such as \u003ca href="/docs/3.2/en/automation/lua/modules/karaskel.lua/"\u003e\u003ccode\u003ekaraskel.lua\u003c/code\u003e\u003c/a\u003e implement subtitle-specific functionality, while others such as \u003ca href="/docs/3.2/en/automation/lua/modules/re/"\u003ere\u003c/a\u003e fill holes in the Lua standard library.\u003c/p\u003e\n\u003ch2 id="using-modules"\u003eUsing modules\u003c/h2\u003e\n\u003cp\u003eSimply write \u003ccode\u003emodulename = require \'aegisub.modulename\'\u003c/code\u003e at the top level of a script.\nFor example, to include the \u003ca href="/docs/3.2/en/automation/lua/modules/re/"\u003ere\u003c/a\u003e modules, \u003ccode\u003ere = require \'aegisub.re\'\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eNote that if you look at older scripts you will probably see several other methods for including modules, such as \u003ccode\u003einclude\u003c/code\u003e.\nThese have been deprecated in favor of following the modern lua module style introduced with Lua 5.2.\u003c/p\u003e\n\u003cp\u003eTo use modules in \u003ca href="/docs/3.2/en/automation/karaoke_templater/"\u003eKaraoke Templater\u003c/a\u003e, place the require statement in a \u003ca href="/docs/3.2/en/automation/karaoke_templater/code_lines_and_blocks/#classesofcodelines"\u003ecode once\u003c/a\u003e line.\nNote that \u003ccode\u003ekaraskel.lua\u003c/code\u003e, \u003ccode\u003eutils.lua\u003c/code\u003e and \u003ccode\u003eunicode.lua\u003c/code\u003e do not have to be \u003ccode\u003erequire\u003c/code\u003ed in \u003ca href="/docs/3.2/en/automation/karaoke_templater/"\u003eKaraoke Templater\u003c/a\u003e, as they are automatically imported.\u003c/p\u003e\n\u003ch2 id="modules-reference"\u003eModules reference\u003c/h2\u003e\n\u003cdl\u003e\n\u003cdt\u003e\u003ca href="/docs/3.2/en/automation/lua/modules/util/"\u003eutil\u003c/a\u003e\u003c/dt\u003e\n\u003cdd\u003eAn assorted collection of various utility functions which don\u0026rsquo;t fit into any coherent categories, especially for handling colours.\u003c/dd\u003e\n\u003cdt\u003e\u003ca href="/docs/3.2/en/automation/lua/modules/karaskel.lua/"\u003e\u003ccode\u003ekaraskel.lua\u003c/code\u003e\u003c/a\u003e\u003c/dt\u003e\n\u003cdd\u003eThe karaoke skeleton is a collection of functions mainly intended to do\ntext layout of timed karaoke for creating advanced karaoke effects, as well\nas a number of other helper functions.\u003c/dd\u003e\n\u003cdt\u003e\u003ca href="/docs/3.2/en/automation/lua/modules/unicode/"\u003eunicode\u003c/a\u003e\u003c/dt\u003e\n\u003cdd\u003eAll data passed in and out of Aegisub through the Automation 4 Lua interface are encoded in UTF-8, but Lua doesn\u0026rsquo;t natively provide support for this.\nSeveral helper functions are provided here.\u003c/dd\u003e\n\u003cdt\u003e\u003ca href="#"\u003e\u003ccode\u003ecleantags.lua\u003c/code\u003e\u003c/a\u003e\u003c/dt\u003e\n\u003cdd\u003eA function to clean up ASS tags in a line.\u003c/dd\u003e\n\u003cdt\u003e\u003ca href="/docs/3.2/en/automation/lua/modules/clipboard/"\u003eclipboard\u003c/a\u003e\u003c/dt\u003e\n\u003cdd\u003eFunctions for copying and pasting text.\u003c/dd\u003e\n\u003cdt\u003e\u003ca href="/docs/3.2/en/automation/lua/modules/re/"\u003ere\u003c/a\u003e\u003c/dt\u003e\n\u003cdd\u003eBindings for ICU regular expressions via \u003ca href="http://www.boost.org/doc/libs/1_53_0/libs/regex/doc/html/index.html"\u003eboost.regex\u003c/a\u003e, which has full Unicode support and more features than Lua\u0026rsquo;s built in regular expression.\u003c/dd\u003e\n\u003cdt\u003e\u003ca href="http://www.inf.puc-rio.br/~roberto/lpeg/"\u003elpeg\u003c/a\u003e\u003c/dt\u003e\n\u003cdd\u003ePEG library for writing parsers.\u003c/dd\u003e\n\u003cdt\u003e\u003ca href="https://github.com/agladysh/luabins"\u003eluabins\u003c/a\u003e\u003c/dt\u003e\n\u003cdd\u003eA serialization library for saving tables to extradata or config files\u003c/dd\u003e\n\u003cdt\u003e\u003ca href="http://keplerproject.github.io/luafilesystem/"\u003elfs\u003c/a\u003e\u003c/dt\u003e\n\u003cdd\u003eSome assorted filesystem functionality not supported by the Lua standard library.\u003c/dd\u003e\n\u003c/dl\u003e\n\u003cp\u003e{::template name=\u0026ldquo;automation_navbox\u0026rdquo; /}\u003c/p\u003e\n'},{id:46,href:"/docs/3.2/en/automation/lua/modules/clipboard/",title:"",description:null,content:'\u003cp\u003eThe \u003ccode\u003eclipboard\u003c/code\u003e module supplies functions for reading from and writing to the clipboard.\u003c/p\u003e\n\u003ch2 id="usage"\u003eUsage\u003c/h2\u003e\n\u003cp\u003eImport this module with \u003ccode\u003eclipboard = require \'aegisub.clipboard\'\u003c/code\u003e{:.language-lua}.\u003c/p\u003e\n\u003ch3 id="clipboardget"\u003eclipboard.get()\u003c/h3\u003e\n\u003cp\u003eSynopsis: \u003ccode\u003etext = clipboard.get()\u003c/code\u003e{:.language-lua}\u003c/p\u003e\n\u003cp\u003eGet the current contents of the clipboard as a string.\nReturns \u003ccode\u003enil\u003c/code\u003e if the clipboard does not currently contain text or if an error occurs.\u003c/p\u003e\n\u003ch3 id="clipboardget-1"\u003eclipboard.get()\u003c/h3\u003e\n\u003cp\u003eSynopsis: \u003ccode\u003eclipboard.set(new_text)\u003c/code\u003e{:.language-lua}\u003c/p\u003e\n\u003cp\u003eSet the clipboard contents to a string.\nReturns true if the clipboard could be set, and false if an error occurred.\u003c/p\u003e\n\u003cp\u003e{::template name=\u0026ldquo;automation_navbox\u0026rdquo; /}\u003c/p\u003e\n'},{id:47,href:"/docs/3.2/en/automation/lua/modules/karaskel.lua/",title:"",description:null,content:'\u003cp\u003eThe Automation 4 \u003ccode\u003ekaraskel.lua\u003c/code\u003e include file contains several functions\nintended to help the development of karaoke effects with Automation 4 Lua.\nIt also defines several new data structures, and extensions to those\ndefined by Automation 4 Lua itself.\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003ekaraskel.lua\u003c/code\u003e itself includes\n\u003ca href="/docs/3.2/en/automation/lua/modules/util/"\u003e\u003ccode\u003eutils.lua\u003c/code\u003e\u003c/a\u003e and\n\u003ca href="/docs/3.2/en/automation/lua/modules/unicode/"\u003e\u003ccode\u003eunicode.lua\u003c/code\u003e\u003c/a\u003e so you do not need to\ninclude those yourself when using \u003ccode\u003ekaraskel.lua\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eUsing \u003ccode\u003ekaraskel.lua\u003c/code\u003e is strongly recommended when creating karaoke effects,\nand it can also be useful for other tasks as it contains several text\nlayouting functions.\u003c/p\u003e\n\u003ch2 id="functions"\u003eFunctions\u003c/h2\u003e\n\u003ch3 id="karaskelcollect_head"\u003ekaraskel.collect_head\u003c/h3\u003e\n\u003cp\u003eSynopsis: \u003ccode\u003emeta, styles = karaskel.collect_head(subtitles, generate_furigana)\u003c/code\u003e{:.language-lua}\u003c/p\u003e\n\u003cp\u003eReads the subtitle file to collect all header information and style\ndefinitions, and optionally also generates new styles for furigana layouts.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003esubtitles\u003c/code\u003e is the Subtitle File object defined by Automation 4 Lua.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003egenerate_furigana\u003c/code\u003e is a boolean: if it is true a style for \u003ca href="/docs/3.2/en/furigana_karaoke/"\u003efurigana layout\u003c/a\u003e is generated for each style that does not have\none already. Generation of furigana styles will never overwrite existing\nstyles, create double style definitions or create meaningless furigana\nstyles for other furigana styles.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eCalling \u003ccode\u003ecollect_head\u003c/code\u003e is usually one of the first things you do in your\nprocessing function.\u003c/p\u003e\n\u003cp\u003eThe returned \u003ccode\u003emeta\u003c/code\u003e table contains a map of all \u003ccode\u003eName: Value\u003c/code\u003e pairs in the\n\u003ccode\u003e[Script Info]\u003c/code\u003e section. It also always contains \u003ccode\u003emeta.res_x\u003c/code\u003e and\n\u003ccode\u003emeta.res_y\u003c/code\u003e calculated from the \u003ccode\u003ePlayResX\u003c/code\u003e and \u003ccode\u003ePlayResY\u003c/code\u003e fields,\nfollowing VSFilter conventions for default values when one or both of the\nfields are missing.\u003c/p\u003e\n\u003cp\u003eThe returned \u003ccode\u003estyles\u003c/code\u003e table contains a map of all defined styles, along\nwith any generated furigana layout styles. The style structures stored in\nthis table have one added field, \u003ccode\u003estyle.margin_v\u003c/code\u003e which is an alias for\n\u003ccode\u003estyle.margin_t\u003c/code\u003e, for convenience. \u003ccode\u003estyles\u003c/code\u003e can be indexed by style names\n(case sensitive, names not mangled) and by numbers. \u003ccode\u003estyles.n\u003c/code\u003e is the\nnumber of styles stored, and \u003ccode\u003estyles[1]\u003c/code\u003e is the first style defined.\u003c/p\u003e\n\u003ch3 id="karaskelpreproc_line"\u003ekaraskel.preproc_line\u003c/h3\u003e\n\u003cp\u003eSynopsis: \u003ccode\u003ekaraskel.preproc_line(subtitles, meta, styles, line)\u003c/code\u003e{:.language-lua}\u003c/p\u003e\n\u003cp\u003eCalculate sizing, positioning and various other information for a single\nsubtitle line. This function calls \u003ccode\u003ekaraskel.preproc_line_text\u003c/code\u003e,\n\u003ccode\u003ekaraskel.preproc_line_size\u003c/code\u003e and \u003ccode\u003ekaraskel.preproc_line_pos\u003c/code\u003e in order.\u003c/p\u003e\n\u003cp\u003eThis function does not return a value, but rather modifies the \u003ccode\u003eline\u003c/code\u003e\ntable. See below for more information.\u003c/p\u003e\n\u003ch3 id="karaskelpreproc_line_text"\u003ekaraskel.preproc_line_text\u003c/h3\u003e\n\u003cp\u003eSynopsis: \u003ccode\u003ekaraskel.preproc_line_text(meta, styles, line)\u003c/code\u003e{:.language-lua}\u003c/p\u003e\n\u003cp\u003ePreprocess the text of a single line. \u003ccode\u003emeta\u003c/code\u003e and \u003ccode\u003estyles\u003c/code\u003e are the tables\nreturned by \u003ccode\u003e[karaskel.collect_head](/docs/3.2/en/automation/lua/modules/karaskel.lua/#karaskel.collect_head)\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eThis function does not return a value, but rather modifies the \u003ccode\u003eline\u003c/code\u003e\ntable. The following fields are added:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eline.text_stripped\u003c/code\u003e - Line text with all override tags and vector\ndrawings removed.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eline.duration\u003c/code\u003e - Duration of the line in milliseconds\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eline.kara\u003c/code\u003e and \u003ccode\u003eline.furi\u003c/code\u003e - Extended \u003ca href="/docs/3.2/en/automation/lua/modules/karaskel.lua/#karaoke-and-furigana-syllable-tables"\u003ekaraoke and furigana tables\u003c/a\u003e, without sizing and\nposition data.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThis function does not calculate any text sizing or positioning\ninformation. (In fact it currently doesn\u0026rsquo;t use the \u003ccode\u003emeta\u003c/code\u003e or \u003ccode\u003estyles\u003c/code\u003e\narguments at all.)\u003c/p\u003e\n\u003ch3 id="karaskelpreproc_line_size"\u003ekaraskel.preproc_line_size\u003c/h3\u003e\n\u003cp\u003eSynopsis: \u003ccode\u003ekaraskel.preproc_line_size(meta, styles, line)\u003c/code\u003e{:.language-lua}\u003c/p\u003e\n\u003cp\u003eCalculate sizing data for a line and all karaoke syllables and furigana\nparts. Also adds a reference to the line style.\u003c/p\u003e\n\u003cp\u003eThis function does not return a value, but rather modifies the \u003ccode\u003eline\u003c/code\u003e\ntable. The following fields are added:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eline.styleref\u003c/code\u003e - A reference to the Style table representing this line\u0026rsquo;s\nselected style.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eline.furistyle\u003c/code\u003e - A reference to the Style table representing this\nline\u0026rsquo;s furigana layout style. If there is no style with the right name,\nthis field is \u003ccode\u003efalse\u003c/code\u003e instead.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eline.width\u003c/code\u003e, \u003ccode\u003eline.height\u003c/code\u003e, \u003ccode\u003eline.descent\u003c/code\u003e and \u003ccode\u003eline.extlead\u003c/code\u003e - Sizing\u003c/li\u003e\n\u003cli\u003einformation for the stripped line text, as returned by\u003c/li\u003e\n\u003cli\u003e\u003ca href="/docs/3.2/en/automation/lua/miscellaneous_apis/#aegisub.text_extents"\u003e\u003ccode\u003eaegisub.text_extents\u003c/code\u003e\u003c/a\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eAlso, this function modifies the \u003ccode\u003eline.kara\u003c/code\u003e and \u003ccode\u003eline.furi\u003c/code\u003e tables, adding\nsizing information.\u003c/p\u003e\n\u003cp\u003eNo position information is calculated here.\u003c/p\u003e\n\u003cp\u003eIf the \u003ccode\u003eline\u003c/code\u003e table does not seem to have been processed with\n\u003ccode\u003ekaraskel.preproc_line_text\u003c/code\u003e yet, this will be done automatically.\u003c/p\u003e\n\u003ch3 id="karaskelpreproc_line_pos"\u003ekaraskel.preproc_line_pos\u003c/h3\u003e\n\u003cp\u003eSynopsis: \u003ccode\u003ekaraskel.preproc_line_pos(meta, styles, line)\u003c/code\u003e{:.language-lua}\u003c/p\u003e\n\u003cp\u003eCalculate line, karaoke and furigana position information.\u003c/p\u003e\n\u003cp\u003eThis function invokes \u003ccode\u003ekaraskel.do_basic_layout\u003c/code\u003e when no furigana style is\navailable, and \u003ccode\u003ekaraskel.do_furigana_layout\u003c/code\u003e when a furigana style is\ndefined for the line. The furigana layout algorithm might change the\ncalculated width of the line.\u003c/p\u003e\n\u003cp\u003eThis function does not return a value, but rather modifies the \u003ccode\u003eline\u003c/code\u003e\ntable. The following fields are added:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eline.margin_v\u003c/code\u003e - A convenience alias for \u003ccode\u003eline.margin_t\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eline.eff_margin_l\u003c/code\u003e, \u003ccode\u003eline.eff_margin_r\u003c/code\u003e, \u003ccode\u003eline.eff_margin_t\u003c/code\u003e,\n\u003ccode\u003eline.eff_margin_b\u003c/code\u003e and \u003ccode\u003eline.eff_margin_v\u003c/code\u003e - Effective margin values for\nthe line. If the corresponding margin override for the line is non-zero,\nthat value is used, otherwise the value defined in the style is used.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eline.halign\u003c/code\u003e - One of \u003ccode\u003e\u0026quot;left\u0026quot;\u003c/code\u003e, \u003ccode\u003e\u0026quot;center\u0026quot;\u003c/code\u003e or \u003ccode\u003e\u0026quot;right\u0026quot;\u003c/code\u003e, the horizontal\nalignment of the line, derived from \u003ccode\u003eline.styleref.align\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eline.valign\u003c/code\u003e - One of \u003ccode\u003e\u0026quot;top\u0026quot;\u003c/code\u003e, \u003ccode\u003e\u0026quot;middle\u0026quot;\u003c/code\u003e or \u003ccode\u003e\u0026quot;bottom\u0026quot;\u003c/code\u003e, the vertical\nalignment of the line, derived from \u003ccode\u003eline.styleref.align\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eline.left\u003c/code\u003e - The left edge X coordinate for the line, assuming its given\nalignment, effective margins and no collision detection.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eline.center\u003c/code\u003e - The line centre X coordinate, assuming its given\nalignment, effective margins and no collision detection.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eline.right\u003c/code\u003e - The right edge X coordinate for the line, assuming its\ngiven alignment, effective margins and no collision detection.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eline.top\u003c/code\u003e - The top edge Y coordinate for the line, assuming its given\nalignment, effective margins and no collision detection.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eline.middle\u003c/code\u003e - The line vertical centre Y coordinate, assuming its given\nalignment, effective margins and no collision detection. \u003ccode\u003eline.vcenter\u003c/code\u003e is\nan alias for this.\n\u003ccode\u003eline.bottom\u003c/code\u003e - The bottom edge Y coordinate for the line, assuming its\ngiven alignment, effective margins and no collision detection.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eline.x\u003c/code\u003e and \u003ccode\u003eline.y\u003c/code\u003e - X and Y coordinates for the line, suitable for\nusing in a \u003ccode\u003e\\pos\u003c/code\u003e override tag to get the line\u0026rsquo;s original position.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eFurthermore, the \u003ccode\u003eline.kara\u003c/code\u003e and \u003ccode\u003eline.furi\u003c/code\u003e tables are modified by the\nlayout function called, adding positioning information.\u003c/p\u003e\n\u003cp\u003eSee the part on \u003ca href="/docs/3.2/en/automation/lua/modules/karaskel.lua/#datastructures"\u003edata structures\u003c/a\u003e later on\nthis page for more details on the various fields that are added.\u003c/p\u003e\n\u003cp\u003eIf no line sizing information is found, \u003ccode\u003ekaraskel.preproc_line_size\u003c/code\u003e will\nbe invoked, which might in turn also invoke \u003ccode\u003ekaraskel.preproc_line_text\u003c/code\u003e.\u003c/p\u003e\n\u003ch3 id="karaskeldo_basic_layout"\u003ekaraskel.do_basic_layout\u003c/h3\u003e\n\u003cp\u003eThis function is not intended to be called directly, but is rather called\nas a helper function for \u003ccode\u003ekaraskel.preproc_line_pos\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eIt runs a very simple layout algorithm for the \u003ccode\u003eline.kara\u003c/code\u003e table, which\nsimply calculates the positions of the syllables when placed in one\nstraight line with no additional spacing in between. Positioning\ninformation is added to each karaoke syllable.\u003c/p\u003e\n\u003cp\u003eThe \u003ccode\u003eline.furi\u003c/code\u003e table is not touched.\u003c/p\u003e\n\u003ch3 id="karaskeldo_furigana_layout"\u003ekaraskel.do_furigana_layout\u003c/h3\u003e\n\u003cp\u003eThis function is not intended to be called directly, but is rather called\nas a helper function for \u003ccode\u003ekaraskel.preproc_line_pos\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eIt runs an advanced text layout algorithm to position karaoke syllables and\nfurigana neatly, avoiding unwanted overlapping. People interested in the\nactual algorithm used should read the function source code. It should be\nwell enough commented.\u003c/p\u003e\n\u003cp\u003eThis function adds positioning information to both the \u003ccode\u003eline.kara\u003c/code\u003e and\n\u003ccode\u003eline.furi\u003c/code\u003e tables. It might also change the \u003ccode\u003eline.width\u003c/code\u003e field as the line\nbase text is expanded to make room for furigana.\u003c/p\u003e\n\u003ch2 id="karaoke-skeletons"\u003eKaraoke skeletons\u003c/h2\u003e\n\u003cp\u003eA karaoke skeleton is a framework for building karaoke effects in. It\nusually works by writing a couple of functions yourself for handling the\nactual effect work, and these are then called at various times. The actual\ndetails of what functions you need to write depends on the actual karaoke\nskeleton.\u003c/p\u003e\n\u003ch3 id="effect-library"\u003eEffect Library\u003c/h3\u003e\n\u003cp\u003eMain function: \u003ccode\u003ekaraskel.use_fx_library_furi(use_furigana, add_macro)\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003eCall the \u003ccode\u003ekaraskel.use_fx_library_furi\u003c/code\u003e function to install the Effect\nLibrary skeleton for this script file. The \u003ccode\u003escript_name\u003c/code\u003e and\n\u003ccode\u003escript_description\u003c/code\u003e globals are used to name the export filter produced.\nIf \u003ccode\u003euse_furigana\u003c/code\u003e is true, furigana styles are created and added as needed.\nIf \u003ccode\u003eadd_macro\u003c/code\u003e is true, a macro is registered in addition to the export\nfilter.\u003c/p\u003e\n\u003cp\u003eThe basic premise of the Effect Library skeleton is that each timed karaoke\nline has a word in its Effect field that describes what effect to apply to\nthat line. This makes Effect Library a good choice if you want to use\nseveral different effects in a single karaoke.\u003c/p\u003e\n\u003cp\u003eWhen Effect Library is invoked, it calls a function named \u003ccode\u003efx_\u003c/code\u003e\u003cem\u003eeffect\u003c/em\u003e for\neach Dialogue line in the subtitle file. For example, if the Effect field\nof a dialogue line is \u003cem\u003e\u0026ldquo;jump\u0026rdquo;\u003c/em\u003e, the function named \u003ccode\u003efx_jump\u003c/code\u003e is called. For\nlines with empty Effect field, the function \u003ccode\u003efx_none\u003c/code\u003e is called.\u003c/p\u003e\n\u003cp\u003eIf an \u003ccode\u003efx\u003c/code\u003e function does not exist, the original line is left in the subtitle\nfile. Otherwise, whether the original line is left depends on the return\nvalue of the \u003ccode\u003efx\u003c/code\u003e function, a true return value means the original line is\nkept, a false value means it is made into a Comment line.\u003c/p\u003e\n\u003cp\u003eSignature of \u003ccode\u003efx\u003c/code\u003e functions: \u003ccode\u003ekeep = fx_effect(subtitles, meta, styles, line, fxdata)\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003efxdata\u003c/code\u003e is the contents of the Effect field after the initial word\ndefining the effect to be used. All output of an \u003ccode\u003efx\u003c/code\u003e function should be\nappended to the subtitle file represented by \u003ccode\u003esubtitles\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eSimplified main function: \u003ccode\u003ekaraskel.use_fx_library(add_macro)\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003eIdentical to the \u003ccode\u003e_furi\u003c/code\u003e variant above, except that the \u003ccode\u003euse_furigana\u003c/code\u003e\nparameter is removed; it is assumed to be false.\u003c/p\u003e\n\u003ch3 id="classic-advanced"\u003eClassic Advanced\u003c/h3\u003e\n\u003cp\u003eMain function: \u003ccode\u003ekaraskel.use_classic_adv(use_furigana, add_macro)\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003eCall the \u003ccode\u003ekaraskel.use_classic_adv\u003c/code\u003e function to install the Classic\nAdvanced skeleton for this script file. The \u003ccode\u003escript_name\u003c/code\u003e and\n\u003ccode\u003escript_description\u003c/code\u003e globals are used to name the export filter produced.\nIf \u003ccode\u003euse_furigana\u003c/code\u003e is true, furigana styles are created and added as needed,\nand furigana processing is enabled. If \u003ccode\u003eadd_macro\u003c/code\u003e is true, a macro is\nregistered in addition to the export filter.\u003c/p\u003e\n\u003cp\u003eThis skeleton is created in the image of the Automation 3 \u003ccode\u003ekaraskel-adv\u003c/code\u003e\nskeleton, but it is \u003cem\u003enot\u003c/em\u003e compatible with it. (You cannot use a\n\u003ccode\u003ekaraskel-adv\u003c/code\u003e script with Classic Advanced without rewriting parts of your\nscript.) The basic premise is that the \u003ccode\u003edo_syllable\u003c/code\u003e function is called\nonce for each syllable. Optionally, you can have a function called for each\nline, using the \u003ccode\u003edo_line\u003c/code\u003e function.\u003c/p\u003e\n\u003cp\u003eClassic Advanced uses a slightly different model than the usual Automation\n4 Lua one. Here all subtitle lines are collected first before any further\nprocessing is done. They also have \u003ccode\u003eline.prev\u003c/code\u003e and \u003ccode\u003eline.next\u003c/code\u003e fields\nadded, to allow linked list style access. To add lines to the output, you\nmust still add lines to the \u003ccode\u003esubs\u003c/code\u003e object though. Before processing starts,\nall original lines are \u003cem\u003edeleted\u003c/em\u003e from the \u003ccode\u003esubs\u003c/code\u003e object.\u003c/p\u003e\n\u003cp\u003eSignature of syllable function: \u003ccode\u003edo_syllable(subs, meta, styles, lines, line, syl)\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003eThe syllable function \u003cem\u003emust\u003c/em\u003e be named \u003ccode\u003edo_syllable\u003c/code\u003e. If furigana processing\nis enabled, you can also define a function called \u003ccode\u003edo_furigana\u003c/code\u003e with the\nsame signature, to process furigana syllables. Furigana still follows the\nAutomation 4 model here.\u003c/p\u003e\n\u003cp\u003eSignature of line function: \u003ccode\u003edo_line(subs, meta, styles, lines, line, default_do_line)\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003eDefining a line function is optional, and is often not required. The line\nfunction \u003cem\u003emust\u003c/em\u003e be named \u003ccode\u003edo_line\u003c/code\u003e if it exists. The \u003ccode\u003edefault_do_line\u003c/code\u003e\nparameter is the function that would be called if \u003ccode\u003edo_line\u003c/code\u003e didn\u0026rsquo;t exist.\nYou can call it to run the default line processing along with your own\nprocessing.\u003c/p\u003e\n\u003ch2 id="data-structures"\u003eData structures\u003c/h2\u003e\n\u003cp\u003e\u003ccode\u003ekaraskel.lua\u003c/code\u003e defines and extends several data structures. Some of the\nchanges are already listed above under the individual functions.\u003c/p\u003e\n\u003ch3 id="styles-array"\u003eStyles array\u003c/h3\u003e\n\u003cp\u003eThe \u003ccode\u003estyles\u003c/code\u003e array is produced by the \u003ccode\u003ekaraskel.collect_head\u003c/code\u003e function and\nshould be passed to most other \u003ccode\u003ekaraskel.lua\u003c/code\u003e functions. It contains a list\nof all styles in the subtitle file, and can be accessed in two ways.\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003estyles.n\u003c/code\u003e is a number telling the number of styles in the array.\n\u003ccode\u003estyles[1]\u003c/code\u003e is the first defined style and \u003ccode\u003estyles[styles.n]\u003c/code\u003e is the last\ndefined style.\u003c/p\u003e\n\u003cp\u003eThe \u003ccode\u003estyles\u003c/code\u003e array can also be indexed by style names, such that\n\u003ccode\u003estyles[style.name] == style\u003c/code\u003e. The names are not mangled and the indexing\nis case sensitive.\u003c/p\u003e\n\u003cp\u003eBe aware that modifying the \u003ccode\u003estyles\u003c/code\u003e will never update the subtitles file,\nand conversely updating the styles in the subtitle file will not\nautomatically be reflected in \u003ccode\u003estyles\u003c/code\u003e either.\u003c/p\u003e\n\u003ch3 id="style-table"\u003eStyle table\u003c/h3\u003e\n\u003cp\u003eThis is a slight extension of the basic \u003ccode\u003estyle\u003c/code\u003e class subtitle line structure.\u003c/p\u003e\n\u003cp\u003eOne field is added:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003estyle.margin_v\u003c/code\u003e is a convenience alias for \u003ccode\u003estyle.margin_t\u003c/code\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eFull list of fields:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003estyle.class == \u0026quot;style\u0026quot;\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003estyle.raw\u003c/code\u003e - The raw line text.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003estyle.section == \u0026quot;[V4+ Styles]\u0026quot;\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003estyle.name\u003c/code\u003e - Name of the style.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003estyle.fontname\u003c/code\u003e - Name of the font face used by the style.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003estyle.fontsize\u003c/code\u003e - Font size for the style.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003estyle.color1\u003c/code\u003e, \u003ccode\u003estyle.color2\u003c/code\u003e, \u003ccode\u003estyle.color3\u003c/code\u003e and \u003ccode\u003estyle.color4\u003c/code\u003e - The\nfour colours used by the style, in regular order. Use\n\u003ccode\u003e[extract_color](/docs/3.2/en/automation/lua/modules/#extractcolor)\u003c/code\u003e and family to\nmanipulate these.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003estyle.bold\u003c/code\u003e - \u003ccode\u003etrue\u003c/code\u003e/\u003ccode\u003efalse\u003c/code\u003e to specify bold/non-bold font face. Can\nalso be a number to specify font weight, but this is not well supported\nand should be avoided.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003estyle.italic\u003c/code\u003e - Boolean, whether an italic/oblique version of the font\nface is used or not.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003estyle.underline\u003c/code\u003e and \u003ccode\u003estyle.strikeout\u003c/code\u003e - Boolean, whether to apply these\ntwo decorations to the text.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003estyle.scale_x\u003c/code\u003e and \u003ccode\u003estyle.scale_y\u003c/code\u003e - Scaling in X and Y direction, 100\nis neutral.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003estyle.spacing\u003c/code\u003e - Additional spacing in pixels between individual\ncharacters in text.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003estyle.angle\u003c/code\u003e - Z axis rotation for the text.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003estyle.borderstyle\u003c/code\u003e  - 1 (one) for regular outlined text, 3 for opaque\nbox behind subtitles.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003estyle.outline\u003c/code\u003e - Width of the extended outline around the text.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003estyle.shadow\u003c/code\u003e - Distance to the shadow behind the text.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003estyle.align\u003c/code\u003e - Numpad-style alignment for the text on screen.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003estyle.margin_l\u003c/code\u003e, \u003ccode\u003estyle.margin_r\u003c/code\u003e, \u003ccode\u003estyle.margin_t\u003c/code\u003e and \u003ccode\u003estyle.margin_b\u003c/code\u003e\n\u003cul\u003e\n\u003cli\u003eMargins for the style. \u003ccode\u003estyle.margin_v\u003c/code\u003e is an alias for top margin.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003estyle.encoding\u003c/code\u003e - Windows font encoding ID for the style.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003estyle.relative_to\u003c/code\u003e - Currently unsupported.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003estyle.vertical\u003c/code\u003e - Unsupported, tentative AS5 feature.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id="dialogue-line-table"\u003eDialogue line table\u003c/h3\u003e\n\u003cp\u003eA large number of new fields have been added to the dialogue line class.\u003c/p\u003e\n\u003cp\u003eBasic fields:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eline.class == \u0026quot;dialogue\u0026quot;\u003c/code\u003e, also for comment lines\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eline.raw\u003c/code\u003e - The raw line text.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eline.section\u003c/code\u003e - Usually \u003ccode\u003e\u0026quot;[Events]\u0026quot;\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eline.comment\u003c/code\u003e - Boolean, true if the line is a Comment line rather than\nDialogue.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eline.layer\u003c/code\u003e - Layer of the line.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eline.start_time\u003c/code\u003e, \u003ccode\u003eline.end_time\u003c/code\u003e - Start and end times of the line in\nmilliseconds.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eline.style\u003c/code\u003e - Name of the style used for the line.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eline.actor\u003c/code\u003e - Actor field for the line.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eline.margin_l\u003c/code\u003e, \u003ccode\u003eline.margin_r\u003c/code\u003e, \u003ccode\u003eline.margin_t\u003c/code\u003e and \u003ccode\u003eline.margin_b\u003c/code\u003e -\nMargin overrides for the line, a zero value means use margin from style.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eline.effect\u003c/code\u003e - Effect field of the line.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eline.userdata\u003c/code\u003e - Unused.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eline.text\u003c/code\u003e - Dialogue text.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eBasic added fields, by \u003ccode\u003ekaraskel.preproc_line_text\u003c/code\u003e:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eline.text_stripped\u003c/code\u003e - Line text with all override tags and vector\ndrawings removed.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eline.duration\u003c/code\u003e - Duration of the line in milliseconds\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eline.kara\u003c/code\u003e and \u003ccode\u003eline.furi\u003c/code\u003e - Array tables of extended karaoke and\nfurigana tables, respectively. They do not contain sizing and positioning\ndata from the beginning.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eAdded fields for sizing, by \u003ccode\u003ekaraskel.preproc_line_size\u003c/code\u003e:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eline.styleref\u003c/code\u003e - A reference to the Style table representing this line\u0026rsquo;s\nselected style.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eline.furistyle\u003c/code\u003e - A reference to the Style table representing this\nline\u0026rsquo;s furigana layout style. If there is no style with the right name,\nthis field is \u003ccode\u003efalse\u003c/code\u003e instead.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eline.width\u003c/code\u003e, \u003ccode\u003eline.height\u003c/code\u003e, \u003ccode\u003eline.descent\u003c/code\u003e and \u003ccode\u003eline.extlead\u003c/code\u003e - Sizing\ninformation for the stripped line text, as returned by\n\u003ccode\u003eaegisub.text_extents\u003c/code\u003e. \u003ccode\u003eline.width\u003c/code\u003e may also be modified by\n\u003ccode\u003ekaraskel.preproc_line_pos\u003c/code\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eAdded fields for positioning, by \u003ccode\u003ekaraskel.preproc_line_pos\u003c/code\u003e:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eline.margin_v\u003c/code\u003e - A convenience alias for \u003ccode\u003eline.margin_t\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eline.eff_margin_l\u003c/code\u003e, \u003ccode\u003eline.eff_margin_r\u003c/code\u003e, \u003ccode\u003eline.eff_margin_t\u003c/code\u003e,\n\u003ccode\u003eline.eff_margin_b\u003c/code\u003e and \u003ccode\u003eline.eff_margin_v\u003c/code\u003e - Effective margin values for\nthe line. If the corresponding margin override for the line is non-zero,\nthat value is used, otherwise the value defined in the style is used.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eline.halign\u003c/code\u003e - One of \u003ccode\u003e\u0026quot;left\u0026quot;\u003c/code\u003e, \u003ccode\u003e\u0026quot;center\u0026quot;\u003c/code\u003e or \u003ccode\u003e\u0026quot;right\u0026quot;\u003c/code\u003e, the horizontal\nalignment of the line, derived from \u003ccode\u003eline.styleref.align\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eline.valign\u003c/code\u003e - One of \u003ccode\u003e\u0026quot;top\u0026quot;\u003c/code\u003e, \u003ccode\u003e\u0026quot;middle\u0026quot;\u003c/code\u003e or \u003ccode\u003e\u0026quot;bottom\u0026quot;\u003c/code\u003e, the vertical\nalignment of the line, derived from \u003ccode\u003eline.styleref.align\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eline.left\u003c/code\u003e - The left edge X coordinate for the line, assuming its given\nalignment, effective margins and no collision detection.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eline.center\u003c/code\u003e - The line centre X coordinate, assuming its given\nalignment, effective margins and no collision detection.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eline.right\u003c/code\u003e - The right edge X coordinate for the line, assuming its\ngiven alignment, effective margins and no collision detection.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eline.top\u003c/code\u003e - The top edge Y coordinate for the line, assuming its given\nalignment, effective margins and no collision detection.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eline.middle\u003c/code\u003e - The line vertical centre Y coordinate, assuming its given\nalignment, effective margins and no collision detection \u003ccode\u003eline.vcenter\u003c/code\u003e is\nan alias for this.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eline.bottom\u003c/code\u003e - The bottom edge Y coordinate for the line, assuming its\ngiven alignment, effective margins and no collision detection.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eline.x\u003c/code\u003e and \u003ccode\u003eline.y\u003c/code\u003e - X and Y coordinates for the line, suitable for\nusing in a \u003ccode\u003e\\pos\u003c/code\u003e override tag to get the line\u0026rsquo;s original position.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eAdded fields for linked list access, only available when using the Classic\nAdvanced skeleton:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eline.prev\u003c/code\u003e, \u003ccode\u003eline.next\u003c/code\u003e - Access the dialogue line before and after this\none. These might be \u003ccode\u003enil\u003c/code\u003e on the first/last dialogue lines. Blank lines,\nstyle lines, header lines etc. are \u003cem\u003enot\u003c/em\u003e included in this linked list.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id="karaoke-and-furigana-syllable-tables"\u003eKaraoke and furigana syllable tables\u003c/h3\u003e\n\u003cp\u003eTables for regular karaoke syllables and furigana parts are identical in\n(almost) every aspect, and can usually be processed by the same code\nwithout problems. There are a few points to take note of which are marked.\nEverywhere it says \u003ccode\u003esyl\u003c/code\u003e here, you can replace that with \u003ccode\u003efuri\u003c/code\u003e unless\notherwise noted.\u003c/p\u003e\n\u003cp\u003eBasic fields, defined by \u003ccode\u003eaegisub.parse_karaoke_data\u003c/code\u003e:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003esyl.duration\u003c/code\u003e - syllable duration in milliseconds (divide by 10 to get a\nnumber suitable for \u003ccode\u003e\\k\u003c/code\u003e tags.)\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003esyl.start_time\u003c/code\u003e, \u003ccode\u003esyl.end_time\u003c/code\u003e - Start and end time of the syllable in\nmilliseconds, relative to the start time of the line.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003esyl.tag\u003c/code\u003e - The name of the tag defining this syllable, without\nbackslash. It will usually be one of \u003ccode\u003ek\u003c/code\u003e, \u003ccode\u003eK\u003c/code\u003e, \u003ccode\u003ekf\u003c/code\u003e or \u003ccode\u003eko\u003c/code\u003e. Note that\n\u003ccode\u003ekt\u003c/code\u003e is not handled. Furigana parts have the same tag as the original\nsyllable defining them.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003esyl.text\u003c/code\u003e - Text including tags of the syllable. Same as stripped text\nfor furigana.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003esyl.text_stripped\u003c/code\u003e - Text of the syllable with all tags removed. For\nmain syllables, this also has furigana and multi-highlight parts removed.\nThis is the text you will usually want to use.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eAdditions by \u003ccode\u003ekaraskel.preproc_line_text\u003c/code\u003e:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003esyl.kdur\u003c/code\u003e - Syllable duration in centiseconds, suitable for use in \u003ccode\u003e\\k\u003c/code\u003e\ntags.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003esyl.line\u003c/code\u003e - Back reference to the line table containing this syllable.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003esyl.inline_fx\u003c/code\u003e - Name of the \u003ca href="/docs/3.2/en/karaoke_inline-fx/"\u003e\u003cem\u003einline-fx\u003c/em\u003e\u003c/a\u003e for this\nsyllable.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003esyl.i\u003c/code\u003e - Index number of this syllable.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003esyl.prespace\u003c/code\u003e, \u003ccode\u003esyl.postspace\u003c/code\u003e - Space characaters at the start/end of\nthe syllable. Always blank for furigana. These are spaces included in\n\u003ccode\u003esyl.text_stripped\u003c/code\u003e. You will usually never need this.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003esyl.text_spacestripped\u003c/code\u003e - Syllable text stripped for tags and trimmed of\nspaces at the start and end. This, \u003ccode\u003esyl.prespace\u003c/code\u003e and \u003ccode\u003esyl.postspace\u003c/code\u003e\ntogether can produce the same as \u003ccode\u003esyl.text_stripped\u003c/code\u003e. You will usually\nnever need this.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003esyl.isfuri\u003c/code\u003e - \u003ccode\u003etrue\u003c/code\u003e if the table is a furigana table, \u003ccode\u003efalse\u003c/code\u003e if it is\nnot. If you use a single function to process both regular and furigana\nsyllables, you can use this to do differentiated processing still.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003esyl.highlights\u003c/code\u003e - Array table of multi-highlight data for the syllable.\nFor furigana, there is always exactly one highlight defined. See below\nfor format of highlight tables.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eAdditions by \u003ccode\u003ekaraskel.preproc_line_size\u003c/code\u003e:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003esyl.style\u003c/code\u003e - Reference to the style used to calculate sizing for this\nsyllable. This will be the main line style for regular syllables and the\nfurigana style for furigana. You should always set the style of the\ngenerated lines to this one.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003esyl.width\u003c/code\u003e, \u003ccode\u003esyl.height\u003c/code\u003e - Width and height of \u003ccode\u003esyl.text_spacestripped\u003c/code\u003e,\nas returned by \u003ccode\u003eaegisub.text_extents\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003esyl.prespacewidth\u003c/code\u003e, \u003ccode\u003esyl.postspacewidth\u003c/code\u003e - Width of \u003ccode\u003esyl.prespace\u003c/code\u003e and\n\u003ccode\u003esyl.postspace\u003c/code\u003e respectively. You will usually not need these. Always\nzero for furigana.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eAdditions by \u003ccode\u003ekaraskel.preproc_line_pos\u003c/code\u003e:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003esyl.left\u003c/code\u003e, \u003ccode\u003esyl.center\u003c/code\u003e, \u003ccode\u003esyl.right\u003c/code\u003e - Respectively left, center and\nright aligned positions of the syllable/furigana, for use with different\nalignments. The positions are \u003cem\u003erelative to the left edge of the line\u003c/em\u003e,\nmeaning you will need to add a value for line positioning to use these\nvalues to position syllables on screen. There is no guarantee that\n\u003ccode\u003esyl.right\u003c/code\u003e for one syllable is equal to \u003ccode\u003esyl.left\u003c/code\u003e for the next\nsyllable.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e{::template name=\u0026ldquo;examplebox\u0026rdquo;}\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-lua"\u003eline.left + syl.center\r\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eCalculates the default X position of a syllable, suitable for use with\n\u003ccode\u003e\\an2\u003c/code\u003e, \u003ccode\u003e\\an5\u003c/code\u003e or \u003ccode\u003e\\an8\u003c/code\u003e alignment.\n{:/}\u003c/p\u003e\n\u003ch4 id="highlight-table"\u003eHighlight table\u003c/h4\u003e\n\u003cp\u003eA highlight table defines one highlight of a multi-highlight timed\nsyllable.\u003c/p\u003e\n\u003cp\u003eHighlight tables are entirely defined by \u003ccode\u003ekaraskel.preproc_line_text\u003c/code\u003e, and\ncontain the following fields:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003ehl.start_time\u003c/code\u003e, \u003ccode\u003ehl.end_time\u003c/code\u003e - Start and end time of the highlight, in\nmilliseconds, relative to the start of the line.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ehl.duration\u003c/code\u003e - Duration of the highlight in milliseconds.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e{::template name=\u0026ldquo;automation_navbox\u0026rdquo; /}\u003c/p\u003e\n'},{id:48,href:"/docs/3.2/en/automation/lua/modules/re/",title:"",description:null,content:'\u003cp\u003eThe \u003ccode\u003ere\u003c/code\u003e module is a wrapper around boost::regex, intended as a full\nreplacement for Lua\u0026rsquo;s built in regular expressions. It has two main advantages\nover Lua\u0026rsquo;s:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eFull Unicode support. Lua regular expressions operate on bytes rather than\ncharacters, which frequently causes problems with multibyte characters.\u003c/li\u003e\n\u003cli\u003eA more powerful and flexible syntax. Properly speaking, Lua does not support\nregular expressions; rather it has a basic pattern matching language that\nsupports a small subset of what can be done with regular expressions.\nboost::regex, on the other hand, supports perl-compatible regular\nexpressions.\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2 id="usage"\u003eUsage\u003c/h2\u003e\n\u003cp\u003eImport this module with \u003ccode\u003ere = require \'aegisub.re\'\u003c/code\u003e{:.language-lua}.\u003c/p\u003e\n\u003cp\u003eSee \u003ca href="http://www.boost.org/doc/libs/1_53_0/libs/regex/doc/html/boost_regex/syntax/perl_syntax.html"\u003eboost.regex\u0026rsquo;s\ndocumentation\u003c/a\u003e\nfor information about the regular expression syntax. In general any resources\non the web that refer to Perl regular expressions or PCRE will apply to\nthis module\u0026rsquo;s regular expressions.\u003c/p\u003e\n\u003ch3 id="match-tables"\u003eMatch Tables\u003c/h3\u003e\n\u003cp\u003eSeveral of the functions below return Match Tables, which are tables containing\nthe following fields:\u003c/p\u003e\n\u003cdl\u003e\n\u003cdt\u003e\u003cstrong\u003e\u003ccode\u003estr\u003c/code\u003e\u003c/strong\u003e (\u003ccode\u003estring\u003c/code\u003e)\u003c/dt\u003e\n\u003cdd\u003eThe text matched by a pattern or capturing expression\u003c/dd\u003e\n\u003cdt\u003e\u003cstrong\u003e\u003ccode\u003efirst\u003c/code\u003e\u003c/strong\u003e (\u003ccode\u003enumber\u003c/code\u003e)\u003c/dt\u003e\n\u003cdd\u003eThe start index of \u003ccode\u003estr\u003c/code\u003e in the original string which had a regular\nexpression applied to it. Note that this index is one-based and is in bytes,\nrather than characters, to match Lua\u0026rsquo;s string indexing.\u003c/dd\u003e\n\u003cdt\u003e\u003cstrong\u003e\u003ccode\u003elast\u003c/code\u003e\u003c/strong\u003e (\u003ccode\u003enumber\u003c/code\u003e)\u003c/dt\u003e\n\u003cdd\u003eThe end index of \u003ccode\u003estr\u003c/code\u003e in the original string which had a regular expression\napplied to it. Note that this index is one-based, inclusive, and is in bytes,\nrather than characters, to match Lua\u0026rsquo;s string indexing.\u003c/dd\u003e\n\u003c/dl\u003e\n\u003cp\u003e{::template name=\u0026ldquo;luabox\u0026rdquo;}\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cblockquote\u003e\n\u003cblockquote\u003e\n\u003cp\u003ere.match(\u0026ldquo;b\u0026rdquo;, \u0026ldquo;abc\u0026rdquo;)\n{\n{\n[\u0026ldquo;str\u0026rdquo;] = \u0026ldquo;b\u0026rdquo;,\n[\u0026ldquo;first\u0026rdquo;] = 2,\n[\u0026ldquo;last\u0026rdquo;] = 2\n}\n}\n{:/}\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003c/blockquote\u003e\n\u003c/blockquote\u003e\n\u003ch3 id="flags"\u003eFlags\u003c/h3\u003e\n\u003cp\u003eThe following flags may be passed to all of the static functions (including\n\u003ccode\u003ere.compile\u003c/code\u003e).  Flags must come after all supplied non-flag arguments, but\noptional arguments can be skipped.\u003c/p\u003e\n\u003cdl\u003e\n\u003cdt\u003ere.ICASE\u003c/dt\u003e\n\u003cdd\u003eIgnore case when matching.\u003c/dd\u003e\n\u003cdt\u003ere.NOSUB:\u003c/dt\u003e\n\u003cdd\u003eDon\u0026rsquo;t set backreferences and capture groups. Can improve performance when\nthey aren\u0026rsquo;t needed.\u003c/dd\u003e\n\u003cdt\u003ere.NEWLINE_ALT:\u003c/dt\u003e\n\u003cdd\u003eTreat newline characters as the alternation operator (|).\u003c/dd\u003e\n\u003cdt\u003ere.NO_MOD_M:\u003c/dt\u003e\n\u003cdd\u003e^ and $ only match the beginning and end of the string rather than newlines.\u003c/dd\u003e\n\u003cdt\u003ere.MOD_S:\u003c/dt\u003e\n\u003cdd\u003eTreat newlines as normal characters, matched by \u0026lsquo;.\u0026rsquo;.\u003c/dd\u003e\n\u003cdt\u003ere.MOD_X:\u003c/dt\u003e\n\u003cdd\u003eIgnore unescaped whitespace in the expression, making it possible to write\nregular expressions that \u003cem\u003earen\u0026rsquo;t\u003c/em\u003e write-only.\u003c/dd\u003e\n\u003cdt\u003ere.NO_EMPTY_SUBEXPRESSION:\u003c/dt\u003e\n\u003cdd\u003eDon\u0026rsquo;t match empty expressions/alternatives.\u003c/dd\u003e\n\u003c/dl\u003e\n\u003cp\u003e{::template name=\u0026ldquo;luabox\u0026rdquo;}\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cblockquote\u003e\n\u003cblockquote\u003e\n\u003cp\u003ere.match(\u0026ldquo;a\u0026rdquo;, \u0026ldquo;A\u0026rdquo;)\nnil\nre.match(\u0026ldquo;a\u0026rdquo;, \u0026ldquo;A\u0026rdquo;, re.ICASE, re.NOSUB)\n{\n{\n[\u0026ldquo;str\u0026rdquo;] = \u0026ldquo;A\u0026rdquo;,\n[\u0026ldquo;first\u0026rdquo;] = 1,\n[\u0026ldquo;last\u0026rdquo;] = 1\n}\n}\n{:/}\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003c/blockquote\u003e\n\u003c/blockquote\u003e\n\u003ch3 id="recompile"\u003ere.compile\u003c/h3\u003e\n\u003cp\u003eSynopsis: \u003ccode\u003eexpr = re.compile(pattern, [FLAGS])\u003c/code\u003e{:.language-lua}\u003c/p\u003e\n\u003cp\u003eCompile a regular expression. Reusing a compiled regular expression is faster\nthan recompiling it each time it is used, and is usually more readable as well.\u003c/p\u003e\n\u003cdl\u003e\n\u003cdt\u003e\u003cstrong\u003e\u003ccode\u003e@pattern\u003c/code\u003e\u003c/strong\u003e (\u003ccode\u003estring\u003c/code\u003e)\u003c/dt\u003e\n\u003cdd\u003eRegular expression to compile.\u003c/dd\u003e\n\u003cdt\u003e\u003cstrong\u003e\u003ccode\u003eexpr\u003c/code\u003e\u003c/strong\u003e (\u003ccode\u003etable\u003c/code\u003e)\u003c/dt\u003e\n\u003cdd\u003eA table with all of the functions listed below, except without the pattern\nand flags arguments.\u003c/dd\u003e\n\u003c/dl\u003e\n\u003cp\u003e{::template name=\u0026ldquo;luabox\u0026rdquo;}\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cblockquote\u003e\n\u003cblockquote\u003e\n\u003cp\u003eexpr = re.compile(\u0026ldquo;a\u0026rdquo;)\nexpr:split(\u0026ldquo;banana\u0026rdquo;)\n{\n\u0026ldquo;b\u0026rdquo;,\n\u0026ldquo;n\u0026rdquo;,\n\u0026ldquo;n\u0026rdquo;\n}\n{:/}\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003c/blockquote\u003e\n\u003c/blockquote\u003e\n\u003ch3 id="resplit"\u003ere.split\u003c/h3\u003e\n\u003cp\u003eSynopsis: \u003ccode\u003echunks = re.split(str, pattern, skip_empty=false, max_splits=0)\u003c/code\u003e{:.language-lua}\u003c/p\u003e\n\u003cp\u003eSplit the string at each of the occurrences of \u003ccode\u003epattern\u003c/code\u003e.\u003c/p\u003e\n\u003cdl\u003e\n\u003cdt\u003e\u003cstrong\u003e\u003ccode\u003e@str\u003c/code\u003e\u003c/strong\u003e (\u003ccode\u003estring\u003c/code\u003e)\u003c/dt\u003e\n\u003cdd\u003eString to split.\u003c/dd\u003e\n\u003cdt\u003e\u003cstrong\u003e\u003ccode\u003e@pattern\u003c/code\u003e\u003c/strong\u003e (\u003ccode\u003estring\u003c/code\u003e)\u003c/dt\u003e\n\u003cdd\u003eRegular expression to split the string on. Capturing groups in the pattern\nare ignored.\u003c/dd\u003e\n\u003cdt\u003e\u003cstrong\u003e\u003ccode\u003e@skip_empty\u003c/code\u003e\u003c/strong\u003e (\u003ccode\u003eboolean\u003c/code\u003e)\u003c/dt\u003e\n\u003cdd\u003eDo not include zero-length chunks in the results.\u003c/dd\u003e\n\u003cdt\u003e\u003cstrong\u003e\u003ccode\u003e@max_splits\u003c/code\u003e\u003c/strong\u003e (\u003ccode\u003enumber\u003c/code\u003e)\u003c/dt\u003e\n\u003cdd\u003eIf greater than zero, the maximum numbers of times to split the string (i.e.\n\u003ccode\u003e#chunks\u003c/code\u003e will be at most \u003ccode\u003emax_splits + 1\u003c/code\u003e).\u003c/dd\u003e\n\u003cdt\u003e\u003cstrong\u003e\u003ccode\u003echunks\u003c/code\u003e\u003c/strong\u003e (\u003ccode\u003etable\u003c/code\u003e)\u003c/dt\u003e\n\u003cdd\u003eA table containing each of the sections of \u003ccode\u003estr\u003c/code\u003e between the matches of\n\u003ccode\u003epattern\u003c/code\u003e.\u003c/dd\u003e\n\u003c/dl\u003e\n\u003cp\u003e{::template name=\u0026ldquo;luabox\u0026rdquo;}\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cblockquote\u003e\n\u003cblockquote\u003e\n\u003cp\u003ere.split(\u0026quot;,\u0026quot;, \u0026ldquo;a,,b,c\u0026rdquo;)\n{\n\u0026ldquo;a\u0026rdquo;,\n\u0026ldquo;\u0026rdquo;,\n\u0026ldquo;b\u0026rdquo;,\n\u0026ldquo;c\u0026rdquo;\n}\n{:/}\n{::template name=\u0026ldquo;luabox\u0026rdquo;}\nre.split(\u0026quot;,\u0026quot;, \u0026ldquo;a,,b,c\u0026rdquo;, true)\n{\n\u0026ldquo;a\u0026rdquo;,\n\u0026ldquo;b\u0026rdquo;,\n\u0026ldquo;c\u0026rdquo;\n}\n{:/}\n{::template name=\u0026ldquo;luabox\u0026rdquo;}\nre.split(\u0026quot;,\u0026quot;, \u0026ldquo;a,,b,c\u0026rdquo;, false, 1)\n{\n\u0026ldquo;a\u0026rdquo;,\n\u0026ldquo;,b,c\u0026rdquo;,\n}\n{:/}\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003c/blockquote\u003e\n\u003c/blockquote\u003e\n\u003ch3 id="regsplit"\u003ere.gsplit\u003c/h3\u003e\n\u003cp\u003eSynopsis: \u003ccode\u003eiter = re.gsplit(str, pattern, skip_empty=false, max_splits=0)\u003c/code\u003e{:.language-lua}\u003c/p\u003e\n\u003cp\u003eIterator version of re.split.\u003c/p\u003e\n\u003cdl\u003e\n\u003cdt\u003e\u003cstrong\u003e\u003ccode\u003e@str\u003c/code\u003e\u003c/strong\u003e (\u003ccode\u003estring\u003c/code\u003e)\u003c/dt\u003e\n\u003cdd\u003eString to split.\u003c/dd\u003e\n\u003cdt\u003e\u003cstrong\u003e\u003ccode\u003e@pattern\u003c/code\u003e\u003c/strong\u003e (\u003ccode\u003estring\u003c/code\u003e)\u003c/dt\u003e\n\u003cdd\u003eRegular expression to split the string on. Capturing groups in the pattern\nare ignored.\u003c/dd\u003e\n\u003cdt\u003e\u003cstrong\u003e\u003ccode\u003e@skip_empty\u003c/code\u003e\u003c/strong\u003e (\u003ccode\u003eboolean\u003c/code\u003e)\u003c/dt\u003e\n\u003cdd\u003eDo not include zero-length chunks in the results.\u003c/dd\u003e\n\u003cdt\u003e\u003cstrong\u003e\u003ccode\u003e@max_splits\u003c/code\u003e\u003c/strong\u003e (\u003ccode\u003enumber\u003c/code\u003e)\u003c/dt\u003e\n\u003cdd\u003eIf greater than zero, the maximum numbers of times to split the string (i.e.\n\u003ccode\u003e#chunks\u003c/code\u003e will be at most \u003ccode\u003emax_splits + 1\u003c/code\u003e).\u003c/dd\u003e\n\u003cdt\u003e\u003cstrong\u003e\u003ccode\u003eiter\u003c/code\u003e\u003c/strong\u003e (\u003ccode\u003eiterator over strings\u003c/code\u003e)\u003c/dt\u003e\n\u003cdd\u003eAn iterator over each of the sections of \u003ccode\u003estr\u003c/code\u003e between the matches of\n\u003ccode\u003epattern\u003c/code\u003e.\u003c/dd\u003e\n\u003c/dl\u003e\n\u003cp\u003e{::template name=\u0026ldquo;luabox\u0026rdquo;}\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cblockquote\u003e\n\u003cblockquote\u003e\n\u003cp\u003efor str in re.gsplit(\u0026quot;,\u0026quot;, \u0026ldquo;a,,b,c\u0026rdquo;) do\nprint str\nend\na\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003c/blockquote\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eb\nc\n{:/}\n{::template name=\u0026ldquo;luabox\u0026rdquo;}\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cblockquote\u003e\n\u003cblockquote\u003e\n\u003cp\u003efor str in re.gsplit(\u0026quot;,\u0026quot;, \u0026ldquo;a,,b,c\u0026rdquo;, true) do\nprint str\nend\na\nb\nc\n{:/}\n{::template name=\u0026ldquo;luabox\u0026rdquo;}\nfor str in re.gsplit(\u0026quot;,\u0026quot;, \u0026ldquo;a,,b,c\u0026rdquo;, false, 1) do\nprint str\nend\na\n,b,c\n{:/}\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003c/blockquote\u003e\n\u003c/blockquote\u003e\n\u003ch3 id="refind"\u003ere.find\u003c/h3\u003e\n\u003cp\u003eSynopsis: \u003ccode\u003ematches = re.find(str, pattern)\u003c/code\u003e{:.language-lua}\u003c/p\u003e\n\u003cp\u003eFind all non-overlapping substrings of \u003ccode\u003estr\u003c/code\u003e which match \u003ccode\u003epattern\u003c/code\u003e.\u003c/p\u003e\n\u003cdl\u003e\n\u003cdt\u003e\u003cstrong\u003e\u003ccode\u003e@str\u003c/code\u003e\u003c/strong\u003e (\u003ccode\u003estring\u003c/code\u003e)\u003c/dt\u003e\n\u003cdd\u003eString to search for the pattern in.\u003c/dd\u003e\n\u003cdt\u003e\u003cstrong\u003e\u003ccode\u003e@pattern\u003c/code\u003e\u003c/strong\u003e (\u003ccode\u003estring\u003c/code\u003e)\u003c/dt\u003e\n\u003cdd\u003ePattern to search for. Capturing groups in the pattern are ignored.\u003c/dd\u003e\n\u003cdt\u003e\u003cstrong\u003e\u003ccode\u003ematches\u003c/code\u003e\u003c/strong\u003e (\u003ccode\u003etable\u003c/code\u003e or \u003ccode\u003enil\u003c/code\u003e)\u003c/dt\u003e\n\u003cdd\u003eA table of \u003ca href="/docs/3.2/en/automation/lua/modules/re/#match-tables"\u003eMatch Tables\u003c/a\u003e for all matches, or \u003ccode\u003enil\u003c/code\u003e if\nthere were none.\u003c/dd\u003e\n\u003c/dl\u003e\n\u003cp\u003e{::template name=\u0026ldquo;luabox\u0026rdquo;}\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cblockquote\u003e\n\u003cblockquote\u003e\n\u003cp\u003ere.find(\u0026quot;.\u0026quot;, \u0026ldquo;☃☃\u0026rdquo;)\n{\n{\n[\u0026ldquo;str\u0026rdquo;] = \u0026ldquo;☃\u0026rdquo;,\n[\u0026ldquo;first\u0026rdquo;] = 1,\n[\u0026ldquo;last\u0026rdquo;] = 3\n},\n{\n[\u0026ldquo;str\u0026rdquo;] = \u0026ldquo;☃\u0026rdquo;,\n[\u0026ldquo;first\u0026rdquo;] = 4,\n[\u0026ldquo;last\u0026rdquo;] = 6\n}\n}\n{:/}\n{::template name=\u0026ldquo;luabox\u0026rdquo;}\nfunction contains_an_a(str)\nif re.find(\u0026ldquo;a\u0026rdquo;, str)\nprint \u0026ldquo;Has an a\u0026rdquo;\nelse\nprint \u0026ldquo;Doesn\u0026rsquo;t have an a\u0026rdquo;\nend\nend\ncontains_an_a(\u0026ldquo;abc\u0026rdquo;)\nHas an a\ncontains_an_a(\u0026ldquo;def\u0026rdquo;)\nDoesn\u0026rsquo;t have an a\n{:/}\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003c/blockquote\u003e\n\u003c/blockquote\u003e\n\u003ch3 id="regfind"\u003ere.gfind\u003c/h3\u003e\n\u003cp\u003eSynopsis: \u003ccode\u003eiter = re.gfind(str, pattern)\u003c/code\u003e{:.language-lua}\u003c/p\u003e\n\u003cp\u003eIterate over all non-overlapping substrings of \u003ccode\u003estr\u003c/code\u003e which match \u003ccode\u003epattern\u003c/code\u003e.\u003c/p\u003e\n\u003cdl\u003e\n\u003cdt\u003e\u003cstrong\u003e\u003ccode\u003e@str\u003c/code\u003e\u003c/strong\u003e (\u003ccode\u003estring\u003c/code\u003e)\u003c/dt\u003e\n\u003cdd\u003eString to search for the pattern in.\u003c/dd\u003e\n\u003cdt\u003e\u003cstrong\u003e\u003ccode\u003e@pattern\u003c/code\u003e\u003c/strong\u003e (\u003ccode\u003estring\u003c/code\u003e)\u003c/dt\u003e\n\u003cdd\u003ePattern to search for. Capturing groups in the pattern are ignored.\u003c/dd\u003e\n\u003cdt\u003e\u003cstrong\u003e\u003ccode\u003eiter\u003c/code\u003e\u003c/strong\u003e (\u003ccode\u003eiterator over string, number, number\u003c/code\u003e)\u003c/dt\u003e\n\u003cdd\u003eAn iterator which produces three values at each step: a matched string, the\nstarted index of the match in the source string, and the inclusive end index of\nthe match in the source string.\u003c/dd\u003e\n\u003c/dl\u003e\n\u003cp\u003e{::template name=\u0026ldquo;luabox\u0026rdquo;}\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cblockquote\u003e\n\u003cblockquote\u003e\n\u003cp\u003efor str, start_idx, end_idx in re.gfind(\u0026quot;.\u0026quot;, \u0026ldquo;☃☃\u0026rdquo;) do\nprint string.format(\u0026quot;%d-%d: %s\u0026quot;, start_idx, end_idx, str)\nend\n1-3: ☃\n4-6: ☃\n{:/}\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003c/blockquote\u003e\n\u003c/blockquote\u003e\n\u003ch3 id="rematch"\u003ere.match\u003c/h3\u003e\n\u003cp\u003eSynopsis: \u003ccode\u003ematches = re.match(str, pattern)\u003c/code\u003e{:.language-lua}\u003c/p\u003e\n\u003cp\u003eMatch a pattern against a string. This differs from \u003ccode\u003efind\u003c/code\u003e in that \u003ccode\u003efind\u003c/code\u003e\nreturns all matches and does not capture subgroups, while this returns only a\nsingle match along with the captured subgroups.\u003c/p\u003e\n\u003cdl\u003e\n\u003cdt\u003e\u003cstrong\u003e\u003ccode\u003e@str\u003c/code\u003e\u003c/strong\u003e (\u003ccode\u003estring\u003c/code\u003e)\u003c/dt\u003e\n\u003cdd\u003eString to search for the pattern in.\u003c/dd\u003e\n\u003cdt\u003e\u003cstrong\u003e\u003ccode\u003e@pattern\u003c/code\u003e\u003c/strong\u003e (\u003ccode\u003estring\u003c/code\u003e)\u003c/dt\u003e\n\u003cdd\u003ePattern to search for.\u003c/dd\u003e\n\u003cdt\u003e\u003cstrong\u003e\u003ccode\u003ematches\u003c/code\u003e\u003c/strong\u003e (\u003ccode\u003etable\u003c/code\u003e or \u003ccode\u003enil\u003c/code\u003e)\u003c/dt\u003e\n\u003cdd\u003e\u003ccode\u003enil\u003c/code\u003e if the pattern did not match the string. Otherwise, a table containing\na \u003ca href="/docs/3.2/en/automation/lua/modules/re/#match-tables"\u003eMatch Table\u003c/a\u003e for the full match, followed by a \u003ca href="/docs/3.2/en/automation/lua/modules/re/#match-tables"\u003eMatch Table\u003c/a\u003e for each capturing subexpression in the pattern (if\nany).\u003c/dd\u003e\n\u003c/dl\u003e\n\u003cp\u003e{::template name=\u0026ldquo;luabox\u0026rdquo;}\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cblockquote\u003e\n\u003cblockquote\u003e\n\u003cp\u003ere.match(\u0026quot;(\\d+) (\\d+) (\\d+)\u0026quot;, \u0026ldquo;{250 1173 380}Help!\u0026quot;)\n{\n{\n[\u0026ldquo;str\u0026rdquo;] = \u0026ldquo;250 1173 380\u0026rdquo;,\n[\u0026ldquo;first\u0026rdquo;] = 2,\n[\u0026ldquo;last\u0026rdquo;] = 13\n},\n{\n[\u0026ldquo;str\u0026rdquo;] = \u0026ldquo;250\u0026rdquo;,\n[\u0026ldquo;first\u0026rdquo;] = 2,\n[\u0026ldquo;last\u0026rdquo;] = 4\n},\n{\n[\u0026ldquo;str\u0026rdquo;] = \u0026ldquo;1173\u0026rdquo;,\n[\u0026ldquo;first\u0026rdquo;] = 6,\n[\u0026ldquo;last\u0026rdquo;] = 9,\n},\n{\n[\u0026ldquo;str\u0026rdquo;] = \u0026ldquo;380\u0026rdquo;\n[\u0026ldquo;first\u0026rdquo;] = 11,\n[\u0026ldquo;last\u0026rdquo;] = 13\n}\n}\n{:/}\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003c/blockquote\u003e\n\u003c/blockquote\u003e\n\u003ch3 id="regmatch"\u003ere.gmatch\u003c/h3\u003e\n\u003cp\u003eSynopsis: \u003ccode\u003eiter = re.gmatch(str, pattern)\u003c/code\u003e{:.language-lua}\u003c/p\u003e\n\u003cp\u003eIterator version of \u003ca href="/docs/3.2/en/automation/lua/modules/re/#re.match"\u003e\u003ccode\u003ere.match\u003c/code\u003e\u003c/a\u003e.\u003c/p\u003e\n\u003cdl\u003e\n\u003cdt\u003e\u003cstrong\u003e\u003ccode\u003e@str\u003c/code\u003e\u003c/strong\u003e (\u003ccode\u003estring\u003c/code\u003e)\u003c/dt\u003e\n\u003cdd\u003eString to search for the pattern in.\u003c/dd\u003e\n\u003cdt\u003e\u003cstrong\u003e\u003ccode\u003e@pattern\u003c/code\u003e\u003c/strong\u003e (\u003ccode\u003estring\u003c/code\u003e)\u003c/dt\u003e\n\u003cdd\u003ePattern to search for.\u003c/dd\u003e\n\u003cdt\u003e\u003cstrong\u003e\u003ccode\u003ematches\u003c/code\u003e\u003c/strong\u003e (\u003ccode\u003eiterator over table\u003c/code\u003e)\u003c/dt\u003e\n\u003cdd\u003eAn iterator which returns a table containing a \u003ca href="/docs/3.2/en/automation/lua/modules/re/#match-tables"\u003eMatch Table\u003c/a\u003e for the full match (if it matched), followed by a\n\u003ca href="/docs/3.2/en/automation/lua/modules/re/#match-tables"\u003eMatch Table\u003c/a\u003e for each capturing subexpression in the pattern\n(if any).\u003c/dd\u003e\n\u003c/dl\u003e\n\u003ch3 id="resub"\u003ere.sub\u003c/h3\u003e\n\u003cp\u003eSynopsis: \u003ccode\u003eout_str, rep_count = re.sub(str, replace, pattern, max_count=0)\u003c/code\u003e{:.language-lua}\u003c/p\u003e\n\u003cp\u003eReplace each occurrence of \u003ccode\u003epattern\u003c/code\u003e in \u003ccode\u003estr\u003c/code\u003e with \u003ccode\u003ereplace\u003c/code\u003e.\u003c/p\u003e\n\u003cdl\u003e\n\u003cdt\u003e\u003cstrong\u003e\u003ccode\u003e@pattern\u003c/code\u003e\u003c/strong\u003e (\u003ccode\u003estring\u003c/code\u003e)\u003c/dt\u003e\n\u003cdd\u003ePattern to search for.\u003c/dd\u003e\n\u003cdt\u003e\u003cstrong\u003e\u003ccode\u003e@replace\u003c/code\u003e\u003c/strong\u003e (\u003ccode\u003estring\u003c/code\u003e or \u003ccode\u003efunction\u003c/code\u003e)\u003c/dt\u003e\n\u003cdd\u003eReplacement for matches. This may be either a string which is inserted, or a\nfunction which is called for each match.\n\u003cp\u003eIf \u003ccode\u003ereplace\u003c/code\u003e is a string, it may contain references to the matches. \u003ccode\u003e\u0026amp;\u003c/code\u003e and\n\u003ccode\u003e\\0\u003c/code\u003e are replaced with the full match, and \u003ccode\u003e\\\u0026lt;number\u0026gt;\u003c/code\u003e is replaced with the\nappropriate captured subexpression.\u003c/p\u003e\n\u003cp\u003eIf \u003ccode\u003ereplace\u003c/code\u003e is a function, it is called for either the entire match (if\nthere are no capturing subexpressions), or for each captured subexpression.\nIt is passed the match string, start index of the match, and end index of\nthe match. If it returns a string, the match is replaced with the return\nvalue. If it returns anything else, then the source string is left\nunchanged.\u003c/p\u003e\n\u003c/dd\u003e\n\u003cdt\u003e\u003cstrong\u003e\u003ccode\u003e@max_count\u003c/code\u003e\u003c/strong\u003e (\u003ccode\u003enumber\u003c/code\u003e)\u003c/dt\u003e\n\u003cdd\u003eIf greater than zero, the maximum number of replacements to make.\u003c/dd\u003e\n\u003cdt\u003e\u003cstrong\u003e\u003ccode\u003eout_str\u003c/code\u003e\u003c/strong\u003e (\u003ccode\u003estring\u003c/code\u003e)\u003c/dt\u003e\n\u003cdd\u003eThe input string, with replacements applied.\u003c/dd\u003e\n\u003cdt\u003e\u003cstrong\u003e\u003ccode\u003erep_count\u003c/code\u003e\u003c/strong\u003e (\u003ccode\u003enumber\u003c/code\u003e)\u003c/dt\u003e\n\u003cdd\u003eThe number of replacements that were made.\u003c/dd\u003e\n\u003c/dl\u003e\n\u003cp\u003e{::template name=\u0026ldquo;examplebox\u0026rdquo;}\nReplace all instances of \\k with \\kf:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-lua"\u003e\u0026gt;\u0026gt;\u0026gt; re.sub(\u0026quot;{\\\\k10}a{\\\\k15}b{\\\\k30}c\u0026quot;, \u0026quot;\\\\\\\\k\u0026quot;, \u0026quot;\\\\kf\u0026quot;)\r\n{\\kf10}a{\\kf15}b{\\kf30}c\r\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e{:/}\n{::template name=\u0026ldquo;examplebox\u0026rdquo;}\nReplace all instances of \\k and \\K with \\kf:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-lua"\u003e\u0026gt;\u0026gt;\u0026gt; re.sub(\u0026quot;{\\\\K10}a{\\\\K15}b{\\\\k30}c\u0026quot;, \u0026quot;\\\\\\\\k\u0026quot;, \u0026quot;\\\\kf\u0026quot;, re.ICASE)\r\n{\\kf10}a{\\kf15}b{\\kf30}c\r\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e{:/}\n{::template name=\u0026ldquo;examplebox\u0026rdquo;}\nAdd one to each \\k duration:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-lua"\u003efunction add_one(str)\r\n    return tostring(tonumber(str) + 1)\r\nend\r\n\u0026gt;\u0026gt;\u0026gt; re.sub(\u0026quot;{\\\\k10}a{\\\\k15}b{\\\\k30}c\u0026quot;, \u0026quot;\\\\\\\\k(\\[[:digit:]]+)\u0026quot;, add_one)\r\n{\\k11}a{\\k16}b{\\k31}c\r\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e{:/}\u003c/p\u003e\n\u003cp\u003e{::template name=\u0026ldquo;automation_navbox\u0026rdquo; /}\u003c/p\u003e\n'},{id:49,href:"/docs/3.2/en/automation/lua/modules/unicode/",title:"",description:null,content:'\u003cp\u003eThe \u003ccode\u003eunicode\u003c/code\u003e module for Automation 4 Lua contains various helper functions for working with UTF-8 encoded text.\u003c/p\u003e\n\u003ch2 id="usage"\u003eUsage\u003c/h2\u003e\n\u003cp\u003eImport this module with \u003ccode\u003eunicode = require \'aegisub.unicode\'\u003c/code\u003e{:.language-lua}.\u003c/p\u003e\n\u003ch2 id="unicodecharwidth"\u003eunicode.charwidth\u003c/h2\u003e\n\u003cp\u003eSynopsis: \u003ccode\u003ewidth = unicode.charwidth(instring, index=1)\u003c/code\u003e{:.language-lua}\u003c/p\u003e\n\u003cp\u003eReturns the number of bytes occupied by the UTF-8 encoded code points starting at position \u003ccode\u003eindex\u003c/code\u003e in \u003ccode\u003einstring\u003c/code\u003e.\nThe character pointed to is assumed to be a prefix byte (i.e. the first byte of the code points).\u003c/p\u003e\n\u003cp\u003eThe \u003ccode\u003eindex\u003c/code\u003e parameter is optional abd defaults to 1 (one) when left out, meaning the width of the first character in \u003ccode\u003einstring\u003c/code\u003e will be returned.\u003c/p\u003e\n\u003ch2 id="unicodechars"\u003eunicode.chars\u003c/h2\u003e\n\u003cp\u003eSynopsis: \u003ccode\u003efor char in unicode.chars(instring) do ... end\u003c/code\u003e{:.language-lua}\u003c/p\u003e\n\u003cp\u003eReturns an iterator function for looping over all code points in the given UTF-8 encoded string.\nFor each iteration of the loop, \u003ccode\u003echar\u003c/code\u003e will contain a string representing the next code point in the string. This string may be more than one byte long.\u003c/p\u003e\n\u003ch2 id="unicodelen"\u003eunicode.len\u003c/h2\u003e\n\u003cp\u003eSynopsis: \u003ccode\u003elength = unicode.len(instring)\u003c/code\u003e{:.language-lua}\u003c/p\u003e\n\u003cp\u003eDetermine the length in code points of the given UTF-8 encoded string.\u003c/p\u003e\n\u003cp\u003eBe aware that this function does not run in constant time, but in linear time (O(N)) proportional to the number of Unicode code points in \u003ccode\u003einstring\u003c/code\u003e.\u003c/p\u003e\n\u003ch2 id="unicodecodepoint"\u003eunicode.codepoint\u003c/h2\u003e\n\u003cp\u003eSynopsis: \u003ccode\u003eval = unicode.codepoint(instring)\u003c/code\u003e{:.language-lua}\u003c/p\u003e\n\u003cp\u003eRead the first unicode codepoint from \u003ccode\u003einstring\u003c/code\u003e.\u003c/p\u003e\n\u003ch2 id="unicodeto_upper_case"\u003eunicode.to_upper_case\u003c/h2\u003e\n\u003cp\u003eSynopsis: \u003ccode\u003eupper = unicode.to_upper_case(instring)\u003c/code\u003e{:.language-lua}\u003c/p\u003e\n\u003cp\u003eConvert a string to upper case.\nThis function handles accents, non-latin scripts, and the like.\u003c/p\u003e\n\u003ch2 id="unicodeto_lower_case"\u003eunicode.to_lower_case\u003c/h2\u003e\n\u003cp\u003eSynopsis: \u003ccode\u003elower = unicode.to_lower_case(instring)\u003c/code\u003e{:.language-lua}\u003c/p\u003e\n\u003cp\u003eConvert a string to lower case.\nThis function handles accents, non-latin scripts, and the like.\u003c/p\u003e\n\u003ch2 id="unicodeto_fold_case"\u003eunicode.to_fold_case\u003c/h2\u003e\n\u003cp\u003eSynopsis: \u003ccode\u003efolded = unicode.to_fold_case(instring)\u003c/code\u003e{:.language-lua}\u003c/p\u003e\n\u003cp\u003eConvert a string to fold case.\nThis is similar to lower case, but is locale-insensitive and gives better results for case-insensitive comparisons.\u003c/p\u003e\n\u003cp\u003e{::template name=\u0026ldquo;automation_navbox\u0026rdquo; /}\u003c/p\u003e\n'},{id:50,href:"/docs/3.2/en/automation/lua/modules/util/",title:"",description:null,content:'\u003cp\u003eThe Automation 4 Lua include file \u003ccode\u003eutils.lua\u003c/code\u003e contains various support functions to aid writing Lua scripts.\nThere is no general theme for the file.\u003c/p\u003e\n\u003ch2 id="usage"\u003eUsage\u003c/h2\u003e\n\u003cp\u003eImport this module with \u003ccode\u003eutil = require \'aegisub.util\'\u003c/code\u003e{:.language-lua}.\u003c/p\u003e\n\u003ch2 id="table-functions"\u003eTable functions\u003c/h2\u003e\n\u003cp\u003eDuplicating tables in various ways is a common task.\n\u003ccode\u003eutil\u003c/code\u003e provides some functions to handle the most common cases.\u003c/p\u003e\n\u003ch3 id="copy"\u003ecopy\u003c/h3\u003e\n\u003cp\u003eSynopsis: \u003ccode\u003enewtable = util.copy(oldtable)\u003c/code\u003e{:.language-lua}\u003c/p\u003e\n\u003cp\u003eMakes a shallow copy of the table passed as parameter.\nShallow here means that it does not dive into contained tables and copy those as well.\nFor example, if \u003ccode\u003eoldtable.st\u003c/code\u003e refers to a table, \u003ccode\u003enewtable.st\u003c/code\u003e will refer to the same table, and changes made to \u003ccode\u003enewtable.st\u003c/code\u003e will also be reflected in \u003ccode\u003eoldtable.st\u003c/code\u003e and vice versa.\u003c/p\u003e\n\u003ch3 id="deep_copy"\u003edeep_copy\u003c/h3\u003e\n\u003cp\u003eSynopsis: \u003ccode\u003enewtable = util.deep_copy(oldtable)\u003c/code\u003e{:.language-lua}\u003c/p\u003e\n\u003cp\u003eMakes a deep copy of the table passed as parameter.\nWhile this function attempts to handle circular references and not do infinite recursion on them, it might not work in all cases.\nYou will rarely need to use this function.\nIf you think you need to do a deep copy, consider your task an extra time.\u003c/p\u003e\n\u003ch2 id="colour-functions"\u003eColour functions\u003c/h2\u003e\n\u003cp\u003eIt is often useful to do various transformations on colour data. Several\nfunctions for this are included.\u003c/p\u003e\n\u003ch3 id="ass_color"\u003eass_color\u003c/h3\u003e\n\u003cp\u003eSynopsis: \u003ccode\u003ecolorstring = util.ass_color(r, g, b)\u003c/code\u003e{:.language-lua}\u003c/p\u003e\n\u003cp\u003eMakes an ASS colour string in the form \u003ccode\u003e\u0026amp;HBBGGRR\u003c/code\u003e from the given \u003ccode\u003er\u003c/code\u003e, \u003ccode\u003eg\u003c/code\u003e and \u003ccode\u003eb\u003c/code\u003e arguments.\u003c/p\u003e\n\u003cp\u003eWarning: The arguments are not checked for range.\nValues outside the 0..255 range will produce garbage output.\u003c/p\u003e\n\u003ch3 id="ass_alpha"\u003eass_alpha\u003c/h3\u003e\n\u003cp\u003eSynopsis: \u003ccode\u003ealphastring = util.ass_alpha(a)\u003c/code\u003e{:.language-lua}\u003c/p\u003e\n\u003cp\u003eMakes an ASS alpha string in the form \u003ccode\u003e\u0026amp;HAA\u0026amp;\u003c/code\u003e from the given \u003ccode\u003ea\u003c/code\u003e argument.\u003c/p\u003e\n\u003cp\u003eDoes not check input range.\u003c/p\u003e\n\u003ch3 id="ass_style_color"\u003eass_style_color\u003c/h3\u003e\n\u003cp\u003eSynopsis: \u003ccode\u003ecolorstring = util.ass_style_color(r, g, b, a)\u003c/code\u003e{:.language-lua}\u003c/p\u003e\n\u003cp\u003eMakes an ASS colour string suitable for use in Style definitions, i.e. in format \u003ccode\u003e\u0026amp;HAABBGGRR\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eDoes not check input range.\u003c/p\u003e\n\u003ch3 id="extract_color"\u003eextract_color\u003c/h3\u003e\n\u003cp\u003eSynopsis: \u003ccode\u003er, g, b, a = util.extract_color(colorstring)\u003c/code\u003e{:.language-lua}\u003c/p\u003e\n\u003cp\u003eExtracts colour components from a colour string. Several formats of colour strings are recognised:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eStyle definition: \u003ccode\u003e\u0026amp;HAABBGGRR\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eInline override: \u003ccode\u003e\u0026amp;HBBGGRR\u0026amp;\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eAlpha override: \u003ccode\u003e\u0026amp;HAA\u0026amp;\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eHTML with alpha: \u003ccode\u003e#RRGGBBAA\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eNote that this function always returns four numbers when passed a valid colour string.\nUnused values (depends on the format of the colour string) are assigned 0 (zero).\nIf an unrecognised colour string is passed, \u003ccode\u003enil\u003c/code\u003e is returned.\u003c/p\u003e\n\u003cp\u003e{::template name=\u0026ldquo;examplebox\u0026rdquo;}\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-lua"\u003er, g, b, a = extract_color(\u0026quot;\u0026amp;H7F\u0026amp;\u0026quot;)\r\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003ccode\u003er\u003c/code\u003e, \u003ccode\u003eg\u003c/code\u003e, and \u003ccode\u003eb\u003c/code\u003e will be 0; \u003ccode\u003ea\u003c/code\u003e will be 127.\n{:/}\u003c/p\u003e\n\u003ch3 id="alpha_from_style"\u003ealpha_from_style\u003c/h3\u003e\n\u003cp\u003eSynopsis: \u003ccode\u003ealphastring = util.alpha_from_style(coloralphastring)\u003c/code\u003e{:.language-lua}\u003c/p\u003e\n\u003cp\u003eReturns the alpha part of a colour string, as an alpha override string, i.e. \u003ccode\u003e\u0026amp;HAA\u0026amp;\u003c/code\u003e format.\nThis function is a composition of \u003ccode\u003eextract_color\u003c/code\u003e and \u003ccode\u003eass_alpha\u003c/code\u003e.\u003c/p\u003e\n\u003ch3 id="color_from_style"\u003ecolor_from_style\u003c/h3\u003e\n\u003cp\u003eSynopsis: \u003ccode\u003ecolorstring = util.color_from_style(coloralphastring)\u003c/code\u003e{:.language-lua}\u003c/p\u003e\n\u003cp\u003eReturns the colour part of a colour string, as a colour override string, i.e. \u003ccode\u003e\u0026amp;HBBGGRR\u0026amp;\u003c/code\u003e format.\nThis function is a composition of \u003ccode\u003eextract_color\u003c/code\u003e and \u003ccode\u003eass_color\u003c/code\u003e.\u003c/p\u003e\n\u003ch3 id="hsv_to_rgb"\u003eHSV_to_RGB\u003c/h3\u003e\n\u003cp\u003eSynopsis: \u003ccode\u003er, g, b = util.HSV_to_RGB(h, s, v)\u003c/code\u003e{:.language-lua}\u003c/p\u003e\n\u003cp\u003eTransforms a colour given in Hue, Saturation, Value space into Red, Green, Blue space.\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eh\u003c/code\u003e is given in degrees.\nThe nominal range is 0..359; values outside this range will be translated into it.\nInput range of \u003ccode\u003es\u003c/code\u003e and \u003ccode\u003ev\u003c/code\u003e are 0..1.\nThese are not range checked.\nOutput range of \u003ccode\u003er\u003c/code\u003e, \u003ccode\u003eg\u003c/code\u003e and \u003ccode\u003eb\u003c/code\u003e are 0..255.\u003c/p\u003e\n\u003ch2 id="string-functions"\u003eString functions\u003c/h2\u003e\n\u003cp\u003eBecause the Lua standard \u003ccode\u003estring\u003c/code\u003e library is fairly limited, a few additional helper functions are provided.\nSee also \u003ca href="/docs/3.2/en/automation/lua/modules/unicode/"\u003eunicode\u003c/a\u003e.\u003c/p\u003e\n\u003ch3 id="stringtrim"\u003estring.trim\u003c/h3\u003e\n\u003cp\u003eSynopsis: \u003ccode\u003eoutstring = util.trim(instring)\u003c/code\u003e{:.language-lua}\u003c/p\u003e\n\u003cp\u003eRemoves all space characters at the start and end of the input string, and returns the transformed string.\u003c/p\u003e\n\u003cp\u003eWarning: This function is not UTF-8 safe.\nIt uses the Lua regex \u003ccode\u003e%s\u003c/code\u003e class to match spaces, which in some legacy encodings will result in it also matching some prefix bytes in UTF-8 encoded text.\u003c/p\u003e\n\u003ch3 id="stringheadtail"\u003estring.headtail\u003c/h3\u003e\n\u003cp\u003eSynopsis: \u003ccode\u003ehead, tail = util.headtail(instring)\u003c/code\u003e{:.language-lua}\u003c/p\u003e\n\u003cp\u003eSplits a string by first space-sequence into a \u0026ldquo;head\u0026rdquo; and a \u0026ldquo;tail\u0026rdquo;, similar to the handling of linked lists in several functional languages.\u003c/p\u003e\n\u003cp\u003eIf \u003ccode\u003einstring\u003c/code\u003e does not contain any space characters it returns \u003ccode\u003einstring, \u0026quot;\u0026quot;\u003c/code\u003e.\u003c/p\u003e\n\u003ch3 id="stringwords"\u003estring.words\u003c/h3\u003e\n\u003cp\u003eSynopsis: \u003ccode\u003efor word in util.words(instring) do ... end\u003c/code\u003e{:.language-lua}\u003c/p\u003e\n\u003cp\u003eReturns an iterator function for use in a \u003ccode\u003efor\u003c/code\u003e loop, to loop over all the words in the string using \u003ccode\u003estring.headtail\u003c/code\u003e semantics.\u003c/p\u003e\n\u003ch2 id="numeric-functions"\u003eNumeric functions\u003c/h2\u003e\n\u003cp\u003eFunctions to handle various operations on numbers.\u003c/p\u003e\n\u003ch3 id="clamp"\u003eclamp\u003c/h3\u003e\n\u003cp\u003eSynopsis: \u003ccode\u003eoutval = util.clamp(inval, min, max)\u003c/code\u003e{:.language-lua}\u003c/p\u003e\n\u003cp\u003eClamps \u003ccode\u003einval\u003c/code\u003e to be in range \u003ccode\u003emin\u003c/code\u003e..\u003ccode\u003emax\u003c/code\u003e.\u003c/p\u003e\n\u003ch3 id="interpolate"\u003einterpolate\u003c/h3\u003e\n\u003cp\u003eSynopsis: \u003ccode\u003eoutval = util.interpolate(t, a, b)\u003c/code\u003e{:.language-lua}\u003c/p\u003e\n\u003cp\u003eInterpolates between \u003ccode\u003ea\u003c/code\u003e and \u003ccode\u003eb\u003c/code\u003e.\n\u003ccode\u003et\u003c/code\u003e is the time variable in range 0..1.\nValues outside this range are clamped.\u003c/p\u003e\n\u003ch3 id="interpolate_color"\u003einterpolate_color\u003c/h3\u003e\n\u003cp\u003eSynopsis: \u003ccode\u003eoutcolor = util.interpolate_color(t, color1, color2)\u003c/code\u003e{:.language-lua}\u003c/p\u003e\n\u003cp\u003eInterpolate between \u003ccode\u003ecolor1\u003c/code\u003e and \u003ccode\u003ecolor2\u003c/code\u003e with \u003ccode\u003et\u003c/code\u003e as time variable in range 0..1.\n\u003ccode\u003ecolor1\u003c/code\u003e, \u003ccode\u003ecolor2\u003c/code\u003e and \u003ccode\u003eoutcolor\u003c/code\u003e are colour strings, and \u003ccode\u003eoutcolour\u003c/code\u003e will be in colour override format.\u003c/p\u003e\n\u003ch3 id="interpolate_alpha"\u003einterpolate_alpha\u003c/h3\u003e\n\u003cp\u003eSynopsis: \u003ccode\u003eoutalpha = util.interpolate_alpha(t, alpha1, alpha2)\u003c/code\u003e{:.language-lua}\u003c/p\u003e\n\u003cp\u003eSimilar to \u003ccode\u003einterpolate_color\u003c/code\u003e, but interpolates alpha values instead.\nAlso works on colour strings, and will return an alpha override string.\u003c/p\u003e\n\u003cp\u003e{::template name=\u0026ldquo;automation_navbox\u0026rdquo; /}\u003c/p\u003e\n'},{id:51,href:"/docs/3.2/en/automation/lua/progress_reporting/",title:"",description:null,content:'\u003cp\u003eThere functions are used to report various status and progress back to the GUI\nwhile a script is running.\u003c/p\u003e\n\u003ch2 id="progress-reporting"\u003eProgress reporting\u003c/h2\u003e\n\u003cp\u003eA progress dialogue box is always shown when an Automation 4 Lua script is\nrunning. You can use these functions to control what is displayed in it.\u003c/p\u003e\n\u003ch3 id="aegisubprogressset"\u003eaegisub.progress.set\u003c/h3\u003e\n\u003cp\u003eSynopsis: \u003ccode\u003eaegisub.progress.set(percent)\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003eSet the position of the percent-done bar in the progress window.\u003c/p\u003e\n\u003cdl\u003e\n\u003cdt\u003e\u003cstrong\u003e\u003ccode\u003epercent\u003c/code\u003e\u003c/strong\u003e (\u003ccode\u003enumber\u003c/code\u003e)\u003c/dt\u003e\n\u003cdd\u003eNumber from 0 to 100.\u003c/dd\u003e\n\u003c/dl\u003e\n\u003ch3 id="aegisubprogresstask"\u003eaegisub.progress.task\u003c/h3\u003e\n\u003cp\u003eSynopsis: \u003ccode\u003eaegisub.progress.task(msg, ...)\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003eSet the \u0026ldquo;task\u0026rdquo; text in the progress window, which is the small text below the\nprogress bar showing what the script is currently doing.\u003c/p\u003e\n\u003cdl\u003e\n\u003cdt\u003e\u003cstrong\u003e\u003ccode\u003emsg\u003c/code\u003e\u003c/strong\u003e (\u003ccode\u003estring\u003c/code\u003e)\u003c/dt\u003e\n\u003cdd\u003eA format string specifying the message. See the Lua standard string library\n\u003ccode\u003estring.format\u003c/code\u003e function for details on format strings.\u003c/dd\u003e\n\u003cdt\u003e\u003cstrong\u003e\u003ccode\u003e...\u003c/code\u003e\u003c/strong\u003e\u003c/dt\u003e\n\u003cdd\u003eParameters to the format string.\u003c/dd\u003e\n\u003c/dl\u003e\n\u003ch3 id="aegisubprogresstitle"\u003eaegisub.progress.title\u003c/h3\u003e\n\u003cp\u003eSynopsis: \u003ccode\u003eaegisub.progress.title(title, ...)\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003eSet the title of the progress window, which is is the large text displayed\nabove the progress bar. This text should usually not change while the script\nis running. By default this is set to the name of the macro running.\u003c/p\u003e\n\u003cdl\u003e\n\u003cdt\u003e\u003cstrong\u003e\u003ccode\u003etitle\u003c/code\u003e\u003c/strong\u003e (\u003ccode\u003estring\u003c/code\u003e)\u003c/dt\u003e\n\u003cdd\u003eA format string specifying the title. See the Lua standard string library\n\u003ccode\u003estring.format\u003c/code\u003e function for details on format strings.\n\u003cstrong\u003e\u003ccode\u003e...\u003c/code\u003e\u003c/strong\u003e\u003c/dd\u003e\n\u003cdd\u003eParameters to the format string.\u003c/dd\u003e\n\u003c/dl\u003e\n\u003ch3 id="aegisubprogressis_cancelled"\u003eaegisub.progress.is_cancelled\u003c/h3\u003e\n\u003cp\u003eSynopsis: \u003ccode\u003ecancelled = aegisub.progress.is_cancelled()\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003eTells whether the user has clicked on the Cancel button.\u003c/p\u003e\n\u003cp\u003eYou should call this function regularly during long operations, and if it\u0026rsquo;s\ntrue call \u003ca href="/docs/3.2/en/automation/lua/miscellaneous_apis/#aegisub.cancel"\u003e\u003ccode\u003eaegisub.cancel()\u003c/code\u003e\u003c/a\u003e to\nrollback all changes and immediately end execution of the script.\u003c/p\u003e\n\u003cdl\u003e\n\u003cdt\u003e\u003cstrong\u003e\u003ccode\u003ecancelled\u003c/code\u003e\u003c/strong\u003e (\u003ccode\u003eboolean\u003c/code\u003e)\u003c/dt\u003e\n\u003cdd\u003e\u003ccode\u003efalse\u003c/code\u003e if the user has not clicked the Cancel button, \u003ccode\u003etrue\u003c/code\u003e if the user has\nclicked Cancel. If \u003ccode\u003eis_cancelled\u003c/code\u003e returns \u003ccode\u003etrue\u003c/code\u003e all subsequent calls to it in\nthe current execution will also return \u003ccode\u003etrue\u003c/code\u003e.\u003c/dd\u003e\n\u003c/dl\u003e\n\u003ch2 id="debug-output"\u003eDebug output\u003c/h2\u003e\n\u003cp\u003eThe primary support for script debugging in Automation 4 Lua is through sending\ndebug messages to the message log integrated in the progress window.\u003c/p\u003e\n\u003cp\u003eIf a script shows a debug or other message, the progress window stays open\nafter the script has finished running until the user clicks the Close button.\nPlease consider whether it\u0026rsquo;s really that important that the user sees your\nmessages. Blocking other input to the program to display something that might\nbe irrelevant to the user can create a bad experience.\u003c/p\u003e\n\u003ch3 id="aegisubdebugout"\u003eaegisub.debug.out\u003c/h3\u003e\n\u003cp\u003eSynopsis:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eaegisub.debug.out(msg, ...)\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eaegisub.debug.out(level, msg, ...)\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eaegisub.log(msg, ...)\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eaegisub.log(level, msg, ...)\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThe two names are synonymous; you can use either name depending on your\npreference.\u003c/p\u003e\n\u003cp\u003eSends a message to the message log, optionally with a specific severity level.\nThe user can control in Aegisub\u0026rsquo;s options the highest level messages that will\nbe shown.\u003c/p\u003e\n\u003cdl\u003e\n\u003cdt\u003e\u003cstrong\u003e\u003ccode\u003elevel\u003c/code\u003e\u003c/strong\u003e (\u003ccode\u003enumber\u003c/code\u003e)\u003c/dt\u003e\n\u003cdd\u003eSeverity level of the message. This parameter is optional. If you leave it\nout (by entirely skipping it) the message will always be shown.\u003c/dd\u003e\n\u003cdt\u003e\u003cstrong\u003e\u003ccode\u003emsg\u003c/code\u003e\u003c/strong\u003e (\u003ccode\u003estring\u003c/code\u003e)\u003c/dt\u003e\n\u003cdd\u003eA format string specifying the message. See the Lua standard string library\n\u003ccode\u003estring.format\u003c/code\u003e function for details on format strings.\u003c/dd\u003e\n\u003cdt\u003e\u003cstrong\u003e\u003ccode\u003e...\u003c/code\u003e\u003c/strong\u003e\u003c/dt\u003e\n\u003cdd\u003eParameters to the format string.\u003c/dd\u003e\n\u003c/dl\u003e\n\u003cp\u003eThe following severity levels are suggested:\u003c/p\u003e\n\u003cdl\u003e\n\u003cdt\u003e0: \u0026ldquo;fatal\u0026rdquo;\u003c/dt\u003e\n\u003cdd\u003eSomething really bad happened and the script can\u0026rsquo;t continue. Level 0 messages\nare always shown. Note that Aegisub does not automatically terminate your\nscript. Call \u003ca href="/docs/3.2/en/automation/lua/miscellaneous_apis/#aegisub.cancel"\u003e\u003ccode\u003eaegisub.cancel()\u003c/code\u003e\u003c/a\u003e\nafterwards if you want it to.\u003c/dd\u003e\n\u003cdt\u003e1: \u0026ldquo;error\u0026rdquo;\u003c/dt\u003e\n\u003cdd\u003eA real error occurred so the user should expect something to have gone wrong\neven though you tried to recover. A fatal error might happen later.\u003c/dd\u003e\n\u003cdt\u003e2: \u0026ldquo;warning\u0026rdquo;\u003c/dt\u003e\n\u003cdd\u003eIt looks like something is wrong and the user ought to know because it might\nmean something needs to be fixed.\u003c/dd\u003e\n\u003cdt\u003e3: \u0026ldquo;hint\u0026rdquo;\u003c/dt\u003e\n\u003cdd\u003eA tip or otherwise on how the user can improve things, or hints that\nsomething might cause a warning or error later on.\u003c/dd\u003e\n\u003cdt\u003e4: \u0026ldquo;debug\u0026rdquo;\u003c/dt\u003e\n\u003cdd\u003eInformation meant to help fix errors in the script, such as dumps of variable\ncontents.\u003c/dd\u003e\n\u003cdt\u003e5: \u0026ldquo;trace\u0026rdquo;\u003c/dt\u003e\n\u003cdd\u003eExtremely verbose information about what the script is doing, such as a\nmessage for each single step done with lots of variable dumps.\u003c/dd\u003e\n\u003c/dl\u003e\n\u003cp\u003e{::template name=\u0026ldquo;automation_navbox\u0026rdquo; /}\u003c/p\u003e\n'},{id:52,href:"/docs/3.2/en/automation/lua/registration/",title:"",description:null,content:'\u003cp\u003e\u003cstrong\u003eRegistration\u003c/strong\u003e covers presenting your \u003ca href="/docs/3.2/en/automation/lua/"\u003eAutomation 4 Lua\u003c/a\u003e\nscript to Aegisub, providing information about it and registering what\n\u003cem\u003efeatures\u003c/em\u003e it provides.\u003c/p\u003e\n\u003ch2 id="features-explained"\u003eFeatures explained\u003c/h2\u003e\n\u003cp\u003eOne of the primary concepts in Automation 4 is the \u003cem\u003efeature\u003c/em\u003e. A feature is\nsomething a script makes available for Aegisub to call back in response to a\nuser action.\u003c/p\u003e\n\u003cp\u003eA feature is not a plain callback. Rather, it\u0026rsquo;s usually a set of several\ncallback functions as well as some information on how they should be\npresented to the user in the GUI.\u003c/p\u003e\n\u003cp\u003eOne feature is the \u003cstrong\u003emacro\u003c/strong\u003e. A macro is presented as an item in the\nAutomation menu. A macro has a name (the title show in the menu), a\ndescription (the text shown on the status bar when hovering over the menu\nitem), a processing function (the function called when the user selects the\nmenu item) and an optional validation function (determines whether the macro\ncan even do any work in the current state.)\u003c/p\u003e\n\u003cp\u003eAnother feature is the \u003cstrong\u003eexport filter\u003c/strong\u003e. The export filter is presented in\nthe \u003ca href="/docs/3.2/en/exporting/"\u003eExport\u003c/a\u003e dialogue and can be applied during an export\noperation. Export filters also have a name, description, processing function\nand then an optional configuration panel provider. The configuration panel\nprovider is a function that returns a configuration dialogue definition\nstructure which will be displayed in the Export dialogue when the export\nfilter is enabled. The settings filled into the configuration panel are\npassed to the processing function when it is run.\u003c/p\u003e\n\u003ch2 id="script-information-globals"\u003eScript information globals\u003c/h2\u003e\n\u003cp\u003eA script can set a few global variables to provide metadata about the script\nto Aegisub. The information given with these variables are displayed in the\n\u003ca href="/docs/3.2/en/automation/manager/"\u003eAutomation Manager\u003c/a\u003e dialogue and the Script Info dialogue.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003escript_name\u003c/strong\u003e (string) - Name of the script. This should be short.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003escript_description\u003c/strong\u003e (string) - Description of the purpose of the\nscript. Shouldn\u0026rsquo;t be too long either.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003escript_version\u003c/strong\u003e (string or number) - Version number/name of the script.\nThis is freeform; no specific meaning is assigned to this.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003escript_author\u003c/strong\u003e (string) - Author credits for the script.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eAll of these are optional; a script does not have to provide any of these.\nIf no script name is given, the file name is used instead for display\npurposes.\u003c/p\u003e\n\u003ch2 id="registration-functions"\u003eRegistration functions\u003c/h2\u003e\n\u003cp\u003eThe registration functions are the functions provided by Automation 4 Lua\nyou can call to make a feature available to Aegisub. You will usually call\nthese in the top level, at the very bottom of your script.\u003c/p\u003e\n\u003ch3 id="aegisubregister_macro"\u003eaegisub.register_macro\u003c/h3\u003e\n\u003cp\u003eSynopsis: \u003ccode\u003eaegisub.register_macro(name, description, processing_function, validation_function, is_active_function)\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003eRegister a macro feature.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003ename\u003c/strong\u003e (string) - The name displayed on the Automation menu. This should\nbe very short, try three words or less, and should be in command\ntense.\u003c/p\u003e\n\u003cp\u003eIf forward slashes (/) are included in the name, the name will be\nsplit on the slash, with the portion before the slash used as the name\nof the submenu to place the macro in. For example, if you register a\nmacro named \u0026ldquo;Foo/Bar\u0026rdquo; and a macro named \u0026ldquo;Foo/Baz\u0026rdquo;, the automation menu\nwill have a submenu named \u0026ldquo;Foo\u0026rdquo; with \u0026ldquo;Bar\u0026rdquo; and \u0026ldquo;Baz\u0026rdquo; entries.\u003c/p\u003e\n\u003cp\u003eMenus can be nested to whatever depth is supported by the OS, but\nnesting more than one level deep is unlikely to be a good idea.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003edescription\u003c/strong\u003e (string) - The description displayed on the status bar\nwhen the user hovers the mouse over the menu item. This should be a\nconcise description of what the macro does. Try to keep it at most 60\ncharacters.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eprocessing_function\u003c/strong\u003e (function) - The function that is called when the\nuser selects the menu item. This must be a function with the \u003ca href="/docs/3.2/en/automation/lua/registration/#macroprocessingfunction"\u003emacro processing function API\u003c/a\u003e.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003evalidation_function\u003c/strong\u003e (function, optional) - This function is called to\ndetermine whether the menu item should be available to the user or not.\n(Grayed out or not.) If no validation function is provided the macro is\nalways available. This function must follow the \u003ca href="/docs/3.2/en/automation/lua/registration/#macrovalidationfunction"\u003emacro validation function API\u003c/a\u003e.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eis_active_function\u003c/strong\u003e (function, optional) - This function is called to\ndetermine whether the menu item should be shown with a check mark next to it.\nIf no function is provided the macro is never checked. This function uses the\nsame API as validation functions, and all of the same caveats apply.\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id="aegisubregister_filter"\u003eaegisub.register_filter\u003c/h3\u003e\n\u003cp\u003eSynopsis: \u003ccode\u003eaegisub.register_filter(name, description, priority, processing_function, configuration_panel_provider)\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003eRegister an export filter feature.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003ename\u003c/strong\u003e (string) - The name displayed in the export filters list. The\nname should be rather short.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003edescription\u003c/strong\u003e (string) - The description displayed in the description\nbox when the user highlights the export filter in the Export dialogue.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003epriority\u003c/strong\u003e (number) - Determines the initial ordering of export filter\napplication. Filters with higher priority are applied earlier than filters\nwith lower priority. The user can change the filter application order in\nthe Export dialogue. Priorities of the Aegisub built in export filters:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eTransform Framerate = 1000 (karaoke effects should have higher priority\nthan this)\u003c/li\u003e\n\u003cli\u003eClean Script Info = 0 (your script might depend on the information\ncleaned by this)\u003c/li\u003e\n\u003cli\u003eFix Styles = -5000 (should almost always run last)\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eprocessing_function\u003c/strong\u003e (function) - The function that is called when the\nuser initiates the export operation. This must be a function with the\n\u003ca href="/docs/3.2/en/automation/lua/registration/#exportfilterprocessingfunction"\u003eexport filter processing function API\u003c/a\u003e.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003econfiguration_panel_provider\u003c/strong\u003e (function, optional) - A function that\nprovides a configuration panel for the export filter. If this function is\nnot provided the export filter will not have a configuration panel. This\nfunction must follow the \u003ca href="/docs/3.2/en/automation/lua/registration/#exportfilterconfigurationpanelprovider"\u003eexport filter configuration panel provider API\u003c/a\u003e.\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id="feature-callback-functions"\u003eFeature callback functions\u003c/h2\u003e\n\u003cp\u003eThese are the callback functions you provide to the registration functions.\u003c/p\u003e\n\u003ch3 id="macro-processing-function"\u003eMacro processing function\u003c/h3\u003e\n\u003cp\u003eSignature: \u003ccode\u003eprocess_macro(subtitles, selected_lines, active_line)\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003eMacro processing functions passed to\n\u003ca href="/docs/3.2/en/automation/lua/registration/#aegisub.register_macro"\u003e\u003ccode\u003eaegisub.register_macro\u003c/code\u003e\u003c/a\u003e\nmust have this signature. The name \u003ccode\u003eprocess_macro\u003c/code\u003e is a placeholder for your\nown function name.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003esubtitles\u003c/strong\u003e (user data) - The \u003ca href="/docs/3.2/en/automation/lua/subtitle_file_interface/"\u003esubtitles object\u003c/a\u003e you use to manipulate\nthe subtitles with.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eselected_lines\u003c/strong\u003e (table) - An array with indexes of the selected lines.\nThe values in this table are line indexes in the \u003cem\u003esubtitles\u003c/em\u003e object at its\ninitial state. Only \u003ccode\u003edialogue\u003c/code\u003e class lines can ever be selected.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eactive_line\u003c/strong\u003e (number) - The line that is currently available for\nediting in the subtitle editing area. This is an index into the\n\u003cem\u003esubtitles\u003c/em\u003e object. This line will usually also be selected, but this is\nnot a strict requirement.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003eReturn value:\u003c/strong\u003e\nThe macro processing function can return up to two values: a new\n\u003ccode\u003eselected_lines\u003c/code\u003e table containing indices of the lines to select after the\nmacro returns, and an index of the line to make the new \u003ccode\u003eactive_line\u003c/code\u003e. If\nset, the new active line index must be one of the lines in the new\n\u003ccode\u003eselected_lines\u003c/code\u003e table.\u003c/p\u003e\n\u003ch3 id="macro-validation-function"\u003eMacro validation function\u003c/h3\u003e\n\u003cp\u003eSignature: \u003ccode\u003evalidate_macro(subtitles, selected_lines, active_line)\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003eMacro validation functions passed to\n\u003ca href="/docs/3.2/en/automation/lua/registration/#aegisub.register_macro"\u003e\u003ccode\u003eaegisub.register_macro\u003c/code\u003e\u003c/a\u003e\nmust have this signature. The name \u003ccode\u003evalidate_macro\u003c/code\u003e is a placeholder for\nyour own function name.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eImportant, execution time:\u003c/strong\u003e Validation functions should always run very\nfast. Do as little work as possible inside this function, because it is run\nevery time the user pulls open the Automation menu, and every millisecond\nyou spend in \u003ccode\u003evalidate_macro\u003c/code\u003e is one millisecond delay in opening the menu.\nConsider that the user might have very large files open. Don\u0026rsquo;t block the UI.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003esubtitles\u003c/strong\u003e (user data) - The \u003ca href="/docs/3.2/en/automation/lua/subtitle_file_interface/"\u003esubtitles object\u003c/a\u003e for the current subtitle\nfile. This is \u003cstrong\u003eread-only\u003c/strong\u003e. You cannot modify the subtitles in the\nvalidation function, and attempting to do so will cause a run-time error.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eselected_lines\u003c/strong\u003e (table) - An array with indexes of the selected lines.\nThe values in this table are line indexes in the \u003cem\u003esubtitles\u003c/em\u003e object at its\ninitial state. Only \u003ccode\u003edialogue\u003c/code\u003e class lines can ever be selected.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eactive_line\u003c/strong\u003e (number) - The line that is currently available for\nediting in the subtitle editing area. This is an index into the\n\u003cem\u003esubtitles\u003c/em\u003e object.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003eReturn value:\u003c/strong\u003e\nBoolean, \u003ccode\u003etrue\u003c/code\u003e if the macro can run given the current\nstate of \u003cem\u003esubtitles\u003c/em\u003e, \u003cem\u003eselected_lines\u003c/em\u003e and \u003cem\u003eactive_line\u003c/em\u003e, \u003ccode\u003efalse\u003c/code\u003e if it can\nnot.\u003c/p\u003e\n\u003cp\u003eIn addition to the primary return value, the validation function can return\na string. If it does, the description of the macro is set to the string.\nThis is intended for reporting information to the user about why the macro\ncannot be run, but there may be more uses for it.\u003c/p\u003e\n\u003ch3 id="export-filter-processing-function"\u003eExport filter processing function\u003c/h3\u003e\n\u003cp\u003eSignature: \u003ccode\u003eprocess_filter(subtitles, settings)\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003eExport filter processing functions passed to\n\u003ca href="/docs/3.2/en/automation/lua/registration/#aegisub.register_filter"\u003e\u003ccode\u003eaegisub.register_filter\u003c/code\u003e\u003c/a\u003e\nmust have this signature. The name \u003ccode\u003eprocess_filter\u003c/code\u003e is a placeholder for\nyour own function name.\u003c/p\u003e\n\u003cp\u003eYou do not have to worry about undo issues with export filters. You always\nwork on a copy of the subtitle file.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003esubtitles\u003c/strong\u003e (user data) - The \u003ca href="/docs/3.2/en/automation/lua/subtitle_file_interface/"\u003esubtitles object\u003c/a\u003e you use to manipulate\nthe subtitles with. This is a copy of the open subtitles file, so\nmodifying this subtitles object does not modify the open file and will\nonly affect the exported file.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003esettings\u003c/strong\u003e (table) - Configuration settings entered into the\nconfiguration panel or an empty table if there is no configuration panel.\nSee the page on \u003ca href="/docs/3.2/en/automation/lua/dialogs/"\u003econfiguration dialogues\u003c/a\u003e for more information\non the format of this table.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003eReturn value:\u003c/strong\u003e\nNothing.\u003c/p\u003e\n\u003ch3 id="export-filter-configuration-panel-provider"\u003eExport filter configuration panel provider\u003c/h3\u003e\n\u003cp\u003eSignature: \u003ccode\u003eget_filter_configuration_panel(subtitles, old_settings)\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003eExport filter configuration panel providers passed to\n\u003ca href="/docs/3.2/en/automation/lua/registration/#aegisub.register_filter"\u003e\u003ccode\u003eaegisub.register_filter\u003c/code\u003e\u003c/a\u003e\nmust have this signature. The name \u003ccode\u003eget_filter_configuration_panel\u003c/code\u003e is a\nplaceholder for your own function name.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eImportant, execution time:\u003c/strong\u003e\nThis function is called automatically when\nthe user opens the Export dialogue, and Aegisub blocks until it returns with\na configuration panel. Consider that the user might have a very large file\nopen, and that every millisecond spent creating your configuration dialogue\nis one more millisecond the user has to wait for the Export dialogue to\nopen. Don\u0026rsquo;t block the UI.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003esubtitles\u003c/strong\u003e (user data) - The \u003ca href="/docs/3.2/en/automation/lua/subtitle_file_interface/"\u003esubtitles object\u003c/a\u003e for the current subtitle\nfile. This is \u003cstrong\u003eread-only\u003c/strong\u003e. You cannot modify the subtitles in the filter\nconfiguration provider. Attempting to modify the subtitles will cause a\nrun-time error.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eold_settings\u003c/strong\u003e (table) - Previous configuration settings entered into\nthe configuration panel, if any. When an Automation 4 export filter is\nrun, any configuration settings are automatically stored to the original\nfile. If any stored settings exist for this filter, they are passed as\n\u003cem\u003eold_settings\u003c/em\u003e so you can use them as a base for filling in defaults.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003eReturn value:\u003c/strong\u003e\nA configuration dialogue table. See the page on\n\u003ca href="/docs/3.2/en/automation/lua/dialogs/"\u003econfiguration dialogues\u003c/a\u003e for\nmore information on the format of this table.\u003c/p\u003e\n\u003cp\u003e{::template name=\u0026ldquo;automation_navbox\u0026rdquo; /}\u003c/p\u003e\n'},{id:53,href:"/docs/3.2/en/automation/lua/subtitle_file_interface/",title:"",description:null,content:'\u003cp\u003eThis page describes the \u003cstrong\u003esubtitle file interface\u003c/strong\u003e use in Automation 4 Lua\nscripts to manipulate subtitle files.\u003c/p\u003e\n\u003cp\u003eThere is one special object (the \u003cstrong\u003esubtitles\u003c/strong\u003e user data object) which has a\nnumber of functions, and a number of table formats defined.\u003c/p\u003e\n\u003ch2 id="the-subtitles-object"\u003eThe subtitles object\u003c/h2\u003e\n\u003cp\u003eMost Automation 4 Lua feature functions are passed a \u003cstrong\u003esubtitles object\u003c/strong\u003e when\ncalled. This object is used to obtain data from and manipulate the subtitles\nthe feature is being applied on.\u003c/p\u003e\n\u003cp\u003eA subtitles object can have two special properties depending on the context it\nis created for:\u003c/p\u003e\n\u003cdl\u003e\n\u003cdt\u003e\u003cstrong\u003eRead-only\u003c/strong\u003e\u003c/dt\u003e\n\u003cdd\u003eSome feature functions must not be allowed to modify the subtitle file at\nall. This includes for example \u003ca href="/docs/3.2/en/automation/lua/registration/#macrovalidationfunction"\u003emacro validation functions\u003c/a\u003e and \u003ca href="/docs/3.2/en/automation/lua/registration/#_export_filter_configuration_panel_provider"\u003eexport filter configuration panel providers\u003c/a\u003e,\nbecause this would be outside user expectations.\u003c/dd\u003e\n\u003cdt\u003e\u003cstrong\u003eAllow undo points\u003c/strong\u003e\u003c/dt\u003e\n\u003cdd\u003eOnly \u003ca href="/docs/3.2/en/automation/lua/registration/#macroprocessingfunction"\u003emacro processing functions\u003c/a\u003e can set undo\npoints, as it makes no sense to do so at any other time.\u003c/dd\u003e\n\u003c/dl\u003e\n\u003cp\u003eTo allow the most flexibility, the subtitles object represents a complete ASS\nformat file, line by line, including all meta-lines such as section headers.\u003c/p\u003e\n\u003cp\u003eThe subtitles object supports the following operations:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eRetrieve number of lines\u003c/li\u003e\n\u003cli\u003eRead line\u003c/li\u003e\n\u003cli\u003eAppend line (to end of file)\u003c/li\u003e\n\u003cli\u003eInsert line (at arbitrary position in file)\u003c/li\u003e\n\u003cli\u003eReplace line\u003c/li\u003e\n\u003cli\u003eDelete line\u003c/li\u003e\n\u003cli\u003eCreate undo point\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThese operations are described in detail below. In all operation synopses and\nexamples, \u003ccode\u003esubtitles\u003c/code\u003e is used for name of the subtitles object being operated\non.\u003c/p\u003e\n\u003ch3 id="retrieve-number-of-lines"\u003eRetrieve number of lines\u003c/h3\u003e\n\u003cp\u003eSynopsis:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003enum_lines = #subtitles\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003enum_lines = subtitles.n\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThis operation retrieves the total number of lines in the subtitle file\ncurrently. This number only changes by using the other operations on the\nsubtitle object. It cannot change spontaneously during the execution of a\nscript.\u003c/p\u003e\n\u003cp\u003eNote that this is not a constant-time lookup, but lua does cache the value if\nused in \u003ccode\u003efor i = 1, #subs\u003c/code\u003e.\u003c/p\u003e\n\u003cdl\u003e\n\u003cdt\u003e\u003cstrong\u003e\u003ccode\u003enum_lines\u003c/code\u003e\u003c/strong\u003e (\u003ccode\u003enumber\u003c/code\u003e)\u003c/dt\u003e\n\u003cdd\u003eNumber of lines in the subtitle file.\u003c/dd\u003e\n\u003c/dl\u003e\n\u003cp\u003eThe first syntax is the preferred one, per normal Lua 5.1 coding style.\u003c/p\u003e\n\u003ch3 id="read-line"\u003eRead line\u003c/h3\u003e\n\u003cp\u003eSynopsis: \u003ccode\u003eline = subtitles[i]\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003eThis retrieves the indexed line and creates a new table object with data about\nit.\u003c/p\u003e\n\u003cdl\u003e\n\u003cdt\u003e\u003cstrong\u003e\u003ccode\u003eline\u003c/code\u003e\u003c/strong\u003e (\u003ccode\u003etable\u003c/code\u003e)\u003c/dt\u003e\n\u003cdd\u003eTable with data about the retrieved line.\u003c/dd\u003e\n\u003cdt\u003e\u003cstrong\u003e\u003ccode\u003ei\u003c/code\u003e\u003c/strong\u003e (\u003ccode\u003enumber\u003c/code\u003e)\u003c/dt\u003e\n\u003cdd\u003eIndex into the subtitles file of the line number to retrieve. This is\none-based, i.e. the first line in the file has index 1.\u003c/dd\u003e\n\u003c/dl\u003e\n\u003cp\u003eAegisub internally stores the subtitle file as a linked list, which means that\nrandom access is slow, but sequential access is fast. While Automation 4 Lua\npresents the subtitles as if it was an array, it internally maintains a cursor\nused to optimise for sequential access. It is faster to access a line with an\nindex close to the one you last accessed than to access one further away. It is\nalways fast to access lines near the beginning or end of the file.\u003c/p\u003e\n\u003ch3 id="append-line"\u003eAppend line\u003c/h3\u003e\n\u003cp\u003eSynopsis:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003esubtitles[0] = line\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003esubtitles.append(line)\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003esubtitles.append(line1, line2, ...)\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eAppend one or more lines to the end of the appropriate section of the subtitles\nfile. If the section does not exist, it will be created. In the first syntax, it\nis the number 0 (zero) used for index. (Setting index 0 causes an append\noperation.)\u003c/p\u003e\n\u003cp\u003eThe third syntax supports appending multiple lines with one single operation.\u003c/p\u003e\n\u003cdl\u003e\n\u003cdt\u003e\u003cstrong\u003e\u003ccode\u003eline\u003c/code\u003e\u003c/strong\u003e (\u003ccode\u003etable\u003c/code\u003e)\u003c/dt\u003e\n\u003cdd\u003eThe line object table to append to the subtitles file.\u003c/dd\u003e\n\u003c/dl\u003e\n\u003cp\u003eThe latter function-call syntax is preferred for readability. The table index\nsetting syntax is slightly faster.\u003c/p\u003e\n\u003cp\u003eAppending a line does not move the cursor otherwise used to optimise sequential\naccess.\u003c/p\u003e\n\u003ch3 id="insert-line"\u003eInsert line\u003c/h3\u003e\n\u003cp\u003eSynopsis:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003esubtitles[-i] = line\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003esubtitles.insert(i, line)\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003esubtitles.insert(i, line1, line2, ...)\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eInserts one or more lines into the subtitles file before the numbered line. In\nthe first syntax, you supply a negative index. E.g. to insert a line before\nline 5 you supply index -5 (negative 5.)\u003c/p\u003e\n\u003cp\u003eInserting lines will move lines after the inserted lines to move down in index,\nsuch that old indexes will no longer be valid.\u003c/p\u003e\n\u003cp\u003eInserting lines into the wrong section of the subtitle file has undefined\nresults, and may break in weird ways.\u003c/p\u003e\n\u003cdl\u003e\n\u003cdt\u003e\u003cstrong\u003e\u003ccode\u003ei\u003c/code\u003e\u003c/strong\u003e (\u003ccode\u003enumber\u003c/code\u003e)\u003c/dt\u003e\n\u003cdd\u003eIndex to insert before.\u003c/dd\u003e\n\u003cdt\u003e\u003cstrong\u003e\u003ccode\u003eline\u003c/code\u003e\u003c/strong\u003e (\u003ccode\u003etable\u003c/code\u003e)\u003c/dt\u003e\n\u003cdd\u003eThe line object table to insert into the subtitles file.\u003c/dd\u003e\n\u003c/dl\u003e\n\u003cp\u003eThe latter function-call syntax is preferred for readability. The table index\nsetting syntax is slightly faster.\u003c/p\u003e\n\u003cp\u003eInserting lines uses the list cursor and will move it.\u003c/p\u003e\n\u003ch3 id="replace-line"\u003eReplace line\u003c/h3\u003e\n\u003cp\u003eSynopsis: \u003ccode\u003esubtitles[i] = line\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003eDelete the indexed line and insert the given line in its stead.\u003c/p\u003e\n\u003cdl\u003e\n\u003cdt\u003e\u003cstrong\u003e\u003ccode\u003ei\u003c/code\u003e\u003c/strong\u003e (\u003ccode\u003enumber\u003c/code\u003e)\u003c/dt\u003e\n\u003cdd\u003eThe line index to replace at.\u003c/dd\u003e\n\u003cdt\u003e\u003cstrong\u003e\u003ccode\u003eline\u003c/code\u003e\u003c/strong\u003e (\u003ccode\u003etable\u003c/code\u003e)\u003c/dt\u003e\n\u003cdd\u003eThe line object table to replace with.\u003c/dd\u003e\n\u003c/dl\u003e\n\u003cp\u003eReplacing lines uses the list cursor and will move it.\u003c/p\u003e\n\u003cp\u003eReplacing lines with lines of a different type has undefined results, and may\nbreak in weird ways.\u003c/p\u003e\n\u003ch3 id="delete-line"\u003eDelete line\u003c/h3\u003e\n\u003cp\u003eSynopsis:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003esubtitles[i] = nil\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003esubtitles.delete(i)\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003esubtitles.delete(i1, i2, ...)\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003esubtitles.delete({i1, i2, ...})\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003esubtitles.deleterange(first, last)\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eRemove one or more from the subtitles file. All lines after the deleted line(s)\nwill move up to fill the deleted indexes, so old indexes will no longer be\nvalid.\u003c/p\u003e\n\u003cp\u003eThe third syntax supports deleting multiple indexed lines in one call. The\nindexes given must all be correct for the subtitle file\u0026rsquo;s state before any\nlines are deleted.\u003c/p\u003e\n\u003cp\u003eThe fourth syntax is identical to \u003ccode\u003esubtitles.delete(unpack(tbl))\u003c/code\u003e, but\nsupports tables which are too large to unpack and will be slightly\nfaster if you have the lines in a table anyway.\u003c/p\u003e\n\u003cp\u003eTrying to delete a nonexistent line is an error, except for with deleterange.\u003c/p\u003e\n\u003cp\u003eThe fifth syntax deletes a range of lines, both indexed lines inclusive.\u003c/p\u003e\n\u003cdl\u003e\n\u003cdt\u003e\u003cstrong\u003e\u003ccode\u003ei\u003c/code\u003e\u003c/strong\u003e (\u003ccode\u003enumber\u003c/code\u003e)\u003c/dt\u003e\n\u003cdd\u003eIndex of the line to delete.\u003c/dd\u003e\n\u003cdt\u003e\u003cstrong\u003e\u003ccode\u003efirst\u003c/code\u003e\u003c/strong\u003e (\u003ccode\u003enumber\u003c/code\u003e)\u003c/dt\u003e\n\u003cdd\u003eIndex of the first line of the range to delete.\u003c/dd\u003e\n\u003cdt\u003e\u003cstrong\u003e\u003ccode\u003elast\u003c/code\u003e\u003c/strong\u003e (\u003ccode\u003enumber\u003c/code\u003e)\u003c/dt\u003e\n\u003cdd\u003eIndex of the last line of the range to delete.\u003c/dd\u003e\n\u003c/dl\u003e\n\u003cp\u003eDeleting lines uses the list cursor and will move it.\u003c/p\u003e\n\u003ch3 id="creating-an-undo-point"\u003eCreating an undo point\u003c/h3\u003e\n\u003cp\u003eSynopsis: \u003ccode\u003eaegisub.set_undo_point(description)\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003eYou should always create an undo point at the end of any macro which made\nchanges to the subtitles object. If you do not, one will automatically be set\nfor you, but in future versions of Aegisub this may change to rolling back any\nchanges made instead.\u003c/p\u003e\n\u003cp\u003eYou can set multiple undo points in a single macro, but it is rarely a good\nidea to.\u003c/p\u003e\n\u003cp\u003eOnly available in macro processing functions, as it doesn\u0026rsquo;t make sense anywhere\nelse either.\u003c/p\u003e\n\u003cdl\u003e\n\u003cdt\u003e\u003cstrong\u003e\u003ccode\u003edescription\u003c/code\u003e\u003c/strong\u003e (\u003ccode\u003estring\u003c/code\u003e)\u003c/dt\u003e\n\u003cdd\u003eText to appear in the Edit menu for the Undo and Redo items to describe the\naction that can be undone.\u003c/dd\u003e\n\u003c/dl\u003e\n\u003cp\u003eThis is not really a function in the subtitles object, but it is still closely\ntied to it.\u003c/p\u003e\n\u003ch2 id="line-data-tables"\u003eLine data tables\u003c/h2\u003e\n\u003cp\u003eWhen you read lines from the subtitle file object they will always be one of a\nfew classes of lines, and when you write lines back to the subtitle file they\nmust also follow the format of one of those classes.\u003c/p\u003e\n\u003cp\u003eThe line data objects are regular Lua tables with some specific fields defined.\u003c/p\u003e\n\u003cp\u003eHere\u0026rsquo;s a list of the different classes of lines:\u003c/p\u003e\n\u003cdl\u003e\n\u003cdt\u003e\u003cstrong\u003e\u003ccode\u003einfo\u003c/code\u003e\u003c/strong\u003e\u003c/dt\u003e\n\u003cdd\u003eA key/value pair in the Script Info section of the file\u003c/dd\u003e\n\u003cdt\u003e\u003cstrong\u003e\u003ccode\u003estyle\u003c/code\u003e\u003c/strong\u003e\u003c/dt\u003e\n\u003cdd\u003ea regular style definition line\u003c/dd\u003e\n\u003cdt\u003e\u003cstrong\u003e\u003ccode\u003edialogue\u003c/code\u003e\u003c/strong\u003e\u003c/dt\u003e\n\u003cdd\u003eA dialogue line, which may or may not be a comment. These are the lines you\nsee in the grid in Aegisub.\u003c/dd\u003e\n\u003cdt\u003e\u003cstrong\u003e\u003ccode\u003eunknown\u003c/code\u003e\u003c/strong\u003e\u003c/dt\u003e\n\u003cdd\u003eAn unknown kind of line.\u003c/dd\u003e\n\u003c/dl\u003e\n\u003cp\u003eThere\u0026rsquo;s three fields that always exist in all line data tables:\u003c/p\u003e\n\u003cdl\u003e\n\u003cdt\u003e\u003cstrong\u003e\u003ccode\u003eclass\u003c/code\u003e\u003c/strong\u003e (\u003ccode\u003estring\u003c/code\u003e)\u003c/dt\u003e\n\u003cdd\u003eThe name of the class of line this is, see the list above.\u003c/dd\u003e\n\u003cdt\u003e\u003cstrong\u003e\u003ccode\u003eraw\u003c/code\u003e\u003c/strong\u003e (\u003ccode\u003estring\u003c/code\u003e)\u003c/dt\u003e\n\u003cdd\u003eThe raw text of the line, from first to last character on the physical line.\u003c/dd\u003e\n\u003cdt\u003e\u003cstrong\u003e\u003ccode\u003esection\u003c/code\u003e\u003c/strong\u003e (\u003ccode\u003estring\u003c/code\u003e)\u003c/dt\u003e\n\u003cdd\u003eWhich section of the file the line belongs to. If the line is placed before\nthe first section heading, this field is \u003ccode\u003enil\u003c/code\u003e.\u003c/dd\u003e\n\u003c/dl\u003e\n\u003ch3 id="info-class"\u003e\u003ccode\u003einfo\u003c/code\u003e class\u003c/h3\u003e\n\u003cp\u003eThis class defines two additional fields:\u003c/p\u003e\n\u003cdl\u003e\n\u003cdt\u003e\u003cstrong\u003e\u003ccode\u003ekey\u003c/code\u003e\u003c/strong\u003e (\u003ccode\u003estring\u003c/code\u003e)\u003c/dt\u003e\n\u003cdd\u003eThe part of the line before the first colon, with leading and trailing spaces\nremoved.\u003c/dd\u003e\n\u003cdt\u003e\u003cstrong\u003e\u003ccode\u003evalue\u003c/code\u003e\u003c/strong\u003e (\u003ccode\u003estring\u003c/code\u003e)\u003c/dt\u003e\n\u003cdd\u003eEverything after the first colon on the line, also with leading and trailing\nspaces removed.\u003c/dd\u003e\n\u003c/dl\u003e\n\u003ch3 id="style-class"\u003e\u003ccode\u003estyle\u003c/code\u003e class\u003c/h3\u003e\n\u003cp\u003eThis class defines a large number of additional fields. It\u0026rsquo;s usually processed\nby the \u003cem\u003ekaraskel\u003c/em\u003e and modified a bit by that. See the \u003cem\u003ekaraskel.lua\u003c/em\u003e section on\n\u003ca href="/docs/3.2/en/automation/lua/modules/karaskel.lua/#styletable"\u003estyle tables\u003c/a\u003e for more\ninformation about this class.\u003c/p\u003e\n\u003ch3 id="dialogue-class"\u003e\u003ccode\u003edialogue\u003c/code\u003e class\u003c/h3\u003e\n\u003cp\u003eThis class defines a large number of additional fields. It\u0026rsquo;s usually processed\nby the \u003cem\u003ekaraskel\u003c/em\u003e and has many calculated fields added by that. See the\n\u003cem\u003ekaraskel.lua\u003c/em\u003e section on \u003ca href="/docs/3.2/en/automation/lua/modules/karaskel.lua/#dialoguelinetable"\u003edialogue line tables\u003c/a\u003e for more\ninformation on this class.\u003c/p\u003e\n\u003ch3 id="unknown-class"\u003e\u003ccode\u003eunknown\u003c/code\u003e class\u003c/h3\u003e\n\u003cp\u003eNo additional fields are defined by this class, due to its nature. This might\nbe things like files embedded into the subtitles. You shouldn\u0026rsquo;t try to work\nwith these lines unless you really know what you\u0026rsquo;re doing. Deleting, modifying\nand inserting \u003ccode\u003eunknown\u003c/code\u003e lines has undefined consequences. (That means, even if\nit works today it might not work tomorrow or in the next version of Aegisub.)\u003c/p\u003e\n\u003cp\u003e{::template name=\u0026ldquo;automation_navbox\u0026rdquo; /}\u003c/p\u003e\n'},{id:54,href:"/docs/3.2/en/automation/manager/",title:"",description:null,content:'\u003cp\u003eThe Automation Manager window is used to view, load and unload\n\u003ca href="/docs/3.2/en/automation/"\u003eAutomation\u003c/a\u003e scripts.\u003c/p\u003e\n\u003cp\u003eThe Automation Manager window is opened from the \u003cem\u003eAutomation\u003c/em\u003e menu or with\nthe \u003cimg src="/img/3.2/Automation-toolbar-icon.png" alt="Automation-toolbar-icon"\u003e toolbar button.\u003c/p\u003e\n\u003cp\u003e\u003cimg src="/img/3.2/automation_manager.png" alt="automation_manager"\u003e\u003c/p\u003e\n\u003ch2 id="the-script-list"\u003eThe script list\u003c/h2\u003e\n\u003cp\u003eThe main area of the window is a list of all \u003cem\u003escript files\u003c/em\u003e loaded. It\u0026rsquo;s\nimportant to remember that one script file can contain several\n\u003ca href="/docs/3.2/en/glossary/automation_script_feature/"\u003efeatures\u003c/a\u003e, for example one script file\ncan define two \u003ca href="/docs/3.2/en/glossary/macro/"\u003emacros\u003c/a\u003e and one export filter.\u003c/p\u003e\n\u003cp\u003eScripts can be loaded in one of two ways. In the screenshot above, most of\nthe scripts are \u003cem\u003eglobal\u003c/em\u003e (autoloaded), as indicated by the \u0026ldquo;G\u0026rdquo; in the\nleftmost column. Global scripts are automatically loaded along with Aegisub.\nThey are put in one of the \u003ca href="#"\u003eAutomation_autoload_folders\u003c/a\u003e. You can not\nunload global scripts; you must remove them from the autoload directory, and\nthen rescan the autoload directory.\u003c/p\u003e\n\u003cp\u003eThe last script in the screenshot above is an example of the other type of\nscript: \u003cem\u003elocal\u003c/em\u003e scripts, as indicated by the \u0026ldquo;L\u0026rdquo;. Scripts added manually via\nthe Add button are local to the subtitle file being worked on, and are\nautomatically unloaded when the current subtitle files is closed, then\nreloaded along with the subtitle file when you reopen it.\u003c/p\u003e\n\u003cp\u003eSometimes a script is shown in red in the list. This only happens if the\nscript could not be loaded for some reason. The reason will usually be shown\nin the Description column. If the description of the error is too long to\nread, you can select the script and click the Show Info button to see it\nall. Scripts failing to load should only happen if you are writing your own\nscripts and manage to make a programming error.\u003c/p\u003e\n\u003ch2 id="the-buttons"\u003eThe buttons\u003c/h2\u003e\n\u003cp\u003eThere are 6 buttons at the bottom of the Automation Manager window:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eThe \u003cstrong\u003eAdd\u003c/strong\u003e button is used to load a local script.\u003c/li\u003e\n\u003cli\u003eThe \u003cstrong\u003eRemove\u003c/strong\u003e button is used to unload a local script. It is only\navailable when a local script is selected.\u003c/li\u003e\n\u003cli\u003eThe \u003cstrong\u003eReload\u003c/strong\u003e button unloads and reloads the selected script file from\ndisk. You can use this to reload scripts you\u0026rsquo;re developing, but also see\nbelow for other ways to do this.\u003c/li\u003e\n\u003cli\u003eThe \u003cstrong\u003eShow Info\u003c/strong\u003e buttons shows detailed information on the selected\nscript, as well as the entire Automation system.\u003c/li\u003e\n\u003cli\u003eThe \u003cstrong\u003eRescan Autoload Dir\u003c/strong\u003e button scans the autoload folders to see if\nany scripts have been added or removed since Aegisub was started. All new\nscripts in the autoload directories are then loaded, scripts that have been\nremoved are unloaded and all other global scripts are reloaded.\u003c/li\u003e\n\u003cli\u003eThe \u003cstrong\u003eClose\u003c/strong\u003e button closes the Automation Manager window.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id="other-ways-to-reload-scripts"\u003eOther ways to reload scripts\u003c/h2\u003e\n\u003cp\u003eIf you\u0026rsquo;re developing scripts you might find yourself returning to the\nAutomation Manager often to reload your script. There are also faster ways\nto reload scripts though:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eWhen the \u003ca href="/docs/3.2/en/exporting/"\u003eExport\u003c/a\u003e dialog is opened all local scripts are\nreloaded. You can change this in the \u003ca href="/docs/3.2/en/options/"\u003eOptions\u003c/a\u003e\ndialog.\u003c/li\u003e\n\u003cli\u003eHold the Ctrl key and click the Automation toolbar button to rescan the\nautoload folders.\u003c/li\u003e\n\u003cli\u003eHold both the Ctrl and Shift keys and click the Automation toolbar button\nto reload all scripts, also rescanning the autoload folders.\u003c/li\u003e\n\u003cli\u003eWhile there is no default hotkey to reload all scripts, you can add one in\nthe \u003ca href="/docs/3.2/en/options/#hotkeys"\u003epreferences dialog\u003c/a\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThe Automation Manager won\u0026rsquo;t open when any of there methods are used, but\nyou will get an error message window if a script failed to load. Note that\nyou can double-click on the rows in the error dialog for more information.\u003c/p\u003e\n\u003cp\u003e{::template name=\u0026ldquo;automation_navbox\u0026rdquo; /}\u003c/p\u003e\n'},{id:55,href:"/docs/3.2/en/automation/running_macros/",title:"",description:null,content:'\u003cp\u003e\u003ca href="/docs/3.2/en/automation/"\u003eAutomation\u003c/a\u003e \u003ca href="/docs/3.2/en/glossary/macro/"\u003emacros\u003c/a\u003e appear as options in the Automation\nmenu.\u003c/p\u003e\n\u003cp\u003e\u003cimg src="/img/3.2/automation_menu.png" alt="automation_menu"\u003e\u003c/p\u003e\n\u003cp\u003eThe first option in the Automation menu, before the separator, always opens\nthe \u003ca href="/docs/3.2/en/automation/manager/"\u003eAutomation/Manager\u003c/a\u003e window.\u003c/p\u003e\n\u003cp\u003eBelow the separator is a list of all macros loaded. In the example above\nseven macros are loaded. The third, \u003ca href="/docs/3.2/en/automation/karaoke_templater/"\u003eKaraoke_Templater\u003c/a\u003e is unavailable\nthough, because the macro has determined it can\u0026rsquo;t be run on the subtitles.\nIn this case, because the subtitle file has no karaoke templates. Other\nmacros might be unavailable for other reasons. The fourth has had a hotkey\nset in the \u003ca href="/docs/3.2/en/options/#hotkeys"\u003epreferences dialog\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eTo run a macro, just select it from the Automation menu. Some macros might\nask you for more information, and some work only on the selected subtitle\nlines. Always remember to read the documentation that came with macros you\ndownloaded from the Internet.\u003c/p\u003e\n\u003cp\u003e{::template name=\u0026ldquo;automation_navbox\u0026rdquo; /}\u003c/p\u003e\n'},{id:56,href:"/docs/3.2/en/autosave/",title:"",description:null,content:'\u003cp\u003eBy default Aegisub automatically saves a backup copy of every subtitle file you\nopen, along with another copy every minute (if any changes have been made in\nthe last minute). These copies can be found in %APPDATA%\\Aegisub\\autosave on\nWindows, ~/.aegisub/autosave on Linux, and ~/Library/Application\nSupport/Aegisub/autosave on OS X. In addition, they can be browsed directly\nwithin Aegisub at File → Open Autosaved File\u0026hellip;\u003c/p\u003e\n\u003cp\u003e\u003cimg src="/img/3.2/autosave-menu.png" alt="autosave-menu"\u003e{: class=\u0026ldquo;center\u0026rdquo;}\u003c/p\u003e\n\u003cp\u003e\u003cimg src="/img/3.2/autosave-dialog.png" alt="autosave-dialog"\u003e{: class=\u0026ldquo;center\u0026rdquo;}\u003c/p\u003e\n\u003cp\u003eAegisub automatically cleans up old files in the autosave directory, so the\nautomatic backups should not be used for long-term storage of files.\u003c/p\u003e\n'},{id:57,href:"/docs/3.2/en/example/",title:"",description:null,content:"\u003cp\u003eExample|{\\b1\\i1}|Bold and italic text.\u003c/p\u003e\n"},{id:58,href:"/docs/3.2/en/fix_timing_tutorial/",title:"",description:null,content:'\u003col\u003e\n\u003cli\u003eREDIRECT \u003ca href="/docs/3.2/en/shift_times/"\u003eShift_Times\u003c/a\u003e\u003c/li\u003e\n\u003c/ol\u003e\n'},{id:59,href:"/docs/3.2/en/furigana_karaoke/",title:"",description:null,content:'\u003cp\u003e\u003cimg src="/img/3.2/Furigana-demo-1.png" alt="Furigana-demo-1"\u003e\u003c/p\u003e\n\u003cp\u003e\u003cem\u003eFurigana\u003c/em\u003e (in Aegisub often shortened to \u003cem\u003efuri\u003c/em\u003e) refers to little phonetic\nguide characters written along the main text in Japanese, specifically using\nthe hiragana phonetic alphabet to describe how the ideographic kanji characters\nshould be pronounced. Putting smaller text next to a main line of text is in\ngeneral referred to as \u003ca href="http://en.wikipedia.org/wiki/Ruby_character"\u003e\u003cem\u003eruby\ntext\u003c/em\u003e\u003c/a\u003e, but since the\nimplementation discussed here is designed specifically with Japanese furigana\nin mind, the ruby text is also referred to as furigana everywhere.\u003c/p\u003e\n\u003cp\u003eNone of the subtitle formats Aegisub supports natively support ruby text or\nfurigana, however the \u003ca href="/docs/3.2/en/automation/lua/modules/karaskel.lua/"\u003ekaraskel\u003c/a\u003e standard include\nimplements an algorithm that can create basic furigana layouts by calculating\nthe position of every individual character.\u003c/p\u003e\n\u003cp\u003eThis page describes the syntax the Automation 4 karaskel.lua script understands\nfor furigana text, and how to use the layout information it calculates to\nactually create positioned characters.\u003c/p\u003e\n\u003cp\u003e\u003ca href="/docs/3.2/en/automation/karaoke_templater/"\u003eKaraoke Templater\u003c/a\u003e also implements support for\nfurigana using the karaskel.lua algorithm and syntax.\u003c/p\u003e\n\u003cp\u003eIt\u0026rsquo;s important to note that the syntax is designed for karaoke, and revolves\naround \u003ca href="/docs/3.2/en/karaoke_timing_tutorial/"\u003ekaraoke timed\u003c/a\u003e text. It isn\u0026rsquo;t suited for typesetting\nregular text (e.g. dialogue lines) with general purpose ruby text. A more\nelaborate syntax and more complex layout engine would be required for that.\u003c/p\u003e\n\u003ch2 id="multi-highlight-syntax"\u003eMulti-highlight syntax\u003c/h2\u003e\n\u003cp\u003eA prerequisite for an integral part of the furigana syntax is the\nmulti-highlight syntax.\u003c/p\u003e\n\u003cp\u003eIf you make the text of a syllable a number sign (#, ASCII 35, Unicode U+0023)\nthat syllable will \u0026ldquo;join\u0026rdquo; with the previous one: The number sign is removed and\nthe timing of the two syllables are added together, producing just one\nsyllable. You can have multiple number sign syllables in a row, adding up\nmultiple timings in that way.\u003c/p\u003e\n\u003cp\u003eThe timings of the individual number sign syllables are still stored in the\n\u003ca href="/docs/3.2/en/automation/lua/modules/karaskel.lua/#highlighttable"\u003ehighlight table\u003c/a\u003e of the\ngenerated syllable structure, but the main timing (\u003ccode\u003estart_time\u003c/code\u003e and \u003ccode\u003eend_time\u003c/code\u003e)\nof the syllable structure reflects only the added-together timings of the\nnumber sign syllables.\u003c/p\u003e\n\u003cp\u003e{::template name=\u0026ldquo;examplebox\u0026rdquo;}\nThis line shows how multi-highlight syntax is used to mark up kanji and groups\nof kanji that cover multiple syllables:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e{\\k5}明日{\\k10}#{\\k5}#{\\k10}ま{\\k7}た{\\k10}会{\\k4}う{\\k6}時{\\k14}#\r\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIt generates the following syllable structures:\u003c/p\u003e\n\u003ctable class="karatable"\u003e\r\n    \u003ctr\u003e\u003cth\u003eText\u003c/th\u003e\u003cth\u003eSyllable duration\u003c/th\u003e\u003cth\u003eHighlight durations\u003c/th\u003e\u003c/tr\u003e\r\n    \u003ctr\u003e\u003ctd rowspan="3"\u003e明日\u003c/td\u003e\u003ctd rowspan="3"\u003e20\u003c/td\u003e\u003ctd\u003e5\u003c/td\u003e\u003c/tr\u003e\r\n    \u003ctr\u003e\u003ctd\u003e10\u003c/td\u003e\u003c/tr\u003e\r\n    \u003ctr\u003e\u003ctd\u003e5\u003c/td\u003e\u003c/tr\u003e\r\n    \u003ctr\u003e\u003ctd\u003eま\u003c/td\u003e\u003ctd\u003e10\u003c/td\u003e\u003ctd\u003e10\u003c/td\u003e\u003c/tr\u003e\r\n    \u003ctr\u003e\u003ctd\u003eた\u003c/td\u003e\u003ctd\u003e7\u003c/td\u003e\u003ctd\u003e7\u003c/td\u003e\u003c/tr\u003e\r\n    \u003ctr\u003e\u003ctd\u003e会\u003c/td\u003e\u003ctd\u003e10\u003c/td\u003e\u003ctd\u003e10\u003c/td\u003e\u003c/tr\u003e\r\n    \u003ctr\u003e\u003ctd\u003eう\u003c/td\u003e\u003ctd\u003e4\u003c/td\u003e\u003ctd\u003e4\u003c/td\u003e\u003c/tr\u003e\r\n    \u003ctr\u003e\u003ctd rowspan="2"\u003e時\u003c/td\u003e\u003ctd rowspan="2"\u003e20\u003c/td\u003e\u003ctd\u003e6\u003c/td\u003e\u003c/tr\u003e\r\n    \u003ctr\u003e\u003ctd\u003e14\u003c/td\u003e\u003c/tr\u003e\r\n\u003c/table\u003e\r\n\u003cp\u003e{:/}\u003c/p\u003e\n\u003ch2 id="basic-furigana"\u003eBasic furigana\u003c/h2\u003e\n\u003cp\u003eTo add furigana to a syllable, you add a pipe character (|, ASCII 124, Unicode\nU+007C) after the main syllable text, and then add the furigana text after the\npipe. You can also add furigana to repeat-syllables (number sign syllables for\nmulti-highlight) to have the furigana for a single main syllable span multiple\nfurigana syllables.\u003c/p\u003e\n\u003cp\u003eWhen multiple consecutive syllables all have furigana, the furigana for all of\nthose syllables are collected together and centered above the string of main\nsyllables they belong to. If the string of furigana is wider than the main text\nthe furigana is left-aligned with the main text. You can control this behaviour\nwith special control characters, see below.\u003c/p\u003e\n\u003cp\u003e{::template name=\u0026ldquo;examplebox\u0026rdquo;}\nAdding furigana to the example above:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e{\\k5}明日|あ{\\k10}#|し{\\k5}#|た{\\k10}ま{\\k7}た{\\k10}会|あ{\\k4}う{\\k6}時|と{\\k14}#|き\r\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe following syllables, highlights and furigana are produced:\u003c/p\u003e\n\u003ctable class="karatable"\u003e\r\n    \u003ctr\u003e\u003cth\u003eText\u003c/th\u003e\u003cth\u003eSyllable duration\u003c/th\u003e\u003cth\u003eHighlight/furigana durations\u003c/th\u003e\u003cth\u003eFurigana\u003c/th\u003e\u003c/tr\u003e\r\n    \u003ctr\u003e\u003ctd rowspan="3"\u003e明日\u003c/td\u003e\u003ctd rowspan="3"\u003e20\u003c/td\u003e\u003ctd\u003e5\u003c/td\u003e\u003ctd\u003eあ\u003c/td\u003e\u003c/tr\u003e\r\n    \u003ctr\u003e\u003ctd\u003e10\u003c/td\u003e\u003ctd\u003eし\u003c/td\u003e\u003c/tr\u003e\r\n    \u003ctr\u003e\u003ctd\u003e5\u003c/td\u003e\u003ctd\u003eた\u003c/td\u003e\u003c/tr\u003e\r\n    \u003ctr\u003e\u003ctd\u003eま\u003c/td\u003e\u003ctd\u003e10\u003c/td\u003e\u003ctd\u003e10\u003c/td\u003e\u003c/tr\u003e\r\n    \u003ctr\u003e\u003ctd\u003eた\u003c/td\u003e\u003ctd\u003e7\u003c/td\u003e\u003ctd\u003e7\u003c/td\u003e\u003c/tr\u003e\r\n    \u003ctr\u003e\u003ctd\u003e会\u003c/td\u003e\u003ctd\u003e10\u003c/td\u003e\u003ctd\u003e10\u003c/td\u003e\u003ctd\u003eあ\u003c/td\u003e\u003c/tr\u003e\r\n    \u003ctr\u003e\u003ctd\u003eう\u003c/td\u003e\u003ctd\u003e4\u003c/td\u003e\u003ctd\u003e4\u003c/td\u003e\u003c/tr\u003e\r\n    \u003ctr\u003e\u003ctd rowspan="2"\u003e時\u003c/td\u003e\u003ctd rowspan="2"\u003e20\u003c/td\u003e\u003ctd\u003e6\u003c/td\u003e\u003ctd\u003eと\u003c/td\u003e\u003c/tr\u003e\r\n    \u003ctr\u003e\u003ctd\u003e14\u003c/td\u003e\u003ctd\u003eき\u003c/td\u003e\u003c/tr\u003e\r\n\u003c/table\u003e\r\n{:/}\r\n\u003ch2 id="controlling-the-layout"\u003eControlling the layout\u003c/h2\u003e\n\u003cp\u003eOften the layout produced with the plain furigana syntax isn\u0026rsquo;t exactly what you\nwant, or maybe even plain misleading. Because of this, there\u0026rsquo;s two special\ncharacters that can be used to control how the furigana are laid out.\u003c/p\u003e\n\u003cp\u003eBoth of these two special characters are placed before the first character of\nthe furigana of a syllable, i.e. right after the pipe character.\u003c/p\u003e\n\u003cp\u003eFirst is the exclamation mark (!, ASCII 33, Unicode U+0021) which marks a\n\u0026ldquo;sequence break\u0026rdquo;. This acts as a kind of invisible divider that prevents the\nfurigana in this syllable from merging with that of the previous syllable. You\nwill usually use this when you have two adjacent kanji words that both have\nfurigana, but the furigana for them need to be separate. In that case, put the\nexclamation mark as the first character in the furigana for the first syllable\nof the second word.\u003c/p\u003e\n\u003cp\u003eThe other special character is the less-than sign (\u0026lt;, ASCII 60, Unicode U+003C)\nwhich marks a \u0026ldquo;sequence break with float-left\u0026rdquo;. It has the same sequence break\nsemantics as the exclamation mark, but also changes the overflow behaviour.\nWhen the furigana sequence starts with a less-than sign marked furigana\nsyllable is wider than the main text it applies to, it will always center above\nthe main text, even if it means it has to extend over the left edge of it.\u003c/p\u003e\n\u003cp\u003eIn all cases, if two furigana sequences extend beyond their main text such that\nthey would overlap, the main text is moved such that the furigana won\u0026rsquo;t\noverlap.\u003c/p\u003e\n\u003cp\u003e{::template name=\u0026ldquo;examplebox\u0026rdquo;}\nHere is the same (rather contrived) sample text shown without layout control\nand with each of the two layout control characters:\u003c/p\u003e\n\u003cp\u003e| \u003cimg src="/img/3.2/Furigana-demo-4.png" alt="Furigana-demo-4"\u003e | \u003ccode\u003e{\\k10}\u003c/code\u003e中|ちゅ\u003ccode\u003e{\\k10}\u003c/code\u003e#|う\u003ccode\u003e{\\k10}\u003c/code\u003e国|ご\u003ccode\u003e{\\k10}\u003c/code\u003e#|く\u003cbr\u003e\u003ccode\u003e{\\k10}\u003c/code\u003e\u003cu\u003e魂|た\u003c/u\u003e\u003ccode\u003e{\\k10}\u003c/code\u003e#|ま\u003ccode\u003e{\\k10}\u003c/code\u003e#|し\u003ccode\u003e{\\k10}\u003c/code\u003e#|い\n| \u003cimg src="/img/3.2/Furigana-demo-3.png" alt="Furigana-demo-3"\u003e | \u003ccode\u003e{\\k10}\u003c/code\u003e中|ちゅ\u003ccode\u003e{\\k10}\u003c/code\u003e#|う\u003ccode\u003e{\\k10}\u003c/code\u003e国|ご\u003ccode\u003e{\\k10}\u003c/code\u003e#|く\u003cbr\u003e\u003ccode\u003e{\\k10}\u003c/code\u003e\u003cu\u003e魂|!た\u003c/u\u003e\u003ccode\u003e{\\k10}\u003c/code\u003e#|ま\u003ccode\u003e{\\k10}\u003c/code\u003e#|し\u003ccode\u003e{\\k10}\u003c/code\u003e#|い\n| \u003cimg src="/img/3.2/Furigana-demo-2.png" alt="Furigana-demo-2"\u003e | \u003ccode\u003e{\\k10}\u003c/code\u003e中|ちゅ\u003ccode\u003e{\\k10}\u003c/code\u003e#|う\u003ccode\u003e{\\k10}\u003c/code\u003e国|ご\u003ccode\u003e{\\k10}\u003c/code\u003e#|く\u003cbr\u003e\u003ccode\u003e{\\k10}\u003c/code\u003e\u003cu\u003e魂|\u0026lt;た\u003c/u\u003e\u003ccode\u003e{\\k10}\u003c/code\u003e#|ま\u003ccode\u003e{\\k10}\u003c/code\u003e#|し\u003ccode\u003e{\\k10}\u003c/code\u003e#|い\u003c/p\u003e\n\u003cp\u003eIt \u003cem\u003eis\u003c/em\u003e very hard to tell the difference between the two first as the\ndifference is only a few pixels, but it is there. In the first sample, the た\nextends a bit over the left edge of 魂 and above 国 while it exactly\nleft-aligns with 魂 in the second. In the second, ちゅうごく is also centered\nabove 中国 while it isn\u0026rsquo;t in the first.\n{:/}\u003c/p\u003e\n\u003ch2 id="summary"\u003eSummary\u003c/h2\u003e\n\u003cp\u003e|\u0026mdash;\u0026mdash;|\u0026mdash;\u0026mdash;-|\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;|\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026ndash;|\u0026mdash;\u0026mdash;\u0026mdash;-\u003c/p\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth style="text-align:center"\u003eChar\u003c/th\u003e\n\u003cth style="text-align:center"\u003eASCII\u003c/th\u003e\n\u003cth\u003eUnicode\u003c/th\u003e\n\u003cth\u003eWhere\u003c/th\u003e\n\u003cth\u003eMeaning\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd style="text-align:center"\u003e#\u003c/td\u003e\n\u003ctd style="text-align:center"\u003e35\u003c/td\u003e\n\u003ctd\u003eU+0023\u003cbr\u003eU+FF03\u003c/td\u003e\n\u003ctd\u003eInstead of main text\u003c/td\u003e\n\u003ctd\u003eExtend previous syllable with another highlight\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style="text-align:center"\u003e|\u003c/td\u003e\n\u003ctd style="text-align:center"\u003e124\u003c/td\u003e\n\u003ctd\u003eU+007C\u003cbr\u003eU+FF5C\u003c/td\u003e\n\u003ctd\u003eBetween main text and furigana\u003c/td\u003e\n\u003ctd\u003eSeparate main text and furigana text of a syllable\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style="text-align:center"\u003e!\u003c/td\u003e\n\u003ctd style="text-align:center"\u003e33\u003c/td\u003e\n\u003ctd\u003eU+0021\u003cbr\u003eU+FF01\u003c/td\u003e\n\u003ctd\u003eFirst character of furigana\u003c/td\u003e\n\u003ctd\u003eSequence break; prevent joining furigana for this syllable with furigana from previous syllable\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style="text-align:center"\u003e\u0026lt;\u003c/td\u003e\n\u003ctd style="text-align:center"\u003e60\u003c/td\u003e\n\u003ctd\u003eU+003C\u003cbr\u003eU+FF1C\u003c/td\u003e\n\u003ctd\u003eFirst character of furigana\u003c/td\u003e\n\u003ctd\u003eSequence break with float-left; prevent joining furigana for this syllable with furigana from previous syllable, but allow furigana to extend left of main text\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style="text-align:center"\u003e\u0026mdash;\u0026mdash;\u003c/td\u003e\n\u003ctd style="text-align:center"\u003e\u0026mdash;\u0026mdash;-\u003c/td\u003e\n\u003ctd\u003e\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u003c/td\u003e\n\u003ctd\u003e\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026ndash;\u003c/td\u003e\n\u003ctd\u003e\u0026mdash;\u0026mdash;\u0026mdash;-\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style="text-align:center"\u003e{:.karatable}\u003c/td\u003e\n\u003ctd\u003e\u003c/td\u003e\n\u003ctd\u003e\u003c/td\u003e\n\u003ctd\u003e\u003c/td\u003e\n\u003ctd\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\u003cp\u003eNote that every special character can in fact be represented by two different\nUnicode codepoints. The first is the regular character, corresponding to the\nASCII character, while the second (high) codepoint is the \u003cem\u003efull width\u003c/em\u003e version\nof the character. Often when using an IME (Input Method Editor) to edit\nJapanese text it is easier to input text in full width mode than switching the\nIME off to enter a single or two regular ASCII characters and switch it on\nagain. Therefore both the half width (ASCII) and full width versions of the\ncharacters are accepted.\u003c/p\u003e\n\u003ch2 id="usage-in-karaoke-templater"\u003eUsage in Karaoke Templater\u003c/h2\u003e\n\u003cp\u003eFurigana: \u003ca href="/docs/3.2/en/automation/karaoke_templater/template_modifiers/#furi"\u003eThe \u003cem\u003efuri\u003c/em\u003e template class\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eMulti-highlight: \u003ca href="/docs/3.2/en/automation/karaoke_templater/template_modifiers/#multi"\u003eThe \u003cem\u003emulti\u003c/em\u003e modifier\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e{::template name=\u0026ldquo;examplebox\u0026rdquo;}\nThe examples used earlier on this page are all generated using this kara-templater snippet:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eComment: 0,0:00:00.00,0:00:00.00,Default,,0000,0000,0000,template syl,{\\pos(!line.left+syl.center!,!line.middle!)\\an5\\k!syl.start_time/10!\\k$kdur}\r\nComment: 0,0:00:00.00,0:00:00.00,Default,,0000,0000,0000,template furi,{\\pos(!line.left+syl.center!,!line.middle-line.height!)\\an5\\k!syl.start_time/10!\\k$kdur}\r\nComment: 0,0:00:00.00,0:00:02.00,Default,,0000,0000,0000,karaoke,{\\k15}二|ふ{\\k15}#|た{\\k10}人|り{\\k15}だ{\\k57}け{\\k5}の{\\k6}地|ほ{\\k5}球|し{\\k8}で\r\nComment: 0,0:00:02.00,0:00:04.00,Default,,0000,0000,0000,karaoke,{\\k10}中|ちゅ{\\k10}#|う{\\k10}国|ご{\\k10}#|く{\\k10}魂|\u0026lt;た{\\k10}#|ま{\\k10}#|し{\\k10}#|い\r\nComment: 0,0:00:04.00,0:00:06.00,Default,,0000,0000,0000,karaoke,{\\k10}中|ちゅ{\\k10}#|う{\\k10}国|ご{\\k10}#|く{\\k10}魂|!た{\\k10}#|ま{\\k10}#|し{\\k10}#|い\r\nComment: 0,0:00:06.00,0:00:08.00,Default,,0000,0000,0000,karaoke,{\\k10}中|ちゅ{\\k10}#|う{\\k10}国|ご{\\k10}#|く{\\k10}魂|た{\\k10}#|ま{\\k10}#|し{\\k10}#|い\r\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe font used in MS PMincho 30 pt with the furigana being 15 pt.\n{:/}\u003c/p\u003e\n\u003ch2 id="usage-in-lua-scripts"\u003eUsage in Lua scripts\u003c/h2\u003e\n\u003cp\u003eIt\u0026rsquo;s all in \u003ca href="/docs/3.2/en/automation/lua/modules/karaskel.lua/"\u003ekaraskel\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eFurigana layout is automatically invoked by \u003ccode\u003ekaraskel.preproc_line_pos\u003c/code\u003e if a\nfurigana style exists for a line main style. The furigana style for a main\nstyle is a style with the same name, except \u003ccode\u003e-furigana\u003c/code\u003e appended to the name.\nE.g. the furigana style of \u003ccode\u003eDefault\u003c/code\u003e is \u003ccode\u003eDefault-furigana\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eKaraskel can generate automatic furigana styles if the \u003ccode\u003egenerate_furigana\u003c/code\u003e\nargument (second) to the \u003ccode\u003ekaraskel.collect_head\u003c/code\u003e function is \u003ccode\u003etrue\u003c/code\u003e. Automatic\nfurigana styles are identical to the main style they\u0026rsquo;re based on, except the\nfont size is halved.\u003c/p\u003e\n\u003cp\u003eFurigana syllables are stored in \u003ccode\u003eline.furi\u003c/code\u003e and follows the same format as\nregular syllables. You have to remember setting the style of the lines you\ngenerate to the furigana style.\u003c/p\u003e\n\u003cp\u003eMulti-highlights are always processed even when furigana layout isn\u0026rsquo;t done.\nMulti-highlight data are stored in \u003ccode\u003esyl.highlights\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003e{::template name=\u0026ldquo;todo\u0026rdquo;}more details{:/}\u003c/p\u003e\n\u003cp\u003e{::template name=\u0026ldquo;automation_navbox\u0026rdquo; /}\u003c/p\u003e\n'},{id:60,href:"/docs/3.2/en/glossary/automation_script_feature/",title:"",description:null,content:"\u003cp\u003eIn Automation 4 a \u003cstrong\u003efeature\u003c/strong\u003e is a function a script makes available to Aegisub. Currently two kinds of features are specified: Export filters and macros.\u003c/p\u003e\n\u003cp\u003eIf a script defines two macros and one export filter, it is said to have defined three features in total.\u003c/p\u003e\n"},{id:61,href:"/docs/3.2/en/glossary/karaoke_effect/",title:"",description:null,content:"\u003cp\u003e\u003cstrong\u003eKaraoke\u003c/strong\u003e is (amateur) singing along to a song, usually a version of the song with the main vocals removed. When singing karaoke the lyrics to the song are usually presented on a TV screen and highlighted as they are to be sung.\u003c/p\u003e\n\u003cp\u003eIn subtitling however, karaoke usually refers to those lyrics themselves. The \u003cstrong\u003ekaraoke effect\u003c/strong\u003e  refers to the way they are highlighted.\u003c/p\u003e\n\u003cp\u003eSo, a karaoke effect is a visual effect synchronised with a song, used to help singing karaoke.\u003c/p\u003e\n\u003cp\u003eReality has it that karaoke effects in the fan subtitling community today are used more for \u0026ldquo;eye candy\u0026rdquo; and showoff than the real purpose of karaoke subtitles, assisting the viewer sing along to the song.\u003c/p\u003e\n"},{id:62,href:"/docs/3.2/en/glossary/macro/",title:"",description:null,content:"\u003cp\u003eIn computer programs, a \u003cstrong\u003emacro\u003c/strong\u003e is a (usually relatively small) snippet of program code that can easily be added to the program, to add a new function or such, intended to automate some aspect of using the program.\u003c/p\u003e\n"},{id:63,href:"/docs/3.2/en/kanji_timer/",title:"",description:null,content:'\u003cp\u003eThe kanji timer makes it easy to copy timed karaoke from one set of already karaoke timed lines to another set of yet untimed lines. Primarily intended for adding karaoke to Japanese songs.\u003c/p\u003e\n\u003cp\u003eHere is a video demonstration of the kanji timer in action: \u003ca href="http://www.animereactor.dk/aegisub/demovids/kanji-timer.avi"\u003eDownload demonstration video\u003c/a\u003e (XviD MP3 AVI, 5 min 20 sec, 12 MB)\u003c/p\u003e\n\u003ch2 id="before-you-start"\u003eBefore you start\u003c/h2\u003e\n\u003cp\u003eThe kanji timer attempts to pair syllables in one (timed) input line with a given style with syllables in a corresponding (untimed) line with another style. In other words, the timed input lines should all have same style (\u0026ldquo;romaji\u0026rdquo; for example) and the untimed ones another (\u0026ldquo;kanji\u0026rdquo; for example). Having more timed source lines than untimed destination ones or vice versa can confuse the tool, but it\u0026rsquo;s usually possible to un-confuse it, see below. In order to correctly pair source lines with destination ones, both sets must be in the same order in the grid. For example, this works:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eTimed line 1\r\nUntimed line 1\r\nTimed line 2\r\nUntimed line 2\r\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAnd so does this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eTimed line 1\r\nTimed line 2\r\nUntimed line 1\r\nUntimed line 2\r\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eBut this does \u003cstrong\u003enot\u003c/strong\u003e (pairs lines wrong):\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eTimed line 1\r\nTimed line 2\r\nUntimed line 2\r\nUntimed line 1\r\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch2 id="using-the-kanji-timer"\u003eUsing the kanji timer\u003c/h2\u003e\n\u003cp\u003eThe kanji timer dialog looks like this:\u003c/p\u003e\n\u003cp\u003e\u003cimg src="/img/3.2/Kanji_timer.png" alt="Kanji_timer"\u003e{: class=\u0026ldquo;center\u0026rdquo;}\u003c/p\u003e\n\u003cp\u003eThe first thing you need to do is to select which styles are used for the timed input lines and the untimed output lines respectively. This is done in the upper right corner of the dialog; the top dropdown is the source style and the bottom one is the destination. When you\u0026rsquo;ve done this, click the start button.\u003c/p\u003e\n\u003cp\u003eNow, you\u0026rsquo;ll see the first syllable of the first source line highlighted in the source text field, and a suggestion for the destination syllable highlighted in the destination field. What you do now is \u0026ldquo;group\u0026rdquo; each source syllable with one or more kanji (or other syllables) in the destination. This is done using the following keyboard shortcuts:\u003c/p\u003e\n\u003cdl\u003e\n\u003cdt\u003eEnter\u003c/dt\u003e\n\u003cdd\u003eAccept the highlighted grouping (and go to next line if all syllables are grouped).\u003c/dd\u003e\n\u003cdt\u003eRight arrow\u003c/dt\u003e\n\u003cdd\u003eIncrease the destination highlight length.\u003c/dd\u003e\n\u003cdt\u003eLeft arrow\u003c/dt\u003e\n\u003cdd\u003eDecrease the destination highlight length.\u003c/dd\u003e\n\u003cdt\u003eUp arrow\u003c/dt\u003e\n\u003cdd\u003eIncrease the source highlight length.\u003c/dd\u003e\n\u003cdt\u003eDown arrow\u003c/dt\u003e\n\u003cdd\u003eDecrease the source highlight length.\u003c/dd\u003e\n\u003cdt\u003eBackspace\u003c/dt\u003e\n\u003cdd\u003eUn-groups (or unlinks) the last accepted syllable and lets you try to group it again (useful if you make a mistake).\n{: .dl-horizontal}\u003c/dd\u003e\n\u003c/dl\u003e\n\u003ch2 id="things-to-note"\u003eThings to note\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eDon\u0026rsquo;t use the mouse to change the highlights; it confuses the tool a lot. Use the keyboard shortcuts instead, they\u0026rsquo;re much faster.\u003c/li\u003e\n\u003cli\u003eThe destination line can already be k-timed, but if it is, the kanji timer will overwrite those timings.\u003c/li\u003e\n\u003cli\u003eEmpty syllables will be copied alone, or will be combined with the surrounding syllables if those are to be combined.\u003c/li\u003e\n\u003cli\u003eAny ASS override tags appearing before each \\k will be copied directly without modification, but tags after each \\k is currently not copied at all.\u003c/li\u003e\n\u003cli\u003eIf you have more source than destination lines or vice versa, you can use the \u0026ldquo;Skip source line\u0026rdquo; or \u0026ldquo;Skip destination line\u0026rdquo; to make sure the pairing of source/destination lines is correctly done.\u003c/li\u003e\n\u003c/ul\u003e\n'},{id:64,href:"/docs/3.2/en/karaoke_inline-fx/",title:"",description:null,content:'\u003cp\u003eKaraoke inline-fx (inline effects) is a way of marking up \u003ca href="/docs/3.2/en/timing/#karaoketiming"\u003etimed karaoke\u003c/a\u003e to assign different effects to different\nparts of a line.\u003c/p\u003e\n\u003cp\u003eBy itself, inline-fx markup doesn\u0026rsquo;t do anything, it only has an effect when\na \u003ca href="/docs/3.2/en/automation/"\u003ekaraoke effect script\u003c/a\u003e that understands it is applied to\nthe timed karaoke.\u003c/p\u003e\n\u003ch2 id="the-markup"\u003eThe markup\u003c/h2\u003e\n\u003cp\u003eInline-fx tags are (otherwise invalid) ASS override tags of the form\n\u003ccode\u003e\\-effectname\u003c/code\u003e, where \u003cem\u003eeffectname\u003c/em\u003e is the name of the inline-fx defined.\u003c/p\u003e\n\u003cp\u003eLike normal override tags, an inline-fx tag affects the syllable it is\nplaced in and every following syllable, until the next syllable with an\ninline-fx tag in it.\u003c/p\u003e\n\u003cp\u003eAt the start of each line the inline-fx is reset to nothing.\u003c/p\u003e\n\u003cp\u003e{::template name=\u0026ldquo;examplebox\u0026rdquo;}\nHere is a timed karaoke line with inline-fx markup:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e{\\k40}zu{\\k20}t{\\k42}to {\\k32\u003cu\u003e\\-paint\u003c/u\u003e}e{\\k17}ga{\\k45}i{\\k32}te{\\k26}ta {\\k24\u003cu\u003e\\-cloud\u003c/u\u003e}yu{\\k55}me\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThese syllables get inline-fx assigned like this:\u003c/p\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003eSyllable\u003c/th\u003e\n\u003cth\u003eInline-fx\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003ezu\u003c/td\u003e\n\u003ctd\u003e(blank)\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003et\u003c/td\u003e\n\u003ctd\u003e(blank)\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eto\u003c/td\u003e\n\u003ctd\u003e(blank)\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003ee\u003c/td\u003e\n\u003ctd\u003e\u003ccode\u003epaint\u003c/code\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003ega\u003c/td\u003e\n\u003ctd\u003e\u003ccode\u003epaint\u003c/code\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003ei\u003c/td\u003e\n\u003ctd\u003e\u003ccode\u003epaint\u003c/code\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003ete\u003c/td\u003e\n\u003ctd\u003e\u003ccode\u003epaint\u003c/code\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eta\u003c/td\u003e\n\u003ctd\u003e\u003ccode\u003epaint\u003c/code\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eyu\u003c/td\u003e\n\u003ctd\u003e\u003ccode\u003ecloud\u003c/code\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eme\u003c/td\u003e\n\u003ctd\u003e\u003ccode\u003ecloud\u003c/code\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e{:/}\u003c/td\u003e\n\u003ctd\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch2 id="usage-in-karaoke-templater"\u003eUsage in Karaoke Templater\u003c/h2\u003e\n\u003cp\u003eIf you use \u003ca href="/docs/3.2/en/automation/karaoke_templater/"\u003eKaraoke Templater\u003c/a\u003e to create\neffects, you can use the \u003cem\u003efx\u003c/em\u003e modifier on templates to make that template\naffect only syllables with a specific inline-fx. It isn\u0026rsquo;t possible\n(directly) to match only syllables with blank inline-fx.\u003c/p\u003e\n\u003cp\u003e{::template name=\u0026ldquo;examplebox\u0026rdquo;}\nWith the sample timed karaoke from above, you could have the following templates:\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003e\u003cpre\u003etemplate syl: {base effect applied for all syllables}\ntemplate syl \u003cu\u003efx paint\u003c/u\u003e: {overlay effect applied only to the \u0026lsquo;paint\u0026rsquo; syllables}\ntemplate syl \u003cu\u003efx cloud\u003c/u\u003e: {overlay effect applied only to the \u0026lsquo;cloud\u0026rsquo; syllables}\u003c/pre\u003e\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003eThe idea here is to have a base effect and then some of the syllables get\nsome more effects on top of that.\n{:/}\n{::template name=\u0026ldquo;examplebox\u0026rdquo;}\nIt is possible to match only syllables with blank inline-fx in\nkara-templater by using an \u003cem\u003efxgroup\u003c/em\u003e that enables or disables basing on\ninline-fx. You can also use _fxgroup_s to have templates that run for\nmultiple inline-fx.\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003e\u003cpre\u003e\u003cu\u003ecode syl\u003c/u\u003e: fxgroup.blankfx = (syl.inline_fx == \u0026ldquo;\u0026quot;)\ntemplate syl \u003cu\u003efxgroup blankfx\u003c/u\u003e: {effect only applied on blank inline-fx syllables}\u003c/pre\u003e\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003eThe important thing is that the code line runs per syllable and runs before\nany per-syllable templates that must use it.\n{:/}\u003c/p\u003e\n\u003ch2 id="usage-in-lua-scripts"\u003eUsage in Lua scripts\u003c/h2\u003e\n\u003cp\u003eThe inline-fx tags are parsed by\n\u003ca href="/docs/3.2/en/automation/lua/modules/karaskel.lua/#karaskel.preproc_line_text"\u003e\u003ccode\u003ekaraskel.preproc_line_text\u003c/code\u003e\u003c/a\u003e\nso they will only work if you have applied at least that much karaskel\npre-processing on your subtitle lines.\u003c/p\u003e\n\u003cp\u003eThe inline-fx for a syllable is then available as \u003ccode\u003esyl.inline_fx\u003c/code\u003e, which\nyou can compare to a string to conditionally apply effects.\u003c/p\u003e\n\u003cp\u003e{::template name=\u0026ldquo;examplebox\u0026rdquo;}\nIn some code that runs per-syllable in your script:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-lua"\u003eif syl.inline_fx == \u0026quot;\u0026quot; then\r\n    apply_base_effect(subs, meta, line, syl)\r\nelseif syl.inline_fx == \u0026quot;paint\u0026quot; then\r\n    apply_paint_effect(subs, meta, line, syl)\r\nelseif syl.inline_fx == \u0026quot;cloud\u0026quot; then\r\n    apply_cloud_effect(subs, meta, line, syl)\r\nend\r\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eSimply compare the inline-fx name to the various possibilities and run the\nright effect code.\n{:/}\n{::template name=\u0026ldquo;examplebox\u0026rdquo;}\nIn some code that runs per-syllable in your script:\nAt top-level of your script:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-lua"\u003eeffects = {}\r\neffects[\u0026quot;\u0026quot;] = function(subs, meta, line, syl)\r\n    -- base effect code here\r\nend\r\neffects.paint = function(subs, meta, line, syl)\r\n    -- paint effect code here\r\nend\r\neffects.cloud = function(subs, meta, line, syl)\r\n    -- cloud effect code here\r\nend\r\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThen later, in some per-syllable processing code:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-lua"\u003eeffects[syl.inline_fx](subs, meta, line, syl)\r\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eFirst, a table is created and filled with functions for applying the\ndifferent effects. The keys used for the table are the names of the\npossible inline-fx. When the effect has to be applied, the right function\nis looked up in the effect table and then called.\n{:/}\u003c/p\u003e\n\u003cp\u003e{::template name=\u0026ldquo;automation_navbox\u0026rdquo; /}\u003c/p\u003e\n'},{id:65,href:"/docs/3.2/en/karaoke_timing_tutorial/",title:"",description:null,content:'\u003cp\u003eThis tutorial will teach you how to load a song into Aegisub, how to enter the words for the song and how to add time-codes to the words to synchronise them with the song.\u003c/p\u003e\n\u003cp\u003eYou don\u0026rsquo;t need to have used Aegisub before to follow this tutorial.\u003c/p\u003e\n\u003ch2 id="before-we-begin"\u003eBefore we begin\u003c/h2\u003e\n\u003cp\u003eThere\u0026rsquo;s a few things you need to have ready before starting:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eThe song itself. This can for example be as an MP3 file or inside a video. Aegisub can read the sound from video files, you don\u0026rsquo;t need to create a separate sound file if the song is on a video.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv\u003e\u003c/div\u003e\r\n\u003cul\u003e\n\u003cli\u003eThe words for the song. It\u0026rsquo;s easiest if you have them in a plain text file (.txt file) broken into verses and stanzas already.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv\u003e\u003c/div\u003e\r\n\u003cp\u003eI am using an English song for demonstration here, but many of the more advanced functions in Aegisub are designed for use with songs in Japanese and other languages that often need transcription or transliteration into Latin script. I will show how to use those in a video tutorial.\u003c/p\u003e\n\u003ch2 id="loading-the-song"\u003eLoading the song\u003c/h2\u003e\n\u003cp\u003eWe\u0026rsquo;ll start by creating a new file. You already have that if you have just started Aegisub.\u003c/p\u003e\n\u003cp\u003e\u003cimg src="/img/3.2/Karatiming-1.png" alt="Karatiming-1"\u003e\u003c/p\u003e\n\u003cp\u003eNow open your song. Select \u003cstrong\u003eOpen Audio\u003c/strong\u003e from the \u003cstrong\u003eAudio\u003c/strong\u003e menu\u0026hellip;\u003c/p\u003e\n\u003cp\u003e\u003cimg src="/img/3.2/Karatiming-2.png" alt="Karatiming-2"\u003e\u003c/p\u003e\n\u003cp\u003e\u0026hellip;then select your song file.\u003c/p\u003e\n\u003cp\u003e\u003cimg src="/img/3.2/Karatiming-3.png" alt="Karatiming-3"\u003e\u003c/p\u003e\n\u003cp\u003eAegisub will now spend a short while reading the audio file.\u003c/p\u003e\n\u003cp\u003e\u003cimg src="/img/3.2/Karatiming-4.png" alt="Karatiming-4"\u003e\u003c/p\u003e\n\u003cp\u003eWhen it\u0026rsquo;s done, you should have a waveform display (the audio display) at the top of the Aegisub window. If you\u0026rsquo;ve used Aegisub before things might look a little different, it might be easier to follow the rest of this tutorial if you set things to look like on this picture.\u003c/p\u003e\n\u003cp\u003e\u003cimg src="/img/3.2/Karatiming-5.png" alt="Karatiming-5"\u003e\u003c/p\u003e\n\u003cp\u003eWe\u0026rsquo;ll look at how to use the audio display for timing in a moment, but first let\u0026rsquo;s get the lyrics for the song loaded.\u003c/p\u003e\n\u003ch3 id="tips"\u003eTips\u003c/h3\u003e\n\u003cp\u003e\u003cstrong\u003eLoading audio directly from video files:\u003c/strong\u003e You can select to choose from video files in the Open Audio file selector. This won\u0026rsquo;t actually open the video in the file, it will just read the audio from the video file, the same as if it was just the audio in a separate file.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eInstant loading of WAV files:\u003c/strong\u003e If you have an uncompressed PCM WAV file, Aegisub can open it instantly without first loading it entirely into memory. This can be a great time-saver, but of course it requires a bit of extra disk space and probably also a bit of work beforehand to even create the WAV file. (Remember that this only works with \u003cem\u003euncompressed PCM\u003c/em\u003e files, things like ADPCM or MP3 in WAV files won\u0026rsquo;t work and will still trigger the pre-loading.)\u003c/p\u003e\n\u003ch2 id="entering-the-words"\u003eEntering the words\u003c/h2\u003e\n\u003cp\u003eNow, to get the text in, we could just start typing it in\u0026hellip;\u003c/p\u003e\n\u003cp\u003e\u003cimg src="/img/3.2/Karatiming-6.png" alt="Karatiming-6"\u003e\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eBut don\u0026rsquo;t do that!\u003c/strong\u003e You\u0026rsquo;ll get much huger success if you have it all in a text file, copy it from there and paste it into Aegisub. (You can often also just copy-paste directly from your favourite lyrics website.)\u003c/p\u003e\n\u003cp\u003eI have the lyrics in a text file, so I open that, select the text and copy it to the clipboard.\u003c/p\u003e\n\u003cp\u003e\u003cimg src="/img/3.2/Karatiming-7.png" alt="Karatiming-7"\u003e\u003c/p\u003e\n\u003cp\u003eNow things get a little complicated, but don\u0026rsquo;t worry, it really isn\u0026rsquo;t hard :-)\u003c/p\u003e\n\u003cp\u003eThere are two different places you can paste into Aegisub: The subtitles grid and the subtitles edit box. When you paste into the subtitles grid, you create new lines in the subtitle file. When you paste into the subtitles edit box you change the currently selected subtitle line.\u003c/p\u003e\n\u003cp\u003eWe want to make sure we paste into the subtitles grid, so click once inside the grid area (at the bottom of the window) to set the input focus to that.\u003c/p\u003e\n\u003cp\u003e\u003cimg src="/img/3.2/Karatiming-8.png" alt="Karatiming-8"\u003e\u003c/p\u003e\n\u003cp\u003eAnd now we can paste in the lyrics.\u003c/p\u003e\n\u003cp\u003e\u003cimg src="/img/3.2/Karatiming-9.png" alt="Karatiming-9"\u003e\u003c/p\u003e\n\u003cp\u003eThey should appear immediately as lines in the grid. Notice that they all have start and end times set to zero. This makes it easier when we\u0026rsquo;re going to time each line of the lyrics to the song.\u003c/p\u003e\n\u003cp\u003e\u003cimg src="/img/3.2/Karatiming-10.png" alt="Karatiming-10"\u003e\u003c/p\u003e\n\u003cp\u003eIt might be a good idea to save your file now, just so you can easily save it later on without having to give it a name.\u003c/p\u003e\n\u003cp\u003eRemember that Aegisub automatically saves a copy of your file every minute, even if you haven\u0026rsquo;t given it a name yet, so you rarely lose much work if something goes wrong.\u003c/p\u003e\n\u003cp\u003e\u003cimg src="/img/3.2/Karatiming-11.png" alt="Karatiming-11"\u003e\u003c/p\u003e\n\u003cp\u003eNow we\u0026rsquo;re ready to time the individual lines in the lyrics.\u003c/p\u003e\n\u003ch2 id="rough-timing-the-lines-first"\u003eRough timing, the lines first\u003c/h2\u003e\n\u003cp\u003eBefore we start with timing, you should know that the way presented here is just one of many. There\u0026rsquo;s several ways you can time to audio in Aegisub and this one might not be the best one for you. Try to also explore the program and see if you can find your own best way to do it. This is just the way I (jfs) usually do it.\u003c/p\u003e\n\u003cp\u003eFirst let\u0026rsquo;s look at how to get around the audio display and play the audio. You might already have noticed that there\u0026rsquo;s no less than 6 different \u0026ldquo;Play\u0026rdquo; buttons. Usually you\u0026rsquo;ll just use one of them, though: The one with the blue outward-pointing brackets around. That one is Play Selection, and plays the part of the audio that\u0026rsquo;s currently highlighted.\u003c/p\u003e\n\u003cp\u003e\u003cimg src="/img/3.2/Karatiming-12.png" alt="Karatiming-12"\u003e\u003c/p\u003e\n\u003cp\u003eTry pressing the Play Selection button, you should hear the first 5 seconds of the song played. (Aegisub selects the first 5 seconds by default.)\u003c/p\u003e\n\u003cp\u003eNow try changing the selection: You can left-click and drag in the audio display to select the part you\u0026rsquo;ve dragged across. If you click and drag on the left or right edge of the selection you can change just the start or end. Finally, you can make a single left-click (without dragging!) anywhere to set the selection start right to that point, and you can make a single right-click to set the selection end.\u003c/p\u003e\n\u003cp\u003eLet\u0026rsquo;s time the first line. Find the start and end of the first line of the song you\u0026rsquo;re working on and make sure the audio selection matches it exactly. Notice that at first, the selection was gray but as soon as you started changing it, it became red and the word \u0026ldquo;Modified\u0026rdquo; appeared. This means that you have changed the selection but not saved (committed) the new timing.\u003c/p\u003e\n\u003cp\u003eTo commit the timing and store it back to the subtitle line, just press the Commit button, the green check mark.\u003c/p\u003e\n\u003cp\u003e\u003cimg src="/img/3.2/Karatiming-13.png" alt="Karatiming-13"\u003e\u003c/p\u003e\n\u003cp\u003eWhen you commit, you will also be sent to the next line automatically, so you can immediately continue timing that.\u003c/p\u003e\n\u003cp\u003eJust continue timing like that until you have covered all the lines of the song: Find start and end of line, set the selection and then commit.\u003c/p\u003e\n\u003cp\u003eWhen you\u0026rsquo;re done, save the file.\u003c/p\u003e\n\u003ch3 id="tips-1"\u003eTips\u003c/h3\u003e\n\u003cp\u003eTiming from audio isn\u0026rsquo;t hard at all, but here\u0026rsquo;s some tips to make it even easier and also a lot faster!\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eHotkeys:\u003c/strong\u003e There\u0026rsquo;s a number of keyboard shortcuts that can make audio timing much faster to work with.\u003c/p\u003e\n\u003cp\u003e\u003cimg src="/img/3.2/Karatiming-14.png" alt="Karatiming-14"\u003e\u003c/p\u003e\n\u003cp\u003eThe most important ones are:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eS\u003c/strong\u003e - Play Selection: Play back the currently selected audio.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eA\u003c/strong\u003e and \u003cstrong\u003eF\u003c/strong\u003e - Scroll Left and Right: Change the potion of the audio visible.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eG\u003c/strong\u003e - Commit: Copy the start and end times of the current audio selection into the line selected in the subtitles grid and move to the next line.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv\u003e\u003c/div\u003e\r\n\u003cp\u003e\u003cstrong\u003ePlay near start/end:\u003c/strong\u003e There\u0026rsquo;s four buttons (hotkeys Q, W, E and D) that play half a second just before or just after the start and end of the selection. You can use these to more accurately set the start and end to exactly where the singing starts/ends.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eChange selection while playing:\u003c/strong\u003e While audio is playing you can still change the selection. You won\u0026rsquo;t see any difference if you change the selection start, but if you change the selection end, playback will now end when it hits the new selection end. This way you can quickly stop playback by setting the end close to the playback cursor (the white line that moves while Aegisub is playing) or extend the playback to go even further.\u003c/p\u003e\n\u003cp\u003eFor example, when looking for the start of the first line, you can just start playback with the initial 5 second selection and continue extending it until you find the line. Then, while it\u0026rsquo;s still playing, you can set the right start time and then the end time. When you have the line approximately down like that, you can do an extra check by playing the entire selection again, or by using the Q/W/E/D keys to play the parts right around the start and end times.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eSpectrum mode:\u003c/strong\u003e Usually the audio display is in waveform mode, this is what I\u0026rsquo;ve shown on all the screenshots so far. But actually Aegisub has a much cooler way of showing the audio: Spectrum mode.\u003c/p\u003e\n\u003cp\u003e\u003cimg src="/img/3.2/Karatiming-15.png" alt="Karatiming-15"\u003e\u003c/p\u003e\n\u003cp\u003eThe spectrum mode takes more CPU and RAM than waveform mode, but it gives a better picture of the audio and with a bit of training you can learn to tell singing from music and even how different sounds look. For example, S sounds are very easy to recognise.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eZooming and scaling:\u003c/strong\u003e You can use the slider bars to the far right of the audio display to zoom in and out on the audio and to change the volume.\u003c/p\u003e\n\u003ch2 id="fine-timing-words-and-then-syllables"\u003eFine timing, words and then syllables\u003c/h2\u003e\n\u003cp\u003e{{todo|\nClick Karaoke button.\u003c/p\u003e\n\u003cp\u003eTime words.\u003c/p\u003e\n\u003cp\u003eClick Split button. Place split markers. Click Accept Split button.\u003c/p\u003e\n\u003cp\u003eTime syllables.\u003c/p\u003e\n\u003cp\u003eCommit.\u003c/p\u003e\n\u003cp\u003eRepeat.}}\u003c/p\u003e\n\u003ch2 id="styling"\u003eStyling\u003c/h2\u003e\n\u003cp\u003e{::template name=\u0026ldquo;todo\u0026rdquo;}a bit about styles, how basic karaoke looks, and the \\kf and \\ko effects{:/}\u003c/p\u003e\n\u003ch2 id="wrapping-up"\u003eWrapping up\u003c/h2\u003e\n\u003cp\u003e{::template name=\u0026ldquo;todo\u0026rdquo;}mention the video tutorial again and point to other relevant topics{:/}\u003c/p\u003e\n'},{id:66,href:"/docs/3.2/en/keyboard_shortcuts/",title:"",description:null,content:'\u003col\u003e\n\u003cli\u003eREDIRECT \u003ca href="/docs/3.2/en/options/#hotkeys"\u003eOptions#hotkeys\u003c/a\u003e\u003c/li\u003e\n\u003c/ol\u003e\n'},{id:67,href:"/docs/3.2/en/other_tools/",title:"",description:null,content:""},{id:68,href:"/docs/3.2/en/overview/",title:"",description:null,content:'\u003cp\u003e\u003cimg src="/img/3.2/Main-window-overview.png" alt="Main-window-overview"\u003e\u003c/p\u003e\n\u003cp\u003eThis screenshot shows the Aegisub main window with everything open:\u003c/p\u003e\n\u003cp\u003eThe two most important areas are the \u003cstrong\u003eSubtitles Grid\u003c/strong\u003e and \u003cstrong\u003eEdit Box\u003c/strong\u003e.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eThe grid\u003c/strong\u003e shows all the subtitle lines in the file you\u0026rsquo;re working with. Lines are marked with different colours depending on their properties. For example, lines with green background are selected. Lines with blue background are marked as comments and won\u0026rsquo;t be shown on screen. Lines with a light yellow background are visible on the current video frame. Lines with red text overlap in time with a currently selected line. Click a line here to select it for editing.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href="/docs/3.2/en/editing_subtitles/"\u003eEditing_Subtitles\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv\u003e\u003c/div\u003e\r\n\u003cp\u003eThe \u003cstrong\u003eedit box\u003c/strong\u003e is where you can edit the text and other properties of a subtitle line directly. While you can enter times in the time boxes here, you will rarely need to, as it\u0026rsquo;s much faster to time lines using the \u003cstrong\u003eaudio box\u003c/strong\u003e. You can also time to video. You can use the formatting toolbar to insert formatting codes into the current line. The four \u0026ldquo;AB\u0026rdquo; buttons change the colours of different elements of the line. Change the text for the subtitle and press Enter to commit the changes and go to the next line. Holding Ctrl while pressing Enter will stay on the line instead of going to the next, but still commit the changes.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href="/docs/3.2/en/editing_subtitles/"\u003eEditing_Subtitles\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv\u003e\u003c/div\u003e\r\n\u003cp\u003eUse the \u003cstrong\u003eaudio box\u003c/strong\u003e to time subtitles (synchronize them to audio) in a fast and accurate way.  The \u003cstrong\u003eaudio display\u003c/strong\u003e can show the audio you have loaded in two different ways, waveform and spectrum, the screenshot above shows it in spectrum mode.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href="/docs/3.2/en/audio/"\u003eWorking with Audio\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv\u003e\u003c/div\u003e\r\n\u003cp\u003eThe \u003cstrong\u003evideo box\u003c/strong\u003e allows you to see how the subtitles will look on the video, but it also allows you to select specific video frames a subtitle line should start/end on, and it allows you to use the mouse to position, rotate and crop a subtitle line to for example match an onscreen sign in the video.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href="/docs/3.2/en/video/"\u003eWorking with Video\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv\u003e\u003c/div\u003e\r\n\u003cp\u003eFinally, there are three bars in the program: the \u003cstrong\u003estatus bar\u003c/strong\u003e is used to show status messages to you, and the \u003cstrong\u003emenu bar\u003c/strong\u003e and \u003cstrong\u003etool bar\u003c/strong\u003e are used to access Aegisub\u0026rsquo;s myriad of tools:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href="/docs/3.2/en/exporting/"\u003eExport\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href="/docs/3.2/en/spell_checker/"\u003eSpell_Checker\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href="/docs/3.2/en/translation_assistant/"\u003eTranslation_Assistant\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href="/docs/3.2/en/paste_over/"\u003ePaste_Over\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href="/docs/3.2/en/select_lines/"\u003eSelect_Lines\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href="/docs/3.2/en/styles/"\u003eStyles Manager\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href="/docs/3.2/en/colour_picker/"\u003eColour_Picker\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href="/docs/3.2/en/styling_assistant/"\u003eStyling_Assistant\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href="/docs/3.2/en/resolution_resampler/"\u003eResolution_Resampler\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href="/docs/3.2/en/fonts_collector/"\u003eFonts_Collector\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href="/docs/3.2/en/shift_times/"\u003eShift_Times\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href="/docs/3.2/en/timing_post-processor/"\u003eTiming_Post-Processor\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href="/docs/3.2/en/kanji_timer/"\u003eKanji_Timer\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href="/docs/3.2/en/automation/"\u003eAutomation Manager\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href="/docs/3.2/en/options/"\u003eOptions\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href="/docs/3.2/en/properties/"\u003eScript Properties\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href="/docs/3.2/en/attachment_manager/"\u003eAttachment_Manager\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv\u003e\u003c/div\u003e\r\n'},{id:69,href:"/docs/3.2/en/script_resolution/",title:"",description:null,content:'\u003cp\u003eASS subtitle files are, to some extent, video independant and can be used with video files other than the one they were created with.\nThis is achieved by using a virtual video resolution which controls how font sizes and coordinates are interpreted, which is commonly known as the \u0026ldquo;script resolution\u0026rdquo;.\nUnfortunately, due to some bugs in the reference implementation of the subtitle format (VSFilter), rendering subtitles whose script resolution is not equal to the actual video resolution works poorly.\u003c/p\u003e\n\u003cp\u003eBecause the behavior of mismatched script and video resolutions can be confusing, we recommend keeping them the same when doing any complex styling.\nIf you are releasing a single subtitles file with multiple videos of different resolutions, the \u003ca href="/docs/3.2/en/resolution_resampler/"\u003eResolution Resampler\u003c/a\u003e can be used to convert a single file to each video resolution.\nHowever, if you\u0026rsquo;re just creating simple styled subtitles, you normally should not have to worry about this.\u003c/p\u003e\n\u003chr\u003e\n\u003cp\u003eThere are several categories of things which are affected by the script resolution:\u003c/p\u003e\n\u003cp\u003eAbsolute coordinates (margins, \u003ccode\u003e\\pos\u003c/code\u003e, \u003ccode\u003e\\move\u003c/code\u003e, \u003ccode\u003e\\clip\u003c/code\u003e, vector drawings): all absolute coordinates are in script resolution pixels and work sensibly.\u003c/p\u003e\n\u003cp\u003eFont sizes: the font size in ASS is the \u003cem\u003eline height\u003c/em\u003e in script resolution pixels.\nNote that this is not the normal definition of font size, and that it does not use the width at all.\nAs a result, the script resolution can not be used to adjust the aspect ratio of the subtitles for anamorphic video.\u003c/p\u003e\n\u003cp\u003eBorder sizes, shadow distance and blur strength: these can be in either script resolution or video resolution pixels.\nWhich is used is controlled by the ScaledBorderAndShadow field in the header: if yes, script resolution is used, if no, video resolution is used.\nScaling them relative to the script resolution should always be enabled.\u003c/p\u003e\n\u003ch3 id="changing-the-script-resolution"\u003eChanging the script resolution\u003c/h3\u003e\n\u003cp\u003eThe script resolution can be changed either by simply changing the value in the \u003ca href="/docs/3.2/en/properties/"\u003eProperties\u003c/a\u003e dialog, or by resampling the script to a new resolution with the \u003ca href="/docs/3.2/en/resolution_resampler/"\u003eResolution Resampler\u003c/a\u003e tool.\nWhich to do depends on why you need to change the resolution.\nIf you currently have an unstyled subtitle script which was set to the wrong resolution for whatever reason, change it in the \u003ca href="/docs/3.2/en/properties/"\u003eProperties\u003c/a\u003e dialog.\nIf the script has already been styled and you now want to use it with a video of a different resolution, use the \u003ca href="/docs/3.2/en/resolution_resampler/"\u003eResolution Resampler\u003c/a\u003e.\u003c/p\u003e\n\u003ch3 id="ycbcr-matrix"\u003eYCbCr Matrix\u003c/h3\u003e\n\u003cp\u003eYou can ignore this entirely unless you are creating subtitles which need to exactly match a color in the video (such as if you are masking a portion of the screen with a vector drawing).\u003c/p\u003e\n\u003cp\u003eColors in ASS are specified as BGR values, but videos are normally stored in YCbCr, and there are several possible conversions between the two.\nIn some situations the subtitle renderer needs to know which color matrix was used by Aegisub to be able to correctly match Aegisub\u0026rsquo;s rendering of the subtitles.\nThis is normally automatically set correctly by recent versions of Aegisub, but you may need to manually adjust it if working with scripts created by pre-3.1 versions.\u003c/p\u003e\n\u003ch3 id="automatic-resolution-change"\u003eAutomatic resolution change\u003c/h3\u003e\n\u003cp\u003eWhen opening a video which has a different resolution from the script\u0026rsquo;s resolution, by default Aegisub will ask you what to do.\u003c/p\u003e\n\u003cp\u003eIf the video and the script have the same aspect ratio, you\u0026rsquo;ll get the following dialog:\u003c/p\u003e\n\u003cp\u003e\u003cimg src="/img/3.2/resolution-mismatch.png" alt="resolution-mismatch"\u003e{: class=\u0026ldquo;center\u0026rdquo;}\u003c/p\u003e\n\u003cp\u003e\u0026ldquo;Resample script\u0026rdquo; will resample the subtitles to the new video\u0026rsquo;s resolution as if you had used the \u003ca href="/docs/3.2/en/resolution_resampler/"\u003eResolution Resampler\u003c/a\u003e, and is normally what you want if you\u0026rsquo;re updating pre-existing subtitles for the video you just opened.\u003c/p\u003e\n\u003cp\u003e\u0026ldquo;Set to video resolution\u0026rdquo; will simply set the script resolution to the video\u0026rsquo;s resolution.\nThis is the correct thing to do only if the subtitles actually match the video you just opened already, but someone previously changed the script resolution to an incorrect value.\u003c/p\u003e\n\u003cp\u003eCancel or hitting ESC will leave the script resolution at its current value.\nYou want to do this if you are opening a lower-resolution work raw after the subtitles have already been styled for the final video resolution.\u003c/p\u003e\n\u003chr\u003e\n\u003cp\u003eIf the video\u0026rsquo;s aspect ratio is different from the script\u0026rsquo;s, you\u0026rsquo;ll get the following dialog:\u003c/p\u003e\n\u003cp\u003e\u003cimg src="/img/3.2/resolution-mismatch-ar.png" alt="resolution-mismatch-ar"\u003e{: class=\u0026ldquo;center\u0026rdquo;}\u003c/p\u003e\n\u003cp\u003eThere are a few common scnarios where the aspect ratio will have changed:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003eThe new video is anamorphic while the script was created with a pre-stretched video (or vice versa).\nThis typially happens with DVDs, where a 720x480 image is stretched to either 640x480 or 853x480 on playback.\nIn this case you want to stretch the subtitles to the new aspect ratio, as the stretching will be canceled out by the anamorphic rendering.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eThe original video contained only the content area and the new video has added black borders on either the top and bottom or left and right.\nAlternatively, the original video was a pan-and-scan version, while the new video contains the full image.\nSelect \u0026ldquo;add borders\u0026rdquo; for this case.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eEither the original video was black-bordered and the new video is not, or the new video is a pan-and-scan.\nSelect \u0026ldquo;remove borders\u0026rdquo;.\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n'},{id:70,href:"/docs/3.2/en/shift_times/",title:"",description:null,content:'\u003cp\u003eThe \u003cstrong\u003eshift times\u003c/strong\u003e tool is a batch processor for timestamps; it adjusts the\nstart/end timestamps of many subtitle lines at once in various ways. It is\nlocated under \u003cem\u003eTiming\u003c/em\u003e -\u0026gt; \u003cem\u003eShift Times\u003c/em\u003e.\u003c/p\u003e\n\u003cp\u003eIt looks like this:\u003c/p\u003e\n\u003cp\u003e\u003cimg src="/img/3.2/shift_times.png" alt="shift_times"\u003e{: class=\u0026ldquo;center\u0026rdquo;}\u003c/p\u003e\n\u003cp\u003eThe left part of the window contain the options.\u003c/p\u003e\n\u003ch3 id="shift-by"\u003eShift by\u003c/h3\u003e\n\u003cp\u003eThese controls decide in which direction and by how much each timestamp will\nbe modified.\u003c/p\u003e\n\u003cdl\u003e\n\u003cdt\u003eTime\u003c/dt\u003e\n\u003cdd\u003eHow much you want to adjust each timestamp, in\nhours:minutes:seconds.centiseconds.\u003c/dd\u003e\n\u003cdt\u003eFrames\u003c/dt\u003e\n\u003cdd\u003eIf you have video loaded, you can specify the adjustment time as a\nnumber of frames instead. Note that shifting by zero frames will snap\nthe timestamps to the frame times without doing any shifting.\u003c/dd\u003e\n\u003cdt\u003eForward or Backward\u003c/dt\u003e\n\u003cdd\u003eControls in which direction the timestamps are adjusted.\n{: .horizontal-wide}\u003c/dd\u003e\n\u003c/dl\u003e\n\u003ch3 id="affect"\u003eAffect\u003c/h3\u003e\n\u003cp\u003eThese controls decide what lines will be processed.\u003c/p\u003e\n\u003cdl\u003e\n\u003cdt\u003eAll rows\u003c/dt\u003e\n\u003cdd\u003eApplies the time shifting to all lines in the script.\u003c/dd\u003e\n\u003cdt\u003eSelected rows\u003c/dt\u003e\n\u003cdd\u003eApplies the time shifting only to the selected lines.\u003c/dd\u003e\n\u003cdt\u003eSelection onward\u003c/dt\u003e\n\u003cdd\u003eApplies the time shifting to the first selected line and all lines\nbelow it (in the grid).\n{: .horizontal-wide}\u003c/dd\u003e\n\u003c/dl\u003e\n\u003ch3 id="times"\u003eTimes\u003c/h3\u003e\n\u003cp\u003eThese controls decide what timestamps will be processed.\u003c/p\u003e\n\u003cdl\u003e\n\u003cdt\u003eStart and End times\u003c/dt\u003e\n\u003cdd\u003eBoth start and end times of the affected lines will be modified by\nthe given amount.\u003c/dd\u003e\n\u003cdt\u003eStart times only\u003c/dt\u003e\n\u003cdd\u003eOnly the start times of the affected lines will be modified. Note\nthat this makes the lines longer (if you shift backwards) or shorter\n(if you shift forwards) and can even make them have a duration of zero.\u003c/dd\u003e\n\u003cdt\u003eEnd times only\u003c/dt\u003e\n\u003cdd\u003eOnly the end times of the affected lines will be modified. Note that\nthis makes the lines longer (if you shift forwards) or shorter (if you\nshift backwards) and can even make them have a duration of zero.\n{: .horizontal-wide}\u003c/dd\u003e\n\u003c/dl\u003e\n\u003cp\u003eNote that if a line is shifted so that its start or end time stamp would be\nnegative, that timestamp is zeroed instead. This can be used to clear all\ntimings from an entire script, by shifting backwards by longer than the\nlatest timestamp in the script.\u003c/p\u003e\n\u003ch3 id="load-from-history"\u003eLoad from history\u003c/h3\u003e\n\u003cp\u003eThis is a history of all time shiftings you have done since last time you\ncleared the shift history (with the clear button). The format is a number of\nfields separated by commas. The fields are:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eFilename of the script (e.g. \u0026ldquo;example.ass\u0026rdquo;)\u003c/li\u003e\n\u003cli\u003eShift amount and direction (e.g. \u0026ldquo;0:00:05.00 forward\u0026rdquo;)\u003c/li\u003e\n\u003cli\u003eWhat times were affected, \u0026ldquo;s\u0026rdquo; for start, \u0026ldquo;e\u0026rdquo; for end, \u0026ldquo;s+e\u0026rdquo; for both\nWhat rows were affected; \u0026ldquo;sel start-end\u0026rdquo; for selections, \u0026ldquo;all\u0026rdquo; for all\nrows (e.g. \u0026ldquo;sel 1-40\u0026rdquo;)\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eTo load the settings from a history entry simply double-click it.\u003c/p\u003e\n'},{id:71,href:"/docs/3.2/en/sidebar/history_of_automation/",title:"",description:null,content:'\u003cp\u003eThe Automation system in Aegisub has evolved from a very basic and hardly useful stand-alone system for creating basic karaoke effects into a very powerful extension mechanism. Here\u0026rsquo;s a short account of its history, from the principal author of the systems.\u003c/p\u003e\n\u003ch2 id="automation-1-really-just-karaoke-effector"\u003eAutomation 1, really just Karaoke Effector\u003c/h2\u003e\n\u003cp\u003e\u003cimg src="/img/3.2/Effector_screenshot.png" alt="Effector_screenshot"\u003e\u003c/p\u003e\n\u003cp\u003eThe \u003cem\u003eKaraoke Effector\u003c/em\u003e program was originally created for making karaoke effects for a small translation project, that later died. It was written in Borland Delphi and used Lua 5.0 for scripting. This use of Lua is the primary reason I even call it \u0026ldquo;Automation 1\u0026rdquo; today. It basically allowed creating effects similar to what the \u003cem\u003esimple-k-replacer\u003c/em\u003e script from Automation 3 does, but in a more complicated and not as usable way.\u003c/p\u003e\n\u003cp\u003eIf you want to try this relic from the museum, you can download it here: \u003ca href="http://www.animereactor.dk/aegisub/effector.rar"\u003ehttp://www.animereactor.dk/aegisub/effector.rar\u003c/a\u003e\u003c/p\u003e\n\u003ch2 id="automation-2-the-python-engine-that-never-happened"\u003eAutomation 2, the Python engine that never happened\u003c/h2\u003e\n\u003cp\u003eAutomation 2 was intended to be the scripting system in Aegisub, I drafted the specifications for it while Aegisub was still only in internal pre-alpha development. It was planned to use Python for scripting language and be quite flexible. It just proved to be an overall bad design (which on hindsight might have been a good thing) and it was never implemented. Instead I started looking into Lua again and drafting what became Automation 3.\u003c/p\u003e\n\u003cp\u003eI don\u0026rsquo;t think there\u0026rsquo;s much of any proof of the work on Automation 2 left now. The main thing to be said about it is that the current Automation 4 achieves everything Automation 2 was intended to be, and even more.\u003c/p\u003e\n\u003ch2 id="automation-3-back-to-lua-and-something-usable"\u003eAutomation 3, back to Lua and something usable\u003c/h2\u003e\n\u003cp\u003eAfter the fiasco of Automation 2 and Python I went \u0026ldquo;browsing languages\u0026rdquo; again and ended up going back to Lua, and also went for a much less ambitious design. This proved to work and ended up as the Automation 3 system. Originally Automation 3 was also intended to be somewhat extensible and down the road support more than just the basic modification of subtitle lines, this is evident from the \u003cem\u003ekind=\u0026ldquo;basic_ass\u0026rdquo;\u003c/em\u003e statement required in all Automation 3 scripts. Unfortunately the overall architecture of Automation 3 in the end didn\u0026rsquo;t allow it to be extended either way, and the first rough ideas for Automation 4 started forming.\u003c/p\u003e\n\u003cp\u003eIn the end Automation 3 did prove very successful though and has done a great job.\u003c/p\u003e\n\u003ch2 id="automation-4-unlimited-feature-works"\u003eAutomation 4, unlimited feature works?\u003c/h2\u003e\n\u003cp\u003e\u003cimg src="/img/3.2/Hello-auto4.png" alt="Hello-auto4"\u003e\u003c/p\u003e\n\u003cp\u003eAs the flaws of Automation 3 started showing through the design of Automation 4 begun. Lots of people had been crying for other languages, especially Perl and Python, so support for multiple scripting languages went into the core design. The development of Automation 4 was much on and off, standing still for months at a time. Originally it was planned for Aegisub 1.09, then got pushed to 1.10 and then finally to 1.11, which then grew into Aegisub 2 because of the load of new features and major redesigns in that version, Automation 4 one of them.\u003c/p\u003e\n\u003cp\u003eIn mid-May 2006 Automation 4/Lua was finally in a \u0026ldquo;working\u0026rdquo; state, if I am to trust the timestamp of \u003cem\u003ehello-auto4.png\u003c/em\u003e but first now, more than a year later, it\u0026rsquo;s really useful. A testament to my laziness.\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e\u003cem\u003e- Niels Martin Hansen, July 2nd, 2007\u003c/em\u003e\u003c/p\u003e\n\u003c/blockquote\u003e\n'},{id:72,href:"/docs/3.2/en/timing/",title:"",description:null,content:'\u003ch2 id="the-main-audio-view"\u003eThe main audio view\u003c/h2\u003e\n\u003cp\u003eWhen your audio file has loaded, Aegisub will transform into something like\nthe screenshot below:\n\u003cimg src="/img/3.2/audio_display.png" alt="audio_display"\u003e\u003c/p\u003e\n\u003cp\u003eYou can click and drag just below the audio timeline to change the height of\nthe audio waveform/spectrum display.\u003c/p\u003e\n\u003cp\u003eGreen and red buttons are toggle buttons. A green background indicates that\nthe option is turned on, while a red background indicates that the option is\nturned off. The buttons and controls are as follows (many of these have\n\u003ca href="/docs/3.2/en/keyboard_shortcuts/"\u003ekeyboard shortcuts\u003c/a\u003e associated with them by default):\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eGo to previous line, discarding any unsaved changes (previous syllable\nwhen in \u003ca href="/docs/3.2/en/audio/#karaokemode"\u003ekaraoke mode\u003c/a\u003e)\u003c/li\u003e\n\u003cli\u003eGo to next line, discarding any unsaved changes (next syllable when in\nkaraoke mode)\u003c/li\u003e\n\u003cli\u003ePlay selected area of the audio waveform\u003c/li\u003e\n\u003cli\u003ePlay currently selected line\u003c/li\u003e\n\u003cli\u003ePause playback\u003c/li\u003e\n\u003cli\u003ePlay 500ms before selection start\u003c/li\u003e\n\u003cli\u003ePlay 500ms after selection end\u003c/li\u003e\n\u003cli\u003ePlay first 500ms of selection\u003c/li\u003e\n\u003cli\u003ePlay last 500ms of selection\u003c/li\u003e\n\u003cli\u003ePlay from selection start to end of file (or until pause is pressed)\u003c/li\u003e\n\u003cli\u003eAdd lead-in (how much is determined by the \u003ca href="/docs/3.2/en/options/#audio"\u003eaudio lead in setting\u003c/a\u003e)\u003c/li\u003e\n\u003cli\u003eAdd lead-out (exactly like the above, but the setting is called \u003ca href="/docs/3.2/en/options/#audio"\u003eaudio lead out\u003c/a\u003e, logically enough)\u003c/li\u003e\n\u003cli\u003eCommit (save) changes\u003c/li\u003e\n\u003cli\u003eScroll view to selection/go to selection\u003c/li\u003e\n\u003cli\u003eToggle auto-commit (if enabled, all timing changes are committed\ninstantly rather than waiting for the user to press commit)\u003c/li\u003e\n\u003cli\u003eToggle auto next line on commit (if this is enabled, Aegisub will\nautomatically select the next line when the current line is committed by\nthe user. Auto-commits do not trigger this, for obvious reasons)\u003c/li\u003e\n\u003cli\u003eToggle auto-scrolling (will center waveform on the currently selected\nline automatically when enabled)\u003c/li\u003e\n\u003cli\u003eToggle spectrum analyzer mode (see below)\u003c/li\u003e\n\u003cli\u003eToggle Medusa-style timing shortcuts\u003c/li\u003e\n\u003cli\u003eToggle karaoke mode\u003c/li\u003e\n\u003cli\u003eAudio display zoom (horizontal)\u003c/li\u003e\n\u003cli\u003eAudio display zoom (vertical)\u003c/li\u003e\n\u003cli\u003eAudio volume\u003c/li\u003e\n\u003cli\u003eToggle linking of vertical audio zoom slider with volume slider\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2 id="basic-audio-timing"\u003eBasic audio timing\u003c/h2\u003e\n\u003cp\u003eWhen you click on a line in the subtitles grid, Aegisub will highlight it in\nthe audio display and, if you have auto-scrolling enabled, scroll the audio\ndisplay so it\u0026rsquo;s centered on the line (during normal timing, it\u0026rsquo;s usually a good\nidea to disable auto-scrolling). You\u0026rsquo;ll notice various vertical lines in the\naudio display; the pink ones indicate keyframes in the video if you have it\nloaded (see the \u003ca href="/docs/3.2/en/video/"\u003eWorking with video\u003c/a\u003e section), the white broken line\nindicates the currently visible video frame, and the thick red and orange ones\nare the line start and end markers (respectively) for the current line. To\n(re-)define the start and end times of the line, you can either left-click to\nset the start time and right-click to set the end time, or just drag-and-drop\nthe line boundaries.  Press the \u003cem\u003eplay\u003c/em\u003e button (keyboard shortcut \u003cem\u003es\u003c/em\u003e by\ndefault) to listen to the selection, or the various other playing buttons to\nlisten to parts of the selection or the audio surrounding it. When you are\nsatisfied with the timing, press commit to save the line and move onto the next\none. Then repeat once for every line; it\u0026rsquo;s as simple as that.\u003c/p\u003e\n\u003cp\u003eHolding shift will make line boundaries snap to other lines and keyframes (or disable snapping if you\u0026rsquo;ve set the option to snap by default).\nHolding ctrl will let you drag multiple overlapping boundaries at once.\nFor example, if you have two lines already snapped to each other but want to shift the transition between the lines back a little, you can select both lines in the grid, then hold ctrl and drag the boundary between them to change both the end time of the first line and the start time of the second line.\u003c/p\u003e\n\u003cp\u003eHolding alt will make you drag all selected lines (both start and end times).\u003c/p\u003e\n\u003ch3 id="timing-protips"\u003eTiming protips\u003c/h3\u003e\n\u003cp\u003eIf you want to finish timing your movie or episode within any reasonable\namount of time, there\u0026rsquo;s some things you should note:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eUse keyboard shortcuts! They speed up your work by several orders of\nmagnitude.\u003c/li\u003e\n\u003cli\u003eYou don\u0026rsquo;t need to have video displayed while timing. If you think you do,\nthere\u0026rsquo;s a good change you\u0026rsquo;re doing something wrong. Scene-timing, i.e.\nsyncing line start/ends to scene changes, can be done later. Either\nmanually, or with the \u003ca href="/docs/3.2/en/timing_post-processor/"\u003etiming postprocessor\u003c/a\u003e.\u003c/li\u003e\n\u003cli\u003eUse \u0026ldquo;go to next line on commit\u0026rdquo;.\u003c/li\u003e\n\u003cli\u003eExperiment with different timing styles when you\u0026rsquo;re new and stick to one\nthat suits you. Then practice. Lots.\u003c/li\u003e\n\u003cli\u003eAegisub heavily relies on the concept of \u0026ldquo;focus\u0026rdquo;, and doing things in a\nway that require you to switch back and forth between video/audio/subtitle\nedit box a lot will cost you a lot of time. Do it in several \u0026ldquo;passes\u0026rdquo;\ninstead.\u003c/li\u003e\n\u003cli\u003eThe spectrum analyzer mode looks weird at first, but usually makes it lot\neasier to \u0026ldquo;see\u0026rdquo; where lines start and end, especially when there is\nbackground noise.\u003c/li\u003e\n\u003cli\u003eWith practice, it\u0026rsquo;s often faster and easier to time something from scratch\nthan fix bad timing, due to that fixing bad timing requires spending a small\namount of time thinking about each line.\u003c/li\u003e\n\u003cli\u003eIf you want to delete all timing data and start over, a simple way is to use\nthe \u003ca href="/docs/3.2/en/shift_times/"\u003eshift times dialog\u003c/a\u003e to shift all lines backwards by\n9:59:59.99.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eOne common timing style (preferred by the author of this page) goes something\nlike the following: Turn on \u0026ldquo;go to next line on commit\u0026rdquo; but disable\nauto-committing, auto-scrolling and Medusa timing shortcuts. Keep the four main\nfingers of your left hand on s/d/f/g. You won\u0026rsquo;t be using the thumb so do\nwhatever you want with it. Keep your right hand on the mouse. Now select (by\nleft- and right-clicking) an area in the waveform that seems likely to contain\na line of speech matching the current subtitle line, and hit \u003cem\u003es\u003c/em\u003e to play it\nback.  While it\u0026rsquo;s playing, adjust the start time if necessary. When the\nplayback marker has passed the end time mark, adjust the end time as well. If\ngreater accuracy is needed, play the last 500ms of the selection by pressing\n\u003cem\u003ed\u003c/em\u003e, 500ms before the selection start by pressing \u003cem\u003eq\u003c/em\u003e, 500ms after the\nselection end by pressing \u003cem\u003ew\u003c/em\u003e, or the first 500ms of the selection by pressing\n\u003cem\u003ee\u003c/em\u003e. As you grow more experienced, you won\u0026rsquo;t be using anything else than \u003cem\u003es\u003c/em\u003e\nvery much, except maybe \u003cem\u003ed\u003c/em\u003e and \u003cem\u003eq\u003c/em\u003e. When you\u0026rsquo;re satisfied with the timing, hit\n\u003cem\u003eg\u003c/em\u003e to commit changes and go on to the next line. Scroll the audio display\nforward by pressing \u003cem\u003ef\u003c/em\u003e. If you need to scroll it backwards, use \u003cem\u003ea\u003c/em\u003e. To go to\nnext or previous line without committing changes, use \u003cem\u003ez\u003c/em\u003e and \u003cem\u003ex\u003c/em\u003e.\u003c/p\u003e\n\u003cp\u003eThis style has the advantage that you never need to move your hands at all.\nWith some training, it can also be very fast; audio timing 350-400 lines of\ndialog to a 25-minute episode can easily be done in less than 40 minutes,\nand less verbose scripts can sometimes be done faster than real time.\u003c/p\u003e\n\u003cp\u003eOf course, this style may not feel comfortable for all people; you should\nexperiment with other timing styles before deciding which one is best for\nyou.\u003c/p\u003e\n\u003ch3 id="the-spectrum-analyzer-mode"\u003eThe spectrum analyzer mode\u003c/h3\u003e\n\u003cp\u003e\u003cimg src="/img/3.2/spectrum.png" alt="spectrum"\u003e\u003c/p\u003e\n\u003cp\u003eWhen you press the spectrum analyzer button, the waveform does no longer\nshow amplitude (signal strength) on the vertical axis - instead it shows\nfrequency. The higher up, the higher the frequency. The colors instead\nindicate amplitude, with black/dark blue being silence and white being the\nstrongest sound. This may seem confusing, but since the frequency window is\nset to fit human voices rather well, it can make it easy to tell where a\nline (or a word in karaoke mode) starts and ends when there\u0026rsquo;s a lot of\nbackground noise (or music) that makes it hard to tell from the normal\nwaveform. It can be especially useful when timing karaoke. Play around with\nit for a little while, and you\u0026rsquo;ll understand how it works.\u003c/p\u003e\n\u003cp\u003eNote that in spectrum analyzer mode, the \u0026ldquo;vertical zoom\u0026rdquo; slider is redefined\nto control color intensity instead, since the colors indicate signal\nstrength.\u003c/p\u003e\n\u003cp\u003eBecause calculating the spectrum data is very CPU intensive, it in initially\nset to be in a medium quality. You can increase the quality of the spectrum\nin the \u003ca href="/docs/3.2/en/audio/#options"\u003eaudio options\u003c/a\u003e. This is mostly important when you built\nAegisub yourself and did not use FFTW3; FFTW3 is fast enough that the default\nquality is bumped up a bit.\u003c/p\u003e\n\u003ch2 id="karaoke-timing"\u003eKaraoke timing\u003c/h2\u003e\n\u003cp\u003e{::template name=\u0026ldquo;todo\u0026rdquo;}here be dragons{:/}\u003c/p\u003e\n'},{id:73,href:"/docs/3.2/en/timing_post-processor/",title:"",description:null,content:'\u003cp\u003eThe timing postprocessor is a highly useful tool for automatically correcting\ntiming in various ways.\u003c/p\u003e\n\u003ch2 id="overview"\u003eOverview\u003c/h2\u003e\n\u003cp\u003eAs shown in the screenshot, there are three functions:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eAdd lead-in and/or lead-out\u003c/li\u003e\n\u003cli\u003eMake lines that start close to each other continuous by extending or\ncontracting their start and/or end times\u003c/li\u003e\n\u003cli\u003eSnapping line starts/ends to video keyframes (only available if a video is\nloaded)\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cimg src="/img/3.2/Dialog_timing_processor.png" alt="Dialog_timing_processor"\u003e{: class=\u0026ldquo;center\u0026rdquo;}\u003c/p\u003e\n\u003cp\u003eThe processing gets applied in the order it is displayed in the dialogue box.\nThat is to say, first lead-in/outs are added, then a check for adjascent lines\nis performed and lines that are closer than the given threshold are made\ncontinuous, and lastly, line start/ends get snapped to keyframes.\u003c/p\u003e\n\u003ch2 id="apply-to-styles"\u003eApply to styles\u003c/h2\u003e\n\u003cp\u003eThis field determines which styles will get processed - check all you want to\nprocess. This is useful for only processing dialogue lines while leaving signs\nand/or karaoke alone.\u003c/p\u003e\n\u003ch2 id="options"\u003eOptions\u003c/h2\u003e\n\u003cp\u003eCheck \u0026ldquo;Affect Selection Only\u0026rdquo; to restrict the operation to the selected lines.\nIf this is left unchecked, all lines in the file whose style match the selected\nones will be affected.\u003c/p\u003e\n\u003ch2 id="lead-inlead-out"\u003eLead-in/Lead-out\u003c/h2\u003e\n\u003cp\u003eThis function extends the start/end times of the line, a procedure known as\nadding lead-in and lead-out. The postprocessor will add the given time (in\nmilliseconds) to each line start and end, respectively. You can add both\nlead-in and lead-out, only one, or none, by checking and unchecking the boxes\nas appropriate. Adding lead-in or out will never make lines overlap if they do\nnot already overlap.\u003c/p\u003e\n\u003ch2 id="make-adjacent-subtitles-continuous"\u003eMake adjacent subtitles continuous\u003c/h2\u003e\n\u003cp\u003eThis function will check if any two lines\' starts and ends are closer in time\nthan the given threshold (in milliseconds). If they are, one or both will get\ntheir start and/or end time moved so that they are continuous (i.e. one appears\ndirectly following the next, without any subtitle-less frames in between).\u003c/p\u003e\n\u003cp\u003eThe \u003cem\u003eBias\u003c/em\u003e slider determines how the lines are extended. Sliding it all the way\nto the right will extend the end time of the first line all the way to the\nstart time of the second, without touching the second line at all. Sliding it\nall the way to the left will instead make the start time of the second line\nextend backwards to the end of the first line, without touching the first line\nat all. Putting it in the middle will extend the end time of the first line and\nthe start time of the second equally, so that they meet in the middle. Anything\nin between will makes the lines \u0026ldquo;meet\u0026rdquo; where the slider is, so to speak. For\nexample, if the threshold was 1000, and the slider was 3/4ths of the way to the\nright (roughly as shown in the screenshot), the end time of the first line\nwould get extended by 750 ms, and the start time of the second extended\nbackwards with 250 ms.\u003c/p\u003e\n\u003cp\u003eNote that when using \u003cem\u003eMake adjacent subtitles continuous\u003c/em\u003e to eliminate\noverlaps, you probably do not want to enable adding lead-in or out, as that is\napplied before the overlap elimination.\u003c/p\u003e\n\u003ch2 id="keyframe-snapping"\u003eKeyframe snapping\u003c/h2\u003e\n\u003cp\u003eThe keyframe snapping function is a kind of automatic scenetimer. It is\nprobably the most useful of the three, but will only work if there is a video\nor keyframe loaded, because of its dependency on keyframes. See the \u003ca href="/docs/3.2/en/video/#keyframes"\u003ekeyframes section of the working with video page\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eThe keyframe snapping function will look at how close the start and end of\nlines are to the nearest keyframe, and if they are closer than the given\nthreshold, it will get extended or shortened to the keyframe.\u003c/p\u003e\n\u003cp\u003eThere are four thresholds to consider:\u003c/p\u003e\n\u003cdl\u003e\n\u003cdt\u003e\u003cem\u003eStarts before\u003c/em\u003e\u003c/dt\u003e\n\u003cdd\u003eIf the line starts less than this many milliseconds (inclusive) \u003cem\u003ebefore\u003c/em\u003e a\nkeyframe, its start time will get moved forward so that the line starts on\nthe keyframe.\u003c/dd\u003e\n\u003cdt\u003e\u003cem\u003eStarts after\u003c/em\u003e\u003c/dt\u003e\n\u003cdd\u003eIf the line starts less than this many milliseconds (inclusive) \u003cem\u003eafter\u003c/em\u003e a\nkeyframe, its start time will get moved backward so that the line starts on\nthe keyframe.\u003c/dd\u003e\n\u003cdt\u003e\u003cem\u003eEnds before\u003c/em\u003e\u003c/dt\u003e\n\u003cdd\u003eIf the line ends less than this many milliseconds (inclusive) \u003cem\u003ebefore\u003c/em\u003e a\nkeyframe, its end time will get moved forward so that the line ends on the\nframe before the keyframe.\u003c/dd\u003e\n\u003cdt\u003e\u003cem\u003eEnds after\u003c/em\u003e\u003c/dt\u003e\n\u003cdd\u003eif the line ends less than this many milliseconds (inclusive) \u003cem\u003eafter\u003c/em\u003e a\nkeyframe, its end time will get moved backward so that the line ends on the\nframe before the keyframe.\u003c/dd\u003e\n\u003c/dl\u003e\n\u003cp\u003eWhen using this feature, remember your lead-in/out times! Your \u003cem\u003eStarts before\u003c/em\u003e\nand \u003cem\u003eEnds after\u003c/em\u003e thresholds should normally be at least as long as your lead-in\nand lead-out, or lines which were initially scene-timed may be turned into\nbleeds.\u003c/p\u003e\n\u003cp\u003eAnother thing you can do with the keyframe snapping feature is using it to\ncorrect one-frame bleeds really, really fast. If your script is full of them,\njust set all the thresholds to 50, disable the lead-in/out adding and the\nadjacent line snapping, choose your dialogue style, and hit Apply. Problem\nsolved.\u003c/p\u003e\n'},{id:74,href:"/docs/",title:"Docs",description:null,content:""}];b.add(c),userinput.addEventListener('input',e,!0),suggestions.addEventListener('click',f,!0);function e(){var g=this.value,e=b.search(g,5),f=suggestions.childNodes,h=0,i=e.length,c;for(suggestions.classList.remove('d-none'),e.forEach(function(b){c=document.createElement('div'),c.innerHTML='<a href><span></span><span></span></a>',a=c.querySelector('a'),t=c.querySelector('span:first-child'),d=c.querySelector('span:nth-child(2)'),a.href=b.href,t.textContent=b.title,d.textContent=b.description,suggestions.appendChild(c)});f.length>i;)suggestions.removeChild(f[h])}function f(){while(suggestions.lastChild)suggestions.removeChild(suggestions.lastChild);return!1}})()